;;
;; Definition of stat-calc-p-button
;;
;; Buttons for mathematical/statistical functions
;;

(defproto stat-calc-p-button '(p title bitmap text) () stat-calc-sub-view "Stat Calc Sub View")

(defmeth stat-calc-p-button :p (&optional p)
  (if p (setf (slot-value 'p) p))
  (slot-value 'p))

(defmeth stat-calc-p-button :title (&optional title)
  (if title (setf (slot-value 'title) title))
  (slot-value 'title))

(defmeth stat-calc-p-button :bitmap (&optional bitmap)
  (if bitmap (setf (slot-value 'bitmap) bitmap))
  (slot-value 'bitmap))

(defmeth stat-calc-p-button :text (&optional text)
  (if text (setf (slot-value 'text) text))
  (slot-value 'text))

(defmeth stat-calc-p-button :isnew (title p window bitmap left top right bottom)
  (let* ((rightt (+ left sc-ps-button-width))
         (bottomm (+ top sc-ps-button-height)))
    (send self :title title)
    (send self :p p)
    (send self :bitmap bitmap)
    (call-next-method window left top right bottom)))

(defmeth stat-calc-p-button :draw ()
  (let* ((left (send self :left))
         (right (send self :right))
         (top (send self :top))
         (bottom (send self :bottom))
         (bitmap (send self :bitmap))
         (w (send self :window)))
    (send w :draw-bitmap bitmap left top)
    (call-next-method)))

(defmeth stat-calc-p-button :while-mouse-button-down ()
(let* ((left (send self :left))
         (right (send self :right))
         (top (send self :top))
         (bottom (send self :bottom))
         (w (send self :window))
         (in 't)
         (black 't))
  (send w :while-button-down 
        #'(lambda (x y)
            (cond ((and (>= x left) (<= x right) (>= y top) (<= y bottom) (not in))
                   (send w :paint-rect left top (- right left) (- bottom top))
                   (setf in 't)))
            (cond ((and (not (and (>= x left) (<= x right) (>= y top) (<= y bottom))) in)
                   (send w :paint-rect left top (- right left) (- bottom top))
                   (setf in nil)))))
  in))

(defmeth stat-calc-p-button :do-click (x y m1 m2)
  (let* ((left (send self :left))
         (right (send self :right))
         (top (send self :top))
         (bottom (send self :bottom))
         (w (send self :window))
         (expre (send (send self :p) :expression))
         (curexp (send expre :cur-exp))
         (fullexp (send expre :full-exp))
         (handled nil))
    (cond ((and (>= x left) (<= x right) (>= y top) (<= y bottom))
           (send w :draw-mode 'xor)
           (send w :paint-rect left top (- right left) (- bottom top))
           (cond ((send self :while-mouse-button-down)
                  (send w :paint-rect left top (- right left) (- bottom top))
                  (setf handled 't)))
           (send w :draw-mode 'normal)
           (cond (handled
                 (send self :edit-current-exp nil (list fullexp))))))
    handled))

(defproto stat-calc-binary-button '() () stat-calc-p-button "Stat Calc Sub View")

(defmeth stat-calc-binary-button :edit-current-exp (plus-exp sub-exp)
  (let* ((expr (send (send self :p) :expression))
         (etop (+ (send expr :top) 1))
         (ebottom (- (send expr :bottom) 1))
         (eright (- (send expr :right) 1))
         (eleft (+ (send expr :left) 1))
         (curexp (send expr :cur-exp))
         (fullexp (send expr :full-exp))
         (top (send fullexp :top))
         (left (send fullexp :left))
         (w (send expr :window))
         (height (+ (send w :text-ascent) (send w :text-descent)))
         (width (send fullexp :return-width))
         (i 0))
   (cond ((not plus-exp) 
          (setf plus-exp (send stat-calc-binary-text :new w (send fullexp :left) (send fullexp :top) (send fullexp :right) (send fullexp :bottom)))
          (send plus-exp :text (send self :text))
          (send plus-exp :exp expr)
          (setf num1 (send stat-calc-number-text :new w (send fullexp :left) (send fullexp :top) 0 (send fullexp :bottom)))
          (setf num2 (send stat-calc-number-text :new w (send fullexp :left) (send fullexp :top) 0 (send fullexp :bottom)))
          (send num1 :text "?")
          (send num1 :exp expr)
          (send num2 :text "?")
          (send num2 :exp expr)
          (send plus-exp :sub-views (list num1 num2))
          (send plus-exp :hilite-sub-views 1)))
   (dolist (view sub-exp 't)
           (cond ((eq curexp view)
                  (send w :erase-rect left top width height) 
                  (setf (select sub-exp i) plus-exp)
                  (cond ((eq view fullexp) 
                         (send expr :full-exp plus-exp)
                         (setf (select (send expr :sub-views) 1) plus-exp)))
                  (send expr :cur-exp plus-exp)
                  (send w :erase-rect eleft etop (- eright eleft) (- ebottom etop))
                  (send expr :draw)))
           (cond ((not (eq curexp view))
                  (send self :edit-current-exp plus-exp (send view :sub-views))))
           (setf i (+ i 1)))))

(defproto stat-calc-plus-button '() () stat-calc-binary-button "Stat Calc Sub View")

(defmeth stat-calc-plus-button :isnew (title p window bitmap left top right bottom)
  (send self :text "+")
  (call-next-method title p window bitmap left top right bottom))

(defproto stat-calc-minus-button '() () stat-calc-binary-button "Stat Calc Sub View")

(defmeth stat-calc-minus-button :isnew (title p window bitmap left top right bottom)
  (send self :text "-")
  (call-next-method title p window bitmap left top right bottom))


(defproto stat-calc-multiply-button '() () stat-calc-binary-button "Stat Calc Sub View")

(defmeth stat-calc-multiply-button :isnew (title p window bitmap left top right bottom)
  (send self :text "*")
  (call-next-method title p window bitmap left top right bottom))


(defproto stat-calc-divide-button '() () stat-calc-binary-button "Stat Calc Sub View")

(defmeth stat-calc-divide-button :isnew (title p window bitmap left top right bottom)
  (send self :text "/")
  (call-next-method title p window bitmap left top right bottom))





(defproto stat-calc-unary-button '() () stat-calc-p-button "Stat Calc Sub View")

(defmeth stat-calc-unary-button :edit-current-exp (plus-exp sub-exp)
  (let* ((expr (send (send self :p) :expression))
         (etop (+ (send expr :top) 1))
         (ebottom (- (send expr :bottom) 1))
         (eright (- (send expr :right) 1))
         (eleft (+ (send expr :left) 1))
         (curexp (send expr :cur-exp))
         (fullexp (send expr :full-exp))
         (top (send fullexp :top))
         (left (send fullexp :left))
         (w (send expr :window))
         (height (+ (send w :text-ascent) (send w :text-descent)))
         (width (send fullexp :return-width))
         (i 0))
   (cond ((not plus-exp) 
          (setf plus-exp (send stat-calc-unary-text :new w (send fullexp :left) (send fullexp :top) (send fullexp :right) (send fullexp :bottom)))
          (send plus-exp :text (send self :text))
          (send plus-exp :exp expr)
          (setf num1 (send stat-calc-number-text :new w (send fullexp :left) (send fullexp :top) 0 (send fullexp :bottom)))
          (send num1 :text "?")
          (send num1 :exp expr)
          (send plus-exp :sub-views (list num1))
          (send plus-exp :hilite-sub-views 1)))
   (dolist (view sub-exp 't)
           (cond ((eq curexp view)
                  (send w :erase-rect left top width height) 
                  (setf (select sub-exp i) plus-exp)
                  (cond ((eq view fullexp) 
                         (send expr :full-exp plus-exp)
                         (setf (select (send expr :sub-views) 1) plus-exp)))
                  (send expr :cur-exp plus-exp)
                  (send w :erase-rect eleft etop (- eright eleft) (- ebottom etop))
                  (send expr :draw)))
           (cond ((not (eq curexp view))
                  (send self :edit-current-exp plus-exp (send view :sub-views))))
           (setf i (+ i 1)))))

(defproto stat-calc-ln-button '() () stat-calc-unary-button "Stat Calc Sub View")

(defmeth stat-calc-ln-button :isnew (title p window bitmap left top right bottom)
  (send self :text "ln")
  (call-next-method title p window bitmap left top right bottom))

(defproto stat-calc-dist-button '() () stat-calc-p-button "Stat Calc Sub View")

(defmeth stat-calc-dist-button :edit-current-exp (plus-exp sub-exp)
  (let* ((expr (send (send self :p) :expression))
         (etop (+ (send expr :top) 1))
         (ebottom (- (send expr :bottom) 1))
         (eright (- (send expr :right) 1))
         (eleft (+ (send expr :left) 1))
         (curexp (send expr :cur-exp))
         (fullexp (send expr :full-exp))
         (top (send fullexp :top))
         (left (send fullexp :left))
         (w (send expr :window))
         (height (+ (send w :text-ascent) (send w :text-descent)))
         (width (send fullexp :return-width))
         (i 0))
   (cond ((not plus-exp) 
          (setf plus-exp (send stat-calc-dist-text :new w (send fullexp :left) (send fullexp :top) (send fullexp :right) (send fullexp :bottom)))
          (send plus-exp :text (send self :text))
          (send plus-exp :exp expr)
          (setf num1 (send stat-calc-number-text :new w (send fullexp :left) (send fullexp :top) 0 (send fullexp :bottom)))
          (setf num2 (send stat-calc-number-text :new w (send fullexp :left) (send fullexp :top) 0 (send fullexp :bottom)))
          (send num1 :text "?")
          (send num1 :exp expr)
          (send num2 :text "?")
          (send num2 :exp expr)
          (send plus-exp :sub-views (list num1 num2))
          (send plus-exp :hilite-sub-views 1)))
   (dolist (view sub-exp 't)
           (cond ((eq curexp view)
                  (send w :erase-rect left top width height) 
                  (setf (select sub-exp i) plus-exp)
                  (cond ((eq view fullexp) 
                         (send expr :full-exp plus-exp)
                         (setf (select (send expr :sub-views) 1) plus-exp)))
                  (send expr :cur-exp plus-exp)
                  (send w :erase-rect eleft etop (- eright eleft) (- ebottom etop))
                  (send expr :draw)))
           (cond ((not (eq curexp view))
                  (send self :edit-current-exp plus-exp (send view :sub-views))))
           (setf i (+ i 1)))))

(defproto stat-calc-norm-button '() () stat-calc-dist-button "Stat Calc Sub View")

(defmeth stat-calc-norm-button :isnew (title p window bitmap left top right bottom)
  (send self :text "Normal")
  (call-next-method title p window bitmap left top right bottom))

