;;;;
;;;; DotPlot Overlay Prototypes
;;;;

(defproto f-test-overlay-proto '() nil summary-overlay-proto)

(defmeth f-test-overlay-proto :redraw ()
  (call-next-method)
  (let* ((plot (send self :graph))
         (height (- (send plot :canvas-height)
                    (+ (slot-value 'offset) *descent*)))
         (line-height *line-height*))
    (send plot :draw-string (format nil "Effect-test:")
          (+ line-height 5) (+ height line-height))
    (when (send self :visible)
          (let* ((dataset (send plot :dataset))
                 (test (send dataset :compute-test nil))
                 (z-vars (send dataset :z-variables))
                 (indent (round (* 8.5 line-height)))
                 (levels (slot-value 'levels)))
            (when z-vars
                  (let ((z-test (send dataset :compute-test z-vars)))
                    (if (= (third test) 1)
                        (send plot :draw-string
                              (format nil "~v,vg" 12 5 (sqrt (first z-test)))
                              indent (+ height (* 2 line-height)))
                        (send plot :draw-string
                              (format nil "~v,vg" 12 5 (first z-test))
                              indent (+ height (* 2 line-height))))
                    (send plot :draw-string
                          (format nil "(~v,vg)" 10 4 (second z-test))
                          (+ indent (round (* 4.5 line-height)))
                          (+ height (* 2 line-height)))
                    (send plot :draw-string
                          (format nil "  ~d" (fourth z-test))
                          indent (+ height (* 3 line-height)))
                    (send plot :draw-string (format nil "for ~a" levels)
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))
                    (setf indent (+ indent (round (* 9.5 line-height))))
                    (send plot :draw-string (format nil "Overall")
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))))
            (if (= (third test) 1)
                (progn
                 (send plot :draw-string (format nil "|Calc-t| (P-value):")
                       (* 2 line-height) (+ height (* 2 line-height)))
                 (send plot :draw-string
                       (format nil "~v,vg" 12 5 (sqrt (first test)))
                       indent (+ height (* 2 line-height))))
                (progn
                 (send plot :draw-string (format nil "Calc-F (P-value):")
                       (* 2 line-height) (+ height (* 2 line-height)))
                 (send plot :draw-string
                       (format nil "~v,vg" 12 5 (first test))
                       indent (+ height (* 2 line-height)))))
            (send plot :draw-string (format nil "(~v,vg)" 10 4 (second test))
                  (+ indent (round (* 4.5 line-height)))
                  (+ height (* 2 line-height)))
            (send plot :draw-string (format nil "Error-df:")
                  (* 2 line-height) (+ height (* 3 line-height)))
            (send plot :draw-string (format nil "  ~d" (fourth test))
                  indent (+ height (* 3 line-height)))))))

(defproto means-overlay-proto '() nil summary-overlay-proto)

(defmeth means-overlay-proto :redraw ()
  (call-next-method)
  (let* ((plot (send self :graph))
         (height (- (send plot :canvas-height)
                    (+ (slot-value 'offset) *descent*)))
         (line-height *line-height*))
    (if (not (send self :visible))
        (send plot :draw-string (format nil "Means:")
              (+ line-height 5) (+ height line-height)))
    (when (send self :visible)
          (send plot :draw-string (format nil "Means (Std Errs):")
                (+ line-height 5) (+ height line-height))
          (let* ((dataset (send plot :dataset))
                 (moments (send dataset :compute-moments nil))
                 (means (second moments))
                 (std-errs (fourth moments))
                 (z-vars (send dataset :z-variables))
                 (indent (round (* 8.5 line-height)))
                 (i 0)
                 (x-levels (send dataset :x-levels))
                 (z-levels (slot-value 'levels)))
            (when z-vars
                  (let* ((z-moments (send dataset :compute-moments z-vars))
                         (z-means (second z-moments))
                         (z-std-errs (fourth z-moments)))
                    (send plot :draw-string (format nil "for ~a" z-levels)
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))
                    (dolist (level x-levels nil)
                            (send plot :draw-string (format nil "~v,vg" 10 4
                                                            (elt z-means i))
                                  indent (+ height (* (+ i 2) line-height)))
                            (send plot :draw-string (format nil "(~v,vg)" 10 4
                                                           (elt z-std-errs i))
                                  (+ indent (round (* 4.5 line-height)))
                                  (+ height (* (+ i 2) line-height)))
                            (setf i (+ i 1)))
                    (setf i 0)
                    (setf indent (+ indent (round (* 9.5 line-height))))
                    (send plot :draw-string (format nil "Overall")
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))))
            (dolist (level x-levels nil)
                    (send plot :draw-string (format nil "~a" level)
                          (* 2 line-height)
                          (+ height (* (+ i 2) line-height)))
                    (send plot :draw-string (format nil "~v,vg" 10 4
                                                    (elt means i))
                          indent (+ height (* (+ i 2) line-height)))
                    (send plot :draw-string (format nil "(~v,vg)" 10 4
                                                    (elt std-errs i))
                          (+ indent (round (* 4.5 line-height)))
                          (+ height (* (+ i 2) line-height)))
                    (setf i (+ i 1)))))))

(defproto comparisons-overlay-proto '() nil summary-overlay-proto)

(defmeth comparisons-overlay-proto :do-click (x y m1 m2)
  (let* ((plot (send self :graph))
         (dataset (send plot :dataset))
         (x-levels (send dataset :x-levels))
         (ref-level (send dataset :ref-level))
         (text-w1 (send plot :text-width "Level: "))
         (text-w2 (send plot :text-width "[ 95% ]"))
         (i 0)
         (height (- (send plot :canvas-height)
                    (+ (slot-value 'offset) *descent*)))
         (line-height *line-height*))
    (dolist (level (remove ref-level x-levels) nil)
            (if (and (< (* 2 line-height) x (* 7 line-height))
                     (< (+ height (* (+ i 3) line-height)) y
                        (+ height (* (+ i 4) line-height))))
                (send dataset :ref-level level))
            (setf i (+ i 1)))
    (if (and (< (+ (* 2 *line-height*) text-w1) x
                (+ (round (/ (* 7 *line-height*) 2)) text-w1 text-w2))
             (< (+ height *line-height* (round (/ *line-height* 4)) 2) y
                (+ height (* 2 *line-height*) 2)))
        (send (send plot :ci-menu) :popup
              (+ (* 2 *line-height*) text-w1)
              (+ height *line-height* (round (/ *line-height* 4)) 2) plot)
        (call-next-method x y m1 m2))))

(defmeth comparisons-overlay-proto :redraw ()
  (call-next-method)
  (let* ((plot (send self :graph))
         (height (- (send plot :canvas-height)
                    (+ (slot-value 'offset) *descent*)))
         (line-height *line-height*))
    (send plot :draw-string (format nil "Pairwise CIs:")
              (+ line-height 5) (+ height line-height))
    (when (send self :visible)
          (let* ((dataset (send plot :dataset))
                 (diffs (send dataset :compute-diffs nil))
                 (mean-diffs (first diffs))
                 (err-terms (second diffs))
                 (ci-level (round (* 100 (send dataset :ci-level))))
                 (z-vars (send dataset :z-variables))
                 (indent (round (* 8.5 line-height)))
                 (text-w1 (send plot :text-width "Level: "))
                 (text-w2 (send plot :text-width
                                (format nil " ~d% " ci-level)))
                 (i 0)
                 (x-levels (send dataset :x-levels))
                 (ref-level (send dataset :ref-level))
                 (z-levels (slot-value 'levels)))
            (send plot :draw-string
                  (format nil "Level:  ~d% " ci-level)
                  (* 2 line-height) (+ height (* 2 line-height)))
            (send plot :frame-rect (+ (* 2 line-height) text-w1)
                  (+ height line-height (round (/ line-height 4)) 2)
                  (+ line-height text-w2 5) (round (/ (* 3 line-height) 4)))
            (send plot :draw-line (+ (* 2 line-height) text-w1 4)
                  (+ height (* 2 line-height) 2)
                  (+ (* 3 line-height) text-w1 text-w2 4)
                  (+ height (* 2 line-height) 2))
            (send plot :draw-line
                  (+ (round (/ (* 6 line-height) 2)) text-w1 text-w2 5)
                  (+ height line-height (round (/ line-height 4)) 4)
                  (+ (round (/ (* 6 line-height) 2)) text-w1 text-w2 5)
                  (+ height (* 2 line-height) 2))
            (send plot :paint-poly
                  (list
                   (list (+ (* 2 line-height) text-w2 text-w1 2)
                         (+ height line-height (round (/ line-height 4)) 4))
                   (list 12 0) (list -6 6) (list -6 -6)) nil)
            (send plot :draw-string
                  (format nil "~a vs" ref-level)
                  (* 2 line-height) (+ height (* 3 line-height)))
            (when z-vars
                  (let* ((z-diffs (send dataset :compute-diffs z-vars))
                         (z-mean-diffs (first z-diffs))
                         (z-err-terms (second z-diffs)))
                    (send plot :draw-string (format nil "for ~a" z-levels)
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))
                    (send plot :draw-string (format nil "Lower CL")
                          indent (+ height (* 3 line-height)))
                    (send plot :draw-string (format nil "Upper CL")
                          (+ indent (round (* 4.5 line-height)))
                          (+ height (* 3 line-height)))
                    (dolist (level (remove ref-level x-levels) nil)
                            (if (> (abs (elt z-mean-diffs i))
                                   (elt z-err-terms i))
                                (send plot :draw-color 'red))
                            (send plot :draw-string
                                  (format nil "~v,vg" 10 4
                                         (elt (- z-mean-diffs z-err-terms) i))
                                  indent (+ height (* (+ i 4) line-height)))
                            (send plot :draw-string
                                  (format nil "~v,vg" 10 4
                                         (elt (+ z-mean-diffs z-err-terms) i))
                                  (+ indent (round (* 4.5 line-height)))
                                  (+ height (* (+ i 4) line-height)))
                            (send plot :draw-color 'black)
                            (setf i (+ i 1)))
                    (setf i 0)
                    (setf indent (+ indent (round (* 9.5 line-height))))
                    (send plot :draw-string (format nil "Overall")
                          (+ indent (round (* .25 line-height)))
                          (+ height line-height))))
            (dolist (level (remove ref-level x-levels) nil)
                    (send plot :draw-string (format nil "~a" level)
                          (* 2 line-height)
                          (+ height (* (+ i 4) line-height)))
                    (send plot :draw-string (format nil "Lower CL")
                          indent (+ height (* 3 line-height)))
                    (send plot :draw-string (format nil "Upper CL")
                          (+ indent (round (* 4.5 line-height)))
                          (+ height (* 3 line-height)))
                    (if (> (abs (elt mean-diffs i)) (elt err-terms i))
                        (send plot :draw-color 'red))
                    (send plot :draw-string
                          (format nil "~v,vg" 10 4
                                  (elt (- mean-diffs err-terms) i))
                          indent (+ height (* (+ i 4) line-height)))
                    (send plot :draw-string
                          (format nil "~v,vg" 10 4
                                  (elt (+ mean-diffs err-terms) i))
                          (+ indent (round (* 4.5 line-height)))
                          (+ height (* (+ i 4) line-height)))
                    (send plot :draw-color 'black)
                    (setf i (+ i 1)))))))