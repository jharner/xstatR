(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLISP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-GLOBAL-MACROS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-GLOBAL-MACROS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-GLOBAL-MACROS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-MACROS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-MACROS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-SPECIALS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-SPECIALS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((FTYPE IGNORABLE IGNORE INLINE NOTINLINE) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((ENCLOSE PARSE-MACRO) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPLIT-DECLARATIONS #K(#(80 2 4 0 1 2 3 11 0 1 6 0 5 7 0 5 8 0 6 9 16 9 10 21 1 2 3 10 71 2 3 9 10 40 10 2 9 1 4 0 5 9 21 0 5 6 9 16 6 10 20 10 8 8 1 22 0 6 10 16 10 11 23 4 11 1 11 21 0 7 8 11 17 10 11 43 11 10 1 9 0 5 10 21 0 10 11 10 16 6 7 1 22 0 8 10 16 10 11 21 1 12 21 10 17 11 12 16 12 13 21 1 13 20 12 0 13 14 21 1 14 15 14 16 13 15 40 15 3 14 1 16 0 5 14 21 0 17 19 14 17 13 15 16 15 16 21 1 18 19 15 23 5 0 2 4 16 17 15 15 16 15 16 21 1 18 19 15 17 12 12 16 12 13 21 1 13 20 12 17 10 10 16 10 11 21 1 12 21 10 23 6 12 1 8 25 7 0 3 12 6 7 17 6 6 1 1) #(0 17 28 39 42 47 56 72 80 83 88 93 104 115 123 132 135 140 151 168 179 190 202) #(DECLARE SPECIAL "special declaration for ~s ignored." NIL STRINGP WARN NREVERSE LIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-MACRO-LAMBDA-EXPRESSION #K(#(80 4 15 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 0 2 19 0 18 20 0 18 21 23 15 19 1 19 23 16 22 1 19 17 22 23 21 0 1 2 23 17 22 24 23 17 24 2 17 24 19 22 24 0 23 18 19 3 17 16 19 23 19 22 2 15 19 21 0 3 4 22 23 20 23 2 15 19 71 2 2 23 21 23 21 23 2 15 19 23 21 19 2 21 23 16 19 22 50 0 5 6 22 5 71 2 2 19 20 71 2 0 19 19 1 7 23 22 20 1 4 20 20 19 22 20 21 22 19 23 23 20 1 3 16 20 21 23 17 22 1 14 23 17 23 1 1 71 2 2 20 24 23 24 22 3 22 23 24 23 17 22 1 22 23 24 21 2 21 22 71 3 4 20 22 71 2 2 19 23 16 19 24 0 18 25 71 2 0 19 26 0 24 27 21 0 9 8 27 23 22 24 1 8 23 17 28 1 7 23 17 29 1 6 23 17 30 1 24 23 24 29 2 29 30 23 17 29 1 29 23 24 28 2 28 29 23 17 28 1 28 23 24 25 1 28 23 17 27 1 13 23 17 28 1 23 23 17 29 1 24 23 24 28 2 28 29 23 17 28 1 28 0 25 29 51 13 30 0 23 25 30 2 30 19 21 1 10 11 30 23 17 31 1 9 23 17 32 1 26 23 17 33 1 10 23 17 34 1 23 23 24 33 2 33 34 23 17 33 1 33 23 24 30 4 31 32 33 21 1 12 23 17 31 1 12 23 17 32 1 11 23 17 33 1 13 23 17 34 1 26 23 24 33 3 33 34 21 23 17 33 1 33 23 24 32 2 32 33 23 17 32 1 32 23 17 33 1 10 23 17 34 1 23 23 24 33 2 33 34 23 17 33 1 33 23 24 30 3 31 32 33 23 17 30 1 30 23 24 23 4 27 28 29 30 13 0 2 23 22 80 2 0 1 38 26 2 23 20 2 2 1 2 21 0 14 15 2 11 0 2 43 1 0 57 0) #(0 46 59 77 100 109 121 126 204 251 295 336 407 425 443 446) #("WHOLE" &WHOLE IGNORE DECLARE "ENV" DESTRUCTURING-BIND REST FUNCTION APPLY LAMBDA BLOCK &ENVIRONMENT &BODY &REST NIL COPY-LIST LAST LIST NSUBST FIND MEMBER REMOVE GENSYM SPLIT-DECLARATIONS APPEND FIND-IF LAMBDA-LIST-KEYWORDS) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ENCLOSE #K(#(77 1 2 1 1 1 0 0 25 2 0 4 1 3 3 2) #(0) #(NIL #(NIL) EVALHOOK) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PARSE-MACRO #K(#(77 1 4 1 0 0 1 23 1 5 3 1 2 3 25 2 0 2 5 4) #(0) #(#(NIL) MAKE-MACRO-LAMBDA-EXPRESSION ENCLOSE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(DEFINE-COMPILER-MACRO EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 10 3 4 5 6 7 8 9 10 11 12 9 23 13 13 1 12 23 13 14 1 11 23 13 15 1 1 23 14 14 2 14 15 23 13 14 1 14 23 13 15 1 10 23 13 16 1 2 23 14 15 2 15 16 23 13 15 1 15 23 13 16 1 9 23 13 17 1 8 23 13 18 1 11 23 13 19 1 7 23 14 17 3 17 18 19 23 13 17 1 17 23 14 16 2 16 17 23 13 16 1 16 23 14 14 3 14 15 16 23 13 14 1 14 23 13 15 1 6 23 13 16 1 9 23 13 17 1 5 23 13 18 1 9 23 13 19 1 10 23 14 17 3 17 18 19 23 13 17 1 17 23 13 18 1 4 23 13 19 1 3 23 13 20 1 11 23 13 21 1 10 23 14 19 3 19 20 21 23 13 19 1 19 23 13 20 1 7 23 14 18 3 18 19 20 23 13 18 1 18 23 14 15 4 15 16 17 18 23 13 15 1 15 23 13 16 1 11 25 14 0 4 13 14 15 16 80 3 0 2 17 1 3 51 1 4 0 25 15 0 2 4 3) #(0 20 248) #(SET-CMP-MACRO COERCE-TO-MACRO INSTALL-FUNCTION CONS PUSH RPLACD IF *CMP-GLOBAL-MACROS* ASSOC ENTRY FUN SYM LET* LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 5 3 1 4 5 6 7 23 7 9 3 1 2 3 23 8 10 1 8 23 8 11 1 7 23 8 12 1 6 23 8 13 1 1 23 9 12 2 12 13 23 8 12 1 12 23 8 13 1 5 23 8 14 1 4 23 8 15 1 9 23 9 14 2 14 15 23 8 14 1 14 23 9 13 2 13 14 23 8 13 1 13 23 9 11 3 11 12 13 23 8 11 1 11 23 8 12 1 6 23 8 13 1 1 23 9 12 2 12 13 23 8 12 1 12 25 9 0 3 10 11 12 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 146) #(DEFINE-COMPILER-MACRO COERCE-TO-MACRO INSTALL-FUNCTION FUNCTION QUOTE SET-CMP-MACRO PROGN MAKE-MACRO-LAMBDA-EXPRESSION LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 6 3 1 4 5 6 7 8 23 8 10 3 1 2 3 23 9 11 1 9 23 9 12 1 8 23 9 13 1 7 23 9 14 1 1 23 10 13 2 13 14 23 9 13 1 13 23 9 14 1 7 23 9 15 1 6 23 10 14 2 14 15 23 9 14 1 14 23 9 15 1 5 23 9 16 1 4 23 9 17 1 10 23 10 16 2 16 17 23 9 16 1 16 23 10 15 2 15 16 23 9 15 1 15 23 10 12 4 12 13 14 15 23 9 12 1 12 23 9 13 1 7 23 9 14 1 1 23 10 13 2 13 14 23 9 13 1 13 25 10 0 3 11 12 13 80 3 0 2 17 1 3 51 1 4 0 25 11 0 2 4 3) #(0 20 169) #(DEFINE-SPECIAL-FORM-MACRO COERCE-TO-MACRO INSTALL-FUNCTION FUNCTION MACRO QUOTE %SET-GET PROGN MAKE-MACRO-LAMBDA-EXPRESSION LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((AUGMENT-ENVIRONMENT VARIABLE-INFORMATION FUNCTION-INFORMATION) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPECIAL-VARIABLE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 11 0 4 23 3 4 1 3 21 0 3 4 4 38 1 4 25 4 0 2 1 4 11 0 2) #(0 16 19 29 38) #(NIL *CMP-SPECIALS* SPECIALP BOUNDP MEMBER) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(AUGMENT-ENVIRONMENT #K(#(77 3 2 0 0 0 5 4 4 0 1 2 3 10 0 1 11 39 6 12 23 7 12 2 12 3 23 8 12 2 2 12 21 0 1 2 12 23 9 0 1 7 39 6 12 23 7 12 2 12 5 23 8 12 2 4 12 21 0 3 4 12 23 9 0 1 8 0 2 12 16 12 13 21 1 5 8 12 23 10 14 1 13 21 0 6 7 14 23 9 0 2 9 13 17 12 12 16 12 13 21 1 5 8 12 0 3 14 16 14 15 21 1 9 12 14 16 15 16 23 10 17 1 16 21 0 10 11 17 23 9 0 2 9 16 17 14 14 16 14 15 21 1 9 12 14 39 11 16 23 7 16 2 16 2 27 19 11 2 16 11 0 10 16 0 3 17 16 17 18 21 1 13 14 17 38 12 19 71 2 2 18 20 20 19 20 19 20 19 16 16 16 18 19 38 12 20 20 19 20 19 20 19 16 16 17 17 17 16 17 18 21 1 13 14 17 27 19 11 2 16 11 39 11 19 23 7 19 2 19 4 27 16 11 2 19 11 51 15 19 0 23 7 19 2 19 5 27 16 11 2 19 11 11 0 11 80 2 0 2 16 1 2 71 2 2 1 3 23 13 3 1 3 20 2 3 0 57 0 80 3 0 2 21 0 17 18 1 16 2 3 17 2 4 20 1 4 4 20 3 4 0 57 0 11 0 2 80 3 0 2 21 0 20 21 1 16 2 3 20 1 3 3 17 2 4 20 3 4 0 57 0 11 0 2) #(0 37 42 62 67 78 88 94 105 116 129 135 146 175 216 256 279 288 304 307 316 332) #("adding some symbols as variables and as symbol macros" "adding some symbols as functions and macros" "cant't make lexical binding for the special variable ~s" NIL (NIL NIL NIL NIL NIL) (:VARIABLE :SYMBOL-MACRO :FUNCTION :MACRO :DECLARE) FIRST MAPCAR INTERSECTION ERROR SPECIAL-VARIABLE-P LIST :SYMBOL-MACRO COERCE-TO-MACRO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-ENVIRONMENT-ENTRY #K(#(80 3 2 0 1 7 0 2 5 16 5 6 21 1 1 9 5 38 2 7 39 3 8 23 4 7 4 1 6 7 8 21 0 2 8 7 71 2 1 7 8 38 5 9 50 0 3 4 8 9 71 2 2 7 10 16 10 10 38 5 11 40 10 11 8 1 5 0 4 8 21 0 6 7 8 38 5 8 71 2 2 7 9 13 0 4 3 8 9 6 71 2 1 7 7 13 0 4 3 7 4 6 17 5 5 16 5 6 21 1 1 9 5 11 0 4) #(0 17 36 50 67 70 75 90 102 113) #(T NIL :KEY CAR MEMBER :SYMBOL-MACRO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GLOBAL-SYMBOL-MACRO #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 2 1 4 23 3 4 1 1 21 0 3 4 4 13 0 2 3 3 38 4 4 23 5 5 1 1 23 6 4 2 4 5 21 0 5 6 4 71 2 2 4 4 13 0 2 4 2 13 0 2 3 3) #(0 16 21 26 31 50 60) #(T NIL BOUNDP SPECIAL-VARIABLE-P :SYMBOL-MACRO SYMBOL-PLIST MEMBER) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VARIABLE-INFORMATION #K(#(77 1 2 1 3 3 0 1 2 5 16 2 6 23 4 0 2 1 6 59 3 6 7 8 21 0 1 9 6 21 0 2 5 6 38 5 9 50 0 3 4 7 9 16 8 9 38 5 10 40 9 10 6 1 6 0 4 6 1 6 0 4 6 21 0 7 8 6 38 5 6 13 0 3 6 3 4 38 6 6 13 0 3 6 3 4 23 7 6 1 1 21 0 10 11 6 38 8 6 13 0 3 6 4 4 23 9 6 1 1 21 0 12 13 6 38 10 6 13 0 3 6 4 4 23 11 0 1 1 73 5 6 21 0 14 15 6 38 5 6 13 0 3 6 4 4 13 0 3 4 4 4) #(0 29 34 43 55 60 63 68 77 86 96 105 115 124 137 146) #(T NIL 1 #(NIL) GET-ENVIRONMENT-ENTRY :SYMBOL-MACRO :LEXICAL CONSTANTP :CONSTANT SPECIAL-VARIABLE-P :SPECIAL GLOBAL-SYMBOL-MACRO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FUNCTION-INFORMATION #K(#(77 1 2 1 4 4 0 1 2 3 6 17 2 7 23 5 0 2 1 7 59 4 7 8 9 10 21 0 1 2 7 27 30 11 1 8 1 3 0 6 11 21 0 4 12 11 38 6 11 38 7 12 40 10 12 12 21 0 8 5 12 23 8 12 1 3 21 0 6 7 12 38 0 12 40 10 12 12 1 8 0 6 12 21 0 9 10 12 0 6 12 1 11 0 4 12 13 0 3 11 12 6 21 0 13 14 7 38 9 7 13 0 3 7 4 6 23 10 7 1 1 21 0 15 16 7 23 11 8 1 1 27 30 7 1 8 1 17 0 6 7 21 0 18 19 7 38 6 7 13 0 3 7 6 6 23 10 7 1 1 21 0 20 21 7 23 11 8 1 1 23 12 7 2 8 5 1 22 0 6 7 21 0 23 24 7 38 13 7 13 0 3 7 6 6 23 10 7 1 1 21 0 25 26 7 23 11 8 1 1 23 14 7 1 8 1 27 0 6 7 21 0 28 29 7 38 9 7 13 0 3 7 6 6 13 0 3 6 6 6 80 2 4 15 1 3 16 1 23 12 6 2 1 5 21 0 32 31 6 23 12 6 2 1 2 21 0 33 36 6 23 14 6 1 1 21 0 34 35 6 11 0 4 11 0 3 11 0 4) #(0 31 38 41 46 61 71 80 83 88 93 96 102 107 116 126 138 141 146 155 165 178 181 186 195 205 217 220 225 234 240 259 265 270 280 283 286) #(*CMP-MACROS* T FSUBR NIL #(NIL) GET-ENVIRONMENT-ENTRY :MACRO *CMP-GLOBAL-MACROS* BOUNDP :FUNCTION FBOUNDP SYMBOL-FUNCTION TYPEP :SPECIAL-FORM FUNCTIONP CLOSURE BYTE-CODE-CLOSURE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((MACROEXPAND MACROEXPAND-1) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MACROEXPAND-SYMBOL-1 #K(#(77 1 2 1 3 3 0 1 2 5 23 4 6 1 1 21 0 2 1 6 23 5 0 2 3 1 16 2 6 23 6 0 2 1 6 59 3 6 7 8 21 0 3 6 6 38 7 9 50 0 4 5 7 9 16 8 9 38 7 10 40 9 10 9 1 7 0 5 9 1 7 0 5 9 21 0 8 11 9 17 8 6 21 1 9 10 6 23 8 6 1 6 13 0 2 6 4 23 9 0 1 1 59 2 6 7 21 0 12 15 7 21 1 13 14 6 23 8 6 1 6 13 0 2 6 4 13 0 2 1 5) #(0 20 26 45 54 66 71 74 79 87 92 97 111 116 121 126) #("not a symbol - ~s" T NIL #(NIL) SYMBOLP ERROR GET-ENVIRONMENT-ENTRY :SYMBOL-MACRO COPY-TREE GLOBAL-SYMBOL-MACRO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 39 3 3 25 4 0 2 2 3) #(0 16 19) #(NIL BASE-MACROEXPAND-1 FBOUNDP MACROEXPAND-1 %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MACROEXPAND-1 #K(#(77 1 2 1 0 0 1 23 1 3 1 1 21 0 1 2 3 25 2 0 2 1 2 25 3 0 2 1 2) #(0 17 23) #(#(NIL) SYMBOLP MACROEXPAND-SYMBOL-1 BASE-MACROEXPAND-1) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MACROEXPAND #K(#(77 1 2 1 2 2 0 1 5 23 3 0 2 1 2 59 2 5 6 0 5 7 21 0 1 4 6 23 3 0 2 7 2 59 2 8 9 21 0 2 3 9 0 8 7 1 1 13 0 2 8 3 13 0 2 7 4) #(0 27 42 47 52) #(T NIL #(NIL) MACROEXPAND-1) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(DEFINE-SYMBOL-MACRO EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 14 3 4 5 6 7 8 9 10 11 12 13 14 15 16 8 23 17 17 1 16 23 17 18 1 15 23 17 19 1 14 23 17 20 1 13 23 18 18 3 18 19 20 23 17 18 1 18 23 17 19 1 12 23 17 20 1 11 23 17 21 1 10 23 17 22 1 9 23 17 23 1 1 23 18 22 2 22 23 23 17 22 1 22 23 18 21 2 21 22 23 17 21 1 21 23 17 22 1 8 23 17 23 1 9 23 17 24 1 1 23 18 23 2 23 24 23 17 23 1 23 23 18 22 2 22 23 23 17 22 1 22 23 18 20 3 20 21 22 23 17 20 1 20 23 17 21 1 7 23 17 22 1 6 23 17 23 1 9 23 17 24 1 1 23 18 23 2 23 24 23 17 23 1 23 23 18 21 3 21 22 23 23 17 21 1 21 23 18 19 3 19 20 21 23 17 19 1 19 23 17 20 1 5 23 17 21 1 4 23 17 22 1 9 23 17 23 1 1 23 18 22 2 22 23 23 17 22 1 22 23 17 23 1 3 23 18 21 3 21 22 23 23 17 21 1 21 23 17 22 1 9 23 17 23 1 2 23 18 22 2 22 23 23 17 22 1 22 23 18 20 3 20 21 22 23 17 20 1 20 23 17 21 1 9 23 17 22 1 1 23 18 21 2 21 22 23 17 21 1 21 25 18 0 5 17 18 19 20 21 80 3 0 2 17 1 3 51 1 4 0 25 19 0 2 4 3) #(0 20 332) #(DEFINE-SYMBOL-MACRO COERCE-TO-MACRO INSTALL-FUNCTION :SYMBOL-MACRO GET SETF "can't assign symbol macro to ~s" ERROR BOUNDP QUOTE SPECIAL-VARIABLE-P OR WHEN :EXECUTE :LOAD-TOPLEVEL :COMPILE-TOPLEVEL EVAL-WHEN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((GET-SETF-METHOD SETF) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CMP-SETF-INFO #K(#(77 1 2 1 2 2 0 1 1 23 3 5 1 4 21 0 1 2 5 38 1 5 25 4 0 2 1 5 11 0 3) #(0 19 28) #(NIL *CMP-SETF* #(NIL) BOUNDP ASSOC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CMP-SETF-METHOD #K(#(77 1 2 1 2 2 0 1 2 23 3 5 2 1 2 21 0 1 2 5 71 2 2 5 6 40 6 3 6 1 3 0 4 6 21 0 4 5 6 71 3 4 5 0 57 0 11 0 4) #(0 20 31 34 39 46) #(*SETF* NIL #(NIL) GET-CMP-SETF-INFO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CMP-SETF-LAMBDA #K(#(77 1 2 1 2 2 0 1 2 23 3 5 2 1 2 21 0 1 2 5 71 2 2 5 6 40 6 3 6 1 3 0 4 6 21 0 4 5 6 71 3 4 5 0 57 0 11 0 4) #(0 20 31 34 39 46) #(*SETF-LAMBDA* NIL #(NIL) GET-CMP-SETF-INFO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-XLISP-SETF-METHOD #K(#(77 1 2 1 1 1 0 0 46 1 3 0 57 0) #(0) #(*SETF* #(NIL)) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-XLISP-SETF-LAMBDA #K(#(77 1 2 1 1 1 0 0 46 1 3 0 57 0) #(0) #(*SETF-LAMBDA* #(NIL)) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-SETF-METHOD #K(#(77 1 2 1 11 11 0 1 2 3 4 5 6 7 8 9 10 17 0 1 14 0 14 15 21 1 2 31 15 16 14 16 23 12 0 2 16 2 73 10 17 21 0 3 4 17 0 11 17 1 5 0 3 17 23 13 18 2 16 2 23 14 19 2 16 2 23 15 20 2 16 2 23 16 21 2 16 2 21 0 9 6 18 21 0 9 7 19 21 0 9 8 20 21 0 9 25 21 21 0 10 25 17 17 14 22 51 36 23 0 23 17 23 2 23 22 23 18 24 1 8 23 19 24 1 24 23 19 25 1 16 23 20 25 2 25 23 21 0 11 12 18 23 19 26 1 18 23 20 26 3 26 23 24 1 24 21 0 13 14 19 23 20 26 2 23 24 23 6 26 2 19 26 1 24 21 0 15 16 20 23 21 26 1 20 1 17 0 11 26 21 0 18 19 26 23 19 26 1 20 23 20 26 3 26 23 24 1 24 21 0 20 21 20 23 19 26 1 7 23 19 27 1 6 23 19 28 1 5 23 19 29 1 16 23 20 28 2 28 29 23 19 28 1 28 23 19 29 1 5 23 19 30 1 4 23 20 29 2 29 30 23 19 29 1 29 23 20 27 3 27 28 29 23 19 27 1 27 23 20 26 4 26 27 23 24 1 24 21 0 22 23 21 23 20 26 2 23 24 23 6 26 2 21 26 1 24 0 11 26 13 0 5 23 22 24 26 25 50 0 26 28 16 9 21 0 27 28 17 25 22 0 2 14 2 23 23 0 2 14 2 59 2 16 17 21 0 30 29 17 23 24 0 2 13 14 0 16 14 1 1 23 21 16 1 14 21 0 32 35 16 23 23 0 2 14 2 59 2 16 17 21 0 33 34 17 0 16 14 1 1 23 25 18 1 14 23 18 18 1 18 23 19 19 1 18 23 20 19 1 19 23 19 20 1 12 23 19 21 1 16 23 19 22 1 18 23 20 20 3 20 21 22 13 0 5 11 11 19 20 16 23 24 0 2 13 14 1 1 80 2 1 26 0 25 18 0 1 2) #(0 21 29 46 51 54 83 88 93 98 103 142 156 161 175 180 187 190 195 209 214 288 293 307 310 318 324 329 335 350 356 361 371 386 391 441 449) #(T *SETF* QUOTE GET FUNCALL "V" APPLY 1 NIL SETQ "bad place form - ~s" #(NIL) FUNCTION-INFORMATION GET-CMP-SETF-METHOD GET-CMP-SETF-LAMBDA GET-XLISP-SETF-METHOD GET-XLISP-SETF-LAMBDA MAPCAR GENSYM LIST APPEND SYMBOLP GET-APPLY-SETF-METHOD MACROEXPAND-1 ERROR STRING "T") 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-APPLY-SETF-METHOD #K(#(77 1 2 1 6 6 0 1 2 3 4 5 15 71 2 2 1 9 21 1 1 4 9 16 9 10 50 0 2 4 10 6 71 2 2 9 10 23 7 10 1 10 21 0 3 4 10 71 2 0 9 10 21 0 4 5 10 23 8 0 2 8 1 71 2 2 1 9 71 2 2 9 9 23 1 9 1 9 71 2 0 1 10 23 2 9 2 9 10 23 9 0 1 9 59 5 9 10 11 12 13 23 10 14 1 9 23 10 15 1 12 50 2 6 7 14 15 23 1 14 1 7 23 1 15 1 6 16 12 16 23 1 16 1 16 23 2 15 2 15 16 23 1 15 1 15 17 12 16 23 2 14 3 14 15 16 23 1 15 1 7 23 1 16 1 6 16 13 17 23 1 17 1 17 23 2 16 2 16 17 23 1 16 1 16 17 13 17 23 2 15 3 15 16 17 13 0 5 9 10 11 14 15 23 10 14 1 9 23 11 15 1 12 23 10 15 1 15 50 2 8 9 14 15 23 10 14 1 12 16 14 14 23 11 15 1 12 23 10 16 1 15 16 16 16 23 1 17 1 7 23 1 18 1 6 16 12 19 23 1 19 1 19 23 2 18 2 18 19 23 1 18 1 18 17 15 19 23 11 19 1 19 23 1 20 1 5 23 1 21 1 16 23 1 22 1 4 23 1 23 1 14 23 2 22 2 22 23 23 1 22 1 22 23 2 20 3 20 21 22 23 1 20 1 20 23 2 14 4 17 18 19 20 23 1 15 1 7 23 1 16 1 6 16 13 17 23 1 17 1 17 23 2 16 2 16 17 23 1 16 1 16 17 13 17 23 2 15 3 15 16 17 13 0 5 9 10 11 14 15 25 8 0 2 8 1) #(0 23 32 47 57 63 117 203 224 380) #(NIL LIST APPEND FUNCTION APPLY "bad place form - ~s" #(NIL) SYMBOLP ERROR GET-SETF-METHOD LAST BUTLAST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*SIMPLIFY-SETF* EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*SIMPLIFY-SETF* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *SIMPLIFY-SETF* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*SIMPLIFY-SETF*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-SETF-FORM #K(#(77 1 3 1 1 1 0 9 23 2 0 2 1 3 59 4 5 6 7 8 23 3 9 2 5 7 23 4 10 1 2 23 3 10 2 6 10 38 5 11 21 0 1 2 11 39 6 11 23 7 9 3 11 9 10 25 8 0 2 9 8 23 4 11 1 4 39 4 12 23 7 12 3 12 9 10 23 4 12 1 12 23 4 13 1 8 25 3 0 3 11 12 13) #(0 45 61) #(LET* #(NIL) GET-SETF-METHOD APPEND LIST *SIMPLIFY-SETF* CONS MAPCAR SUBLIS) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 9 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 3 3 4 5 4 0 2 6 0 5 7 21 0 3 6 6 17 6 8 21 1 5 4 8 23 6 0 1 3 16 6 8 71 2 2 6 9 23 7 8 3 8 9 1 20 8 7 7 71 2 0 6 6 1 2 17 7 8 21 1 7 8 8 23 8 8 1 4 23 9 9 1 7 25 10 0 2 8 9 16 7 0 57 0 80 3 0 2 17 1 3 51 1 4 1 2 25 11 0 2 4 3) #(0 20 35 40 48 53 79 87 103 108) #(SETF COERCE-TO-MACRO INSTALL-FUNCTION "setf requires an even number of arguments" PROGN NIL ERROR MAKE-SETF-FORM LIST NREVERSE APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((INCF DECF PUSH POP PUSHNEW REMF ROTATEF) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NON-MACRO-VARIABLE-SYMBOL-P #K(#(80 3 2 0 1 2 23 2 5 1 1 21 0 1 4 5 38 3 5 23 4 6 2 1 2 50 0 2 3 5 6 11 0 4 11 0 3 11 0 4) #(0 16 31 34 37) #(T NIL SYMBOLP :SYMBOL-MACRO VARIABLE-INFORMATION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 77 1 3 1 6 3 3 4 5 10 23 7 7 2 2 1 21 0 2 3 7 23 8 7 1 4 23 8 8 1 2 23 8 9 1 6 23 8 10 1 2 23 8 11 1 3 23 9 9 3 9 10 11 23 8 9 1 9 25 9 0 3 7 8 9 23 10 0 2 2 1 59 5 7 8 9 10 11 23 9 12 2 7 9 23 8 13 1 6 23 8 14 1 11 23 8 15 1 3 23 9 13 3 13 14 15 23 8 13 1 13 23 9 13 2 8 13 23 8 14 1 5 39 8 15 23 11 15 3 15 12 13 23 8 15 1 15 23 8 16 1 10 25 9 0 3 14 15 16 80 3 0 2 17 1 3 51 1 4 1 2 25 12 0 2 4 3) #(0 20 41 85 169) #(INCF COERCE-TO-MACRO INSTALL-FUNCTION SETF LET* + #(1) NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 77 1 3 1 6 3 3 4 5 10 23 7 7 2 2 1 21 0 2 3 7 23 8 7 1 4 23 8 8 1 2 23 8 9 1 6 23 8 10 1 2 23 8 11 1 3 23 9 9 3 9 10 11 23 8 9 1 9 25 9 0 3 7 8 9 23 10 0 2 2 1 59 5 7 8 9 10 11 23 9 12 2 7 9 23 8 13 1 6 23 8 14 1 11 23 8 15 1 3 23 9 13 3 13 14 15 23 8 13 1 13 23 9 13 2 8 13 23 8 14 1 5 39 8 15 23 11 15 3 15 12 13 23 8 15 1 15 23 8 16 1 10 25 9 0 3 14 15 16 80 3 0 2 17 1 3 51 1 4 1 2 25 12 0 2 4 3) #(0 20 41 85 169) #(DECF COERCE-TO-MACRO INSTALL-FUNCTION SETF LET* - #(1) NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 80 4 3 3 4 5 10 23 6 7 2 3 1 21 0 2 3 7 23 7 7 1 4 23 7 8 1 3 23 7 9 1 6 23 7 10 1 2 23 7 11 1 3 23 8 9 3 9 10 11 23 7 9 1 9 25 8 0 3 7 8 9 23 9 0 2 3 1 59 5 7 8 9 10 11 23 8 12 2 7 9 23 7 13 1 6 23 7 14 1 2 23 7 15 1 11 23 8 13 3 13 14 15 23 7 13 1 13 23 8 13 2 8 13 23 7 14 1 5 39 7 15 23 10 15 3 15 12 13 23 7 15 1 15 23 7 16 1 10 25 8 0 3 14 15 16 80 3 0 2 17 1 3 51 1 4 1 2 25 11 0 2 4 3) #(0 20 38 82 166) #(PUSH COERCE-TO-MACRO INSTALL-FUNCTION SETQ LET* CONS NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 5 3 4 5 6 7 12 23 8 8 2 2 1 21 0 2 3 8 23 9 8 1 5 23 9 9 1 4 23 9 10 1 2 23 10 9 2 9 10 23 9 9 1 9 23 9 10 1 3 23 9 11 1 2 23 9 12 1 7 23 9 13 1 2 23 10 12 2 12 13 23 9 12 1 12 23 10 10 3 10 11 12 23 9 10 1 10 25 10 0 3 8 9 10 23 11 0 2 2 1 59 5 8 9 10 11 12 23 10 13 2 8 10 23 9 14 1 7 23 9 15 1 12 23 10 14 2 14 15 23 9 14 1 14 23 10 14 2 9 14 23 9 15 1 6 39 9 16 23 12 16 3 16 13 14 23 9 16 1 16 23 9 17 1 5 23 9 18 1 4 23 9 19 1 12 23 10 18 2 18 19 23 9 18 1 18 23 9 19 1 11 23 10 17 3 17 18 19 23 9 17 1 17 25 10 0 3 15 16 17 80 3 0 2 17 1 3 51 1 4 1 2 25 13 0 2 4 3) #(0 20 40 116 232) #(POP COERCE-TO-MACRO INSTALL-FUNCTION SETQ FIRST PROG1 LET* REST NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 4 0 3 3 4 5 10 23 6 8 2 3 1 21 0 2 3 8 23 7 8 1 5 23 7 9 1 3 23 7 10 1 7 23 7 11 1 2 23 7 12 1 3 23 8 10 4 10 11 12 4 23 7 10 1 10 25 8 0 3 8 9 10 23 9 0 2 3 1 59 5 8 9 10 11 12 23 8 13 2 8 10 23 7 14 1 7 23 7 15 1 2 23 7 16 1 12 23 8 14 4 14 15 16 4 23 7 14 1 14 23 8 14 2 9 14 23 7 15 1 6 39 7 16 23 10 16 3 16 13 14 23 7 16 1 16 23 7 17 1 11 25 8 0 3 15 16 17 80 3 0 2 17 1 3 51 1 4 1 2 25 11 0 2 4 3) #(0 20 40 85 170) #(PUSHNEW COERCE-TO-MACRO INSTALL-FUNCTION SETQ LET* ADJOIN NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REM-F #K(#(80 3 2 0 1 3 0 4 5 0 1 6 21 0 1 6 6 16 6 7 50 0 2 5 2 7 21 0 3 4 5 71 2 0 6 7 19 5 7 0 13 0 2 1 3 71 2 0 1 7 13 0 2 7 3 0 6 5 17 6 6 21 0 1 6 6 13 0 2 1 4) #(0 17 26 31 45 55 66) #(T NIL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 80 4 3 3 4 5 10 23 6 7 2 2 1 21 0 2 3 7 23 7 7 1 4 23 7 8 1 2 23 7 9 1 6 23 7 10 1 2 23 7 11 1 3 23 8 9 3 9 10 11 23 7 9 1 9 25 8 0 3 7 8 9 23 9 0 2 2 1 59 5 7 8 9 10 11 23 8 12 2 7 9 23 7 13 1 6 23 7 14 1 11 23 7 15 1 3 23 8 13 3 13 14 15 23 7 13 1 13 23 8 13 2 8 13 23 7 14 1 5 39 7 15 23 10 15 3 15 12 13 23 7 15 1 15 23 7 16 1 10 25 8 0 3 14 15 16 80 3 0 2 17 1 3 51 1 4 1 2 25 11 0 2 4 3) #(0 20 38 82 166) #(REMF COERCE-TO-MACRO INSTALL-FUNCTION SETQ LET* REM-F NON-MACRO-VARIABLE-SYMBOL-P LIST APPEND GET-SETF-METHOD MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 3 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 0 1 39 3 3 23 4 0 2 2 1 32 3 0 77 2 2 0 2 5 6 11 51 1 5 1 1 23 7 5 2 5 2 39 8 6 39 9 7 23 7 7 2 7 5 23 10 6 2 6 7 39 8 7 39 11 8 23 7 8 2 8 5 23 10 7 2 7 8 39 8 8 39 12 9 23 7 9 2 9 5 23 10 8 2 8 9 39 13 9 23 7 9 2 9 5 39 14 10 23 7 10 2 10 5 17 10 11 16 10 12 23 3 12 1 12 23 8 10 2 11 12 23 8 11 2 6 8 23 8 12 2 7 10 23 3 13 1 4 39 3 14 23 7 14 3 14 11 12 23 3 14 1 14 23 3 15 1 3 25 8 0 4 13 14 9 15 80 3 0 2 17 1 3 51 2 4 1 2 25 10 0 2 4 3) #(0 20 36 189) #(ROTATEF COERCE-TO-MACRO INSTALL-FUNCTION LIST GET-SETF-METHOD NIL LET* MAPCAR APPEND FIRST APPLY SECOND THIRD FOURTH FIFTH) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PSETQ PSETF) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EXPAND-PSET-FORM #K(#(80 3 3 0 1 0 9 0 2 6 0 5 7 0 5 8 0 5 9 21 0 2 3 6 23 2 10 0 20 10 7 7 16 6 10 20 10 8 8 71 2 2 6 10 20 10 9 9 71 2 0 6 6 1 1 23 3 7 1 7 23 3 8 1 8 23 3 9 1 9 39 4 10 23 5 10 3 10 7 9 51 4 11 1 1 23 5 11 3 11 8 7 23 4 12 1 4 23 4 13 1 10 23 4 14 1 3 25 6 0 4 12 13 11 14 80 4 0 3 23 4 4 1 1 23 4 5 1 2 23 4 6 1 3 25 6 0 3 4 5 6) #(0 19 24 55 115) #(NIL LET* GENSYM REVERSE LIST MAPCAR APPEND) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 1 0 1 3 0 25 4 0 2 2 1 80 3 0 2 17 1 3 51 1 4 0 25 5 0 2 4 3) #(0 20 33) #(PSETQ COERCE-TO-MACRO INSTALL-FUNCTION SETQ EXPAND-PSET-FORM APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 1 0 1 3 0 25 4 0 2 2 1 80 3 0 2 17 1 3 51 1 4 0 25 5 0 2 4 3) #(0 20 33) #(PSETF COERCE-TO-MACRO INSTALL-FUNCTION SETF EXPAND-PSET-FORM APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFUN #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 3 0 9 1 2 3 4 5 6 7 8 9 10 23 10 13 1 3 16 13 14 71 2 2 13 15 71 3 4 13 16 23 11 17 1 12 23 11 18 1 11 23 11 19 1 2 23 11 20 1 10 23 11 21 1 1 23 12 20 3 20 21 15 23 11 20 1 20 23 12 18 4 18 19 14 20 23 11 18 1 18 23 12 17 2 17 18 23 11 18 1 9 21 0 2 3 16 23 11 19 1 5 23 11 20 1 7 23 11 21 1 1 23 12 20 2 20 21 23 11 20 1 20 23 11 21 1 7 23 11 22 1 4 23 12 21 2 21 22 23 11 21 1 21 23 11 22 1 16 23 12 19 4 19 20 21 22 23 11 19 1 19 23 12 19 1 19 1 4 0 6 19 23 11 20 1 8 23 11 21 1 7 23 11 22 1 1 23 12 21 2 21 22 23 11 21 1 21 23 11 22 1 17 23 12 20 3 20 21 22 23 11 20 1 20 25 12 0 3 18 19 20) #(0 17 116 188 191) #(APPLY FUNCTION-DOCUMENTATION %SET-GET NIL QUOTE INSTALL-FUNCTION PROGN BLOCK LAMBDA FUNCTION SPLIT-DECLARATIONS LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFUN) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFMACRO #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 3 0 12 1 2 3 4 5 6 7 8 9 10 11 12 10 23 13 0 3 1 2 3 59 2 16 17 23 14 18 1 15 23 14 19 1 14 23 14 20 1 13 23 15 20 1 20 23 14 20 1 20 23 14 21 1 12 23 14 22 1 11 23 14 23 1 10 23 14 24 1 1 23 15 23 2 23 24 23 14 23 1 23 23 14 24 1 9 23 14 25 1 16 23 15 24 2 24 25 23 14 24 1 24 23 15 22 3 22 23 24 23 14 22 1 22 23 14 23 1 8 23 15 21 3 21 22 23 23 14 21 1 21 23 15 19 3 19 20 21 23 14 19 1 19 21 0 2 3 17 23 14 20 1 5 23 14 21 1 10 23 14 22 1 1 23 15 21 2 21 22 23 14 21 1 21 23 14 22 1 10 23 14 23 1 4 23 15 22 2 22 23 23 14 22 1 22 23 14 23 1 17 23 15 20 4 20 21 22 23 23 14 20 1 20 23 15 20 1 20 1 4 0 6 20 23 14 21 1 7 23 14 22 1 10 23 14 23 1 1 23 15 22 2 22 23 23 14 22 1 22 23 14 23 1 9 23 14 24 1 16 23 15 23 2 23 24 23 14 23 1 23 23 15 21 3 21 22 23 23 14 21 1 21 25 15 0 4 18 19 20 21) #(0 17 169 241 244) #(APPLY FUNCTION-DOCUMENTATION %SET-GET NIL INSTALL-FUNCTION *CMP-MACROS* COERCE-TO-MACRO QUOTE CONS PUSH :COMPILE-TOPLEVEL EVAL-WHEN PROGN MAKE-MACRO-LAMBDA-EXPRESSION LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFMACRO) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFMETH #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 4 0 7 1 2 3 4 5 6 7 11 23 8 12 1 4 16 12 13 71 2 2 12 14 71 3 4 12 15 23 9 16 1 11 23 9 17 1 10 20 9 3 18 23 9 18 1 18 23 9 19 1 8 23 9 20 1 2 23 10 19 3 19 20 14 23 9 19 1 19 23 10 17 4 17 18 13 19 23 9 17 1 17 23 10 16 2 16 17 23 9 17 1 7 23 9 18 1 6 23 9 19 1 1 23 9 20 1 5 23 9 21 1 2 23 10 20 2 20 21 23 9 20 1 20 23 9 21 1 16 23 9 22 1 15 23 10 18 5 18 19 20 21 22 23 9 18 1 18 23 9 19 1 5 23 9 20 1 2 23 10 19 2 19 20 23 9 19 1 19 25 10 0 3 17 18 19) #(0 17) #(APPLY QUOTE ADD-METHOD PROGN BLOCK SELF LAMBDA FUNCTION SPLIT-DECLARATIONS LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFMETH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFPROTO #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 1 2 4 16 16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0 15 14 23 17 22 0 23 17 23 0 23 17 24 0 23 10 25 1 21 23 10 26 1 22 23 10 27 1 4 23 18 26 2 26 27 23 10 26 1 26 23 10 27 1 23 23 10 28 1 20 23 10 29 1 19 23 10 30 1 18 23 18 29 2 29 30 23 10 29 1 29 23 10 30 1 17 23 10 31 1 16 23 10 32 1 22 23 18 31 2 31 32 23 10 31 1 31 23 10 32 1 22 23 10 33 1 15 23 10 34 1 22 23 18 33 2 33 34 23 10 33 1 33 23 18 30 4 30 31 32 33 23 10 30 1 30 23 18 28 3 28 29 30 23 10 28 1 28 23 18 27 2 27 28 23 10 27 1 27 23 10 28 1 24 23 10 29 1 5 23 18 28 2 28 29 23 10 28 1 28 23 18 26 3 26 27 28 23 10 26 1 26 23 10 27 1 14 23 10 28 1 13 23 10 29 1 3 23 18 28 2 28 29 23 10 28 1 28 23 10 29 1 12 23 10 30 1 23 23 10 31 1 11 23 10 32 1 13 23 18 29 4 29 30 31 32 23 10 29 1 29 23 18 27 3 27 28 29 23 10 27 1 27 23 10 28 1 12 23 10 29 1 23 23 10 30 1 10 23 10 31 1 9 23 10 32 1 1 23 18 31 2 31 32 23 10 31 1 31 23 10 32 1 2 23 18 28 5 28 29 30 31 32 23 10 28 1 28 23 10 29 1 17 23 10 30 1 24 23 10 31 1 12 23 10 32 1 23 23 10 33 1 8 23 10 34 1 9 23 10 35 1 7 23 18 34 2 34 35 23 10 34 1 34 23 10 35 1 24 23 18 31 5 31 32 33 34 35 23 10 31 1 31 23 18 29 3 29 30 31 23 10 29 1 29 23 10 30 1 6 23 10 31 1 9 23 10 32 1 1 23 18 31 2 31 32 23 10 31 1 31 23 10 32 1 23 23 18 30 3 30 31 32 23 10 30 1 30 23 10 31 1 9 23 10 32 1 1 23 18 31 2 31 32 23 10 31 1 31 25 18 0 7 25 26 27 28 29 30 31) #(0 17) #(APPLY SET PROTO :DOCUMENTATION QUOTE :MAKE-PROTOTYPE :ADD-SLOT SEND S DOLIST LIST LISTP IF MAKE-OBJECT FUNCTION LET* #(NIL NIL NIL NIL) GENSYM APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFPROTO) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFVAR #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 1 2 2 14 13 1 2 3 4 5 6 7 8 9 10 11 12 13 10 64 2 17 21 2 2 3 2 0 2 18 1 4 0 9 18 23 15 19 1 16 23 15 20 1 15 23 15 21 1 14 23 16 21 1 21 23 15 21 1 21 23 15 22 1 13 23 15 23 1 12 23 15 24 1 1 23 16 23 2 23 24 23 15 23 1 23 23 15 24 1 11 23 16 22 3 22 23 24 23 15 22 1 22 23 16 20 3 20 21 22 23 15 20 1 20 23 15 21 1 10 23 15 22 1 12 23 15 23 1 1 23 16 22 2 22 23 23 15 22 1 22 23 16 21 2 21 22 23 15 21 1 21 21 0 5 6 17 23 15 22 1 6 23 15 23 1 5 23 15 24 1 12 23 15 25 1 1 23 16 24 2 24 25 23 15 24 1 24 23 16 23 2 23 24 23 15 23 1 23 23 15 24 1 4 23 15 25 1 12 23 15 26 1 1 23 16 25 2 25 26 23 15 25 1 25 23 15 26 1 18 23 16 24 3 24 25 26 23 15 24 1 24 23 16 22 3 22 23 24 23 15 22 1 22 23 16 22 1 22 1 7 0 9 22 21 0 8 9 3 23 15 23 1 8 23 15 24 1 12 23 15 25 1 1 23 16 24 2 24 25 23 15 24 1 24 23 15 25 1 12 23 15 26 1 7 23 16 25 2 25 26 23 15 25 1 25 23 15 26 1 3 23 16 23 4 23 24 25 26 23 15 23 1 23 23 16 23 1 23 1 10 0 9 23 23 15 24 1 12 23 15 25 1 1 23 16 24 2 24 25 23 15 24 1 24 25 16 0 6 19 20 21 22 23 24) #(0 17 45 50 53 175 279 282 287 359 362) #(APPLY SET BOUNDP UNLESS VARIABLE-DOCUMENTATION %SET-GET NIL MARK-AS-SPECIAL *CMP-SPECIALS* QUOTE PUSHNEW :COMPILE-TOPLEVEL EVAL-WHEN PROGN #(%NOT-SUPPLIED NIL) LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFVAR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFPARAMETER #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 1 3 1 12 11 1 2 3 4 5 6 7 8 9 10 11 8 23 13 15 1 14 23 13 16 1 13 23 13 17 1 12 23 14 17 1 17 23 13 17 1 17 23 13 18 1 11 23 13 19 1 10 23 13 20 1 1 23 14 19 2 19 20 23 13 19 1 19 23 13 20 1 9 23 14 18 3 18 19 20 23 13 18 1 18 23 14 16 3 16 17 18 23 13 16 1 16 23 13 17 1 8 23 13 18 1 10 23 13 19 1 1 23 14 18 2 18 19 23 13 18 1 18 23 14 17 2 17 18 23 13 17 1 17 23 13 18 1 7 23 13 19 1 10 23 13 20 1 1 23 14 19 2 19 20 23 13 19 1 19 23 13 20 1 2 23 14 18 3 18 19 20 23 13 18 1 18 21 0 2 3 3 23 13 19 1 5 23 13 20 1 10 23 13 21 1 1 23 14 20 2 20 21 23 13 20 1 20 23 13 21 1 10 23 13 22 1 4 23 14 21 2 21 22 23 13 21 1 21 23 13 22 1 3 23 14 19 4 19 20 21 22 23 13 19 1 19 23 14 19 1 19 1 4 0 6 19 23 13 20 1 10 23 13 21 1 1 23 14 20 2 20 21 23 13 20 1 20 25 14 0 6 15 16 17 18 19 20) #(0 17 200 272 275) #(APPLY VARIABLE-DOCUMENTATION %SET-GET NIL SET MARK-AS-SPECIAL *CMP-SPECIALS* QUOTE PUSHNEW :COMPILE-TOPLEVEL EVAL-WHEN PROGN #(NIL) LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFPARAMETER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DEFCONSTANT #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 1 3 1 11 10 1 2 3 4 5 6 7 8 9 10 7 23 12 14 1 13 23 12 15 1 12 23 12 16 1 11 23 12 17 1 10 23 13 15 3 15 16 17 23 12 15 1 15 23 12 16 1 9 23 12 17 1 8 23 12 18 1 1 23 13 17 2 17 18 23 12 17 1 17 23 12 18 1 7 23 12 19 1 2 23 13 16 4 16 17 18 19 23 12 16 1 16 21 0 2 3 3 23 12 17 1 5 23 12 18 1 8 23 12 19 1 1 23 13 18 2 18 19 23 12 18 1 18 23 12 19 1 8 23 12 20 1 4 23 13 19 2 19 20 23 12 19 1 19 23 12 20 1 3 23 13 17 4 17 18 19 20 23 12 17 1 17 23 13 17 1 17 1 4 0 6 17 23 12 18 1 8 23 12 19 1 1 23 13 18 2 18 19 23 12 18 1 18 25 13 0 5 14 15 16 17 18) #(0 17 120 192 195) #(APPLY VARIABLE-DOCUMENTATION %SET-GET NIL T QUOTE MARK-AS-SPECIAL :EXECUTE :LOAD-TOPLEVEL :COMPILE-TOPLEVEL EVAL-WHEN #(NIL) LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DEFCONSTANT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-PROGN-FORM #K(#(80 2 2 0 1 1 21 1 1 4 1 17 1 4 21 1 2 3 4 23 2 4 1 2 25 3 0 2 4 1 16 1 0 57 0 11 0 3) #(0 11 19 30 35) #(PROGN NIL LIST APPEND) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-TAGBODY-BODY #K(#(80 2 2 0 1 1 39 2 4 23 3 4 2 4 1 21 0 1 2 4 23 4 4 1 2 23 5 4 2 4 1 23 4 4 1 4 25 5 0 1 4 23 4 4 1 3 25 5 0 2 1 4) #(0 20 41) #(TAGBODY NIL CONSP FIND-IF-NOT LIST APPEND) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO AND #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 0 0 29 2 0 1 1 80 2 2 1 2 5 21 0 3 6 1 16 1 4 17 1 5 21 0 4 5 5 23 3 6 1 2 23 3 7 1 4 27 2 8 1 5 23 3 8 1 8 25 4 0 3 6 7 8 11 0 4 11 0 3) #(0 17 28 39 50 77 80) #(APPLY IF T LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(AND) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO OR #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 0 0 29 2 0 1 1 80 2 3 1 2 3 9 21 0 3 6 1 16 1 5 17 1 6 21 0 4 5 6 23 4 7 0 23 5 8 1 3 23 5 9 1 7 23 5 10 1 5 23 6 9 2 9 10 23 5 9 1 9 23 6 9 1 9 23 5 9 1 9 23 5 10 1 2 23 5 11 1 7 23 5 12 1 7 27 2 13 1 6 23 5 13 1 13 23 6 10 4 10 11 12 13 23 5 10 1 10 25 6 0 3 8 9 10 11 0 5 11 0 4) #(0 17 28 40 51 136 139) #(APPLY IF LET NIL GENSYM LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(OR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO UNLESS #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 2 0 2 1 2 4 23 3 5 1 4 23 3 6 1 1 23 3 7 1 3 23 4 8 1 2 23 3 8 1 8 25 5 0 4 5 6 7 8) #(0 17) #(APPLY NIL IF LIST MAKE-PROGN-FORM APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(UNLESS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO WHEN #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 2 0 1 1 3 23 2 4 1 3 23 2 5 1 1 23 3 6 1 2 23 2 6 1 6 25 4 0 3 4 5 6) #(0 17) #(APPLY IF LIST MAKE-PROGN-FORM APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(WHEN) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO COND #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 0 0 29 2 0 1 1 80 2 5 1 2 3 4 5 10 21 0 3 10 1 16 1 7 17 1 8 16 7 9 17 7 10 50 0 4 7 9 5 21 0 5 6 10 25 6 0 1 10 11 0 5 21 0 8 9 10 23 7 11 1 2 23 7 12 1 9 23 6 13 1 10 23 7 13 1 13 27 2 14 1 8 23 7 14 1 14 25 8 0 4 11 12 13 14 23 9 10 1 4 23 7 11 1 3 23 7 12 1 10 23 7 13 1 9 23 8 12 2 12 13 23 7 12 1 12 23 8 12 1 12 23 7 12 1 12 23 7 13 1 2 23 7 14 1 10 23 7 15 1 10 27 2 16 1 8 23 7 16 1 16 23 8 13 4 13 14 15 16 23 7 13 1 13 25 8 0 3 11 12 13 11 0 6) #(0 17 28 42 60 65 70 73 78 116 202) #(APPLY IF LET "T" T NIL MAKE-PROGN-FORM LIST APPEND GENSYM) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(COND) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO RETURN #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 1 1 1 3 2 1 2 3 23 4 4 1 3 23 4 5 1 2 23 4 6 1 1 25 5 0 3 4 5 6) #(0 17) #(APPLY NIL RETURN-FROM #(NIL) LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(RETURN) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO PROG #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 2 0 3 1 2 3 7 23 4 6 1 2 23 5 7 1 5 23 5 8 1 4 23 5 9 1 3 23 5 10 1 1 16 6 11 71 2 2 6 12 23 6 12 1 12 23 7 9 4 9 10 11 12 23 5 9 1 9 25 7 0 3 7 8 9) #(0 17) #(APPLY LET NIL BLOCK SPLIT-DECLARATIONS LIST MAKE-TAGBODY-BODY APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(PROG) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO PROG* #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 2 0 3 1 2 3 7 23 4 6 1 2 23 5 7 1 5 23 5 8 1 4 23 5 9 1 3 23 5 10 1 1 16 6 11 71 2 2 6 12 23 6 12 1 12 23 7 9 4 9 10 11 12 23 5 9 1 9 25 7 0 3 7 8 9) #(0 17) #(APPLY LET* NIL BLOCK SPLIT-DECLARATIONS LIST MAKE-TAGBODY-BODY APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(PROG*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO PROG1 #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 2 0 1 1 4 23 2 4 0 23 3 5 1 3 23 3 6 1 4 23 3 7 1 1 23 4 6 2 6 7 23 3 6 1 6 23 4 6 1 6 23 3 6 1 6 23 3 7 1 4 25 4 0 4 5 6 2 7) #(0 17) #(APPLY LET GENSYM LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(PROG1) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO PROG2 #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 3 0 2 1 2 6 23 3 6 0 23 4 7 1 5 23 4 8 1 1 23 4 9 1 4 23 4 10 1 6 23 4 11 1 2 23 5 10 2 10 11 23 4 10 1 10 23 5 10 1 10 23 4 10 1 10 23 4 11 1 6 23 5 9 4 9 10 3 11 23 4 9 1 9 25 5 0 3 7 8 9) #(0 17) #(APPLY LET PROGN GENSYM LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(PROG2) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO LOOP #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 6 1 2 3 4 5 6 8 23 7 8 1 7 23 8 9 1 6 23 8 10 1 5 23 8 11 1 4 23 8 12 1 8 23 8 13 1 3 23 9 13 2 13 1 23 8 13 1 13 23 8 14 1 2 23 8 15 1 8 23 9 14 2 14 15 23 8 14 1 14 23 9 11 4 11 12 13 14 23 8 11 1 11 25 9 0 3 9 10 11) #(0 17) #(APPLY GO PROGN TAGBODY NIL BLOCK "LOOP" GENSYM LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(LOOP) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-LOOP-BINDING-VARIABLES #K(#(80 2 0 1 51 1 2 0 25 0 0 2 2 1 80 2 0 0 21 1 2 3 1 16 1 0 57 0 11 0 1) #(0 14 23 28) #(MAPCAR) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-LOOP-BINDING-VALUES #K(#(80 2 0 1 51 1 2 0 25 0 0 2 2 1 80 2 1 1 0 21 1 2 3 1 71 2 2 1 0 57 0 11 0 2) #(0 14 24 31) #(MAPCAR NIL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-LOOP-BINDING-STEPS #K(#(80 2 0 1 51 1 2 0 25 0 0 2 2 1 80 2 1 1 0 21 1 2 3 1 71 2 0 1 0 57 0 11 0 2) #(0 14 24 31) #(MAPCAR NIL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-DO-STEP-PAIRS #K(#(80 3 1 0 2 39 1 4 51 1 5 0 23 2 5 3 5 1 2 23 3 5 2 3 5 25 4 0 2 4 5 80 3 1 0 0 21 0 2 3 2 20 1 2 0 57 0 11 0 3) #(0 31 41 47) #(NIL APPEND MAPCAR DELETE APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-DO-LOOP #K(#(80 6 9 0 1 2 3 4 5 6 7 8 23 23 9 15 1 3 23 10 16 1 3 23 11 17 1 3 23 12 17 2 15 17 16 4 18 17 4 19 23 13 20 1 5 23 14 21 1 14 23 14 22 1 13 23 15 23 1 12 23 15 24 1 11 23 15 25 1 1 39 15 26 23 16 26 3 26 15 16 23 15 26 1 26 16 20 27 23 15 28 1 10 23 15 29 1 9 23 15 30 1 18 23 15 31 1 8 23 15 32 1 22 23 17 31 2 31 32 23 15 31 1 31 23 17 29 3 29 30 31 23 15 29 1 29 23 15 30 1 21 71 2 2 20 31 23 15 32 1 2 23 17 32 2 32 17 23 15 32 1 32 23 15 33 1 7 23 15 34 1 18 23 15 35 1 8 23 15 36 1 21 23 17 35 2 35 36 23 15 35 1 35 23 17 33 3 33 34 35 23 15 33 1 33 23 15 34 1 22 23 15 35 1 6 23 15 36 1 11 23 18 37 1 19 23 15 37 1 37 23 17 35 3 35 36 37 23 15 35 1 35 23 17 28 8 28 29 30 31 32 33 34 35 23 15 28 1 28 23 17 25 4 25 26 27 28 23 15 25 1 25 25 17 0 3 23 24 25) #(0) #(RETURN-FROM UNLESS GO WHEN TAGBODY NIL BLOCK "RETURN" "LOOP" DO-LOOP-BINDING-VARIABLES DO-LOOP-BINDING-VALUES DO-LOOP-BINDING-STEPS MAKE-DO-STEP-PAIRS SPLIT-DECLARATIONS GENSYM LIST MAPCAR APPEND MAKE-PROGN-FORM) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DO #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 3 0 2 1 2 0 25 3 0 5 5 4 1 2 3) #(0 17) #(APPLY PSETQ LET MAKE-DO-LOOP) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DO) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DO* #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 3 0 2 1 2 0 25 3 0 5 5 4 1 2 3) #(0 17) #(APPLY SETQ LET* MAKE-DO-LOOP) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DO*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DOTIMES #K(#(80 3 0 3 17 1 3 16 3 4 51 2 5 1 3 25 0 0 2 5 4 77 2 4 0 6 1 2 3 4 5 6 7 23 7 11 1 10 23 8 12 1 9 23 8 13 1 3 23 8 14 1 8 23 8 15 1 7 23 8 16 1 3 23 9 15 2 15 16 23 8 15 1 15 23 9 13 3 13 14 15 23 8 13 1 13 23 8 14 1 11 23 8 15 1 2 23 9 14 2 14 15 23 8 14 1 14 23 9 13 2 13 14 23 8 13 1 13 23 8 14 1 6 23 8 15 1 5 23 8 16 1 3 23 8 17 1 11 23 9 15 3 15 16 17 23 8 15 1 15 23 9 14 2 14 15 23 8 14 1 14 23 8 15 1 1 23 9 14 2 14 15 23 8 14 1 14 25 9 0 4 12 13 14 4 77 1 4 1 10 0 2 17 1 5 51 1 6 3 4 3 2 25 0 0 2 6 5) #(0 21 185) #(APPLY < NOT 1+ 0 DO "N" GENSYM LIST APPEND #(NIL)) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DOTIMES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO DOLIST #K(#(80 3 0 3 17 1 3 16 3 4 51 2 5 1 3 25 0 0 2 5 4 77 2 4 0 6 1 2 3 4 5 6 7 23 7 11 1 10 23 8 12 1 9 23 8 13 1 11 23 8 14 1 3 23 8 15 1 8 23 8 16 1 11 23 9 15 2 15 16 23 8 15 1 15 23 9 13 3 13 14 15 23 8 13 1 13 23 8 14 1 2 23 8 15 1 7 23 8 16 1 11 23 9 15 2 15 16 23 8 15 1 15 23 8 16 1 7 23 8 17 1 11 23 9 16 2 16 17 23 8 16 1 16 23 9 14 3 14 15 16 23 8 14 1 14 23 9 13 2 13 14 23 8 13 1 13 23 8 14 1 6 23 8 15 1 5 23 8 16 1 11 23 9 15 2 15 16 23 8 15 1 15 23 9 14 2 14 15 23 8 14 1 14 23 8 15 1 1 23 9 14 2 14 15 23 8 14 1 14 25 9 0 4 12 13 14 4 77 1 4 1 10 0 2 17 1 5 51 1 6 3 4 2 3 25 0 0 2 6 5) #(0 21 217) #(APPLY CONSP NOT CAR CDR DO* "LIST" GENSYM LIST APPEND #(NIL)) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DOLIST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO IN-PACKAGE #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 80 2 13 1 2 3 4 5 6 7 8 9 10 11 12 13 10 23 14 15 1 14 23 14 16 1 13 23 14 17 1 12 23 14 18 1 11 23 15 16 3 16 17 18 23 14 16 1 16 23 14 17 1 10 23 14 18 1 9 23 14 19 1 8 23 14 20 1 7 23 14 21 1 1 23 15 20 2 20 21 23 14 20 1 20 23 15 19 2 19 20 23 14 19 1 19 23 15 18 2 18 19 23 14 18 1 18 23 15 18 1 18 23 14 18 1 18 23 14 19 1 6 23 14 20 1 9 23 14 21 1 5 23 14 22 1 4 23 14 23 1 7 23 14 24 1 1 23 15 23 2 23 24 23 14 23 1 23 23 15 21 3 21 22 23 23 14 21 1 21 23 15 19 3 19 20 21 23 14 19 1 19 23 14 20 1 3 23 14 21 1 2 23 14 22 1 9 23 15 20 3 20 21 22 23 14 20 1 20 23 15 17 4 17 18 19 20 23 14 17 1 17 25 15 0 3 15 16 17) #(0 17) #(APPLY *PACKAGE* SETF "can't find package ~s" ERROR UNLESS QUOTE FIND-PACKAGE NEWPACK LET :EXECUTE :LOAD-TOPLEVEL :COMPILE-TOPLEVEL EVAL-WHEN LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(IN-PACKAGE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO TIME #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 80 2 13 1 2 3 4 5 6 7 8 9 10 11 12 13 15 23 14 15 1 14 23 14 16 1 13 23 15 17 1 12 23 15 18 1 15 23 15 19 1 11 23 16 19 1 19 23 15 19 1 19 23 16 18 2 18 19 23 15 18 1 18 23 15 19 1 16 23 15 20 1 10 23 16 20 1 20 23 15 20 1 20 23 16 19 2 19 20 23 15 19 1 19 23 16 18 2 18 19 23 15 18 1 18 23 15 19 1 9 23 15 20 1 1 23 15 21 1 8 23 15 22 1 7 23 15 23 1 6 23 15 24 1 5 23 15 25 1 4 23 15 26 1 3 23 15 27 1 11 23 16 27 1 27 23 15 27 1 27 23 15 28 1 15 23 16 26 3 26 27 28 23 15 26 1 26 23 15 27 1 2 23 16 25 3 25 26 27 23 15 25 1 25 23 16 24 2 24 25 23 15 24 1 24 23 15 25 1 5 23 15 26 1 4 23 15 27 1 3 23 15 28 1 10 23 16 28 1 28 23 15 28 1 28 23 15 29 1 16 23 16 27 3 27 28 29 23 15 27 1 27 23 15 28 1 2 23 16 26 3 26 27 28 23 15 26 1 26 23 16 25 2 25 26 23 15 25 1 25 23 16 21 5 21 22 23 24 25 23 15 21 1 21 23 16 19 3 19 20 21 23 15 19 1 19 25 16 0 3 17 18 19) #(0 17) #(APPLY INTERNAL-TIME-UNITS-PER-SECOND - / FLOAT "The evaluation took ~,2f seconds; ~,2f seconds in GC.~%" T FORMAT MULTIPLE-VALUE-PROG1 GET-INTERNAL-GC-TIME GET-INTERNAL-RUN-TIME LET "GC" "RUN" GENSYM LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(TIME) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO TRACE #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 9 1 2 3 4 5 6 7 8 9 7 23 10 11 1 10 23 10 12 1 9 23 10 13 1 8 23 10 14 1 1 23 11 13 2 13 14 23 10 13 1 13 23 10 14 1 7 23 11 12 3 12 13 14 23 10 12 1 12 23 10 13 1 6 23 10 14 1 5 23 10 15 1 9 23 11 14 2 14 15 23 10 14 1 14 23 10 15 1 4 23 10 16 1 3 23 10 17 1 9 23 11 15 3 15 16 17 23 10 15 1 15 23 11 13 3 13 14 15 23 10 13 1 13 23 10 14 1 2 23 10 15 1 9 23 10 16 1 7 23 11 14 3 14 15 16 23 10 14 1 14 25 11 0 4 11 12 13 14) #(0 17) #(APPLY PUSHNEW "not a symbol - ~s" ERROR SYMBOLP UNLESS *TRACELIST* QUOTE S DOLIST LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(TRACE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 23 4 4 1 4 25 5 0 3 2 1 4) #(0) #(MACRO UNTRACE #K(#(80 3 0 2 17 1 3 51 1 4 0 25 0 0 2 4 3 77 2 1 0 11 1 2 3 4 5 6 7 8 9 10 11 8 21 0 2 3 1 23 12 13 1 9 23 12 14 1 8 23 12 15 1 7 23 12 16 1 1 23 13 15 2 15 16 23 12 15 1 15 23 12 16 1 11 23 13 14 3 14 15 16 23 12 14 1 14 23 12 15 1 6 23 12 16 1 5 23 12 17 1 8 23 13 16 2 16 17 23 12 16 1 16 23 12 17 1 4 23 12 18 1 3 23 12 19 1 8 23 13 17 3 17 18 19 23 12 17 1 17 23 13 15 3 15 16 17 23 12 15 1 15 23 12 16 1 12 23 12 17 1 11 23 12 18 1 2 23 12 19 1 8 23 12 20 1 11 23 13 18 3 18 19 20 23 12 18 1 18 23 13 16 3 16 17 18 23 12 16 1 16 25 13 0 4 13 14 15 16 23 12 13 1 12 23 12 14 1 11 23 12 15 1 10 25 13 0 3 13 14 15) #(0 17 39 209) #(APPLY DELETE "not a symbol - ~s" ERROR SYMBOLP UNLESS QUOTE S DOLIST NIL *TRACELIST* SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE COERCE-TO-MACRO %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(UNTRACE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #("SYSTEM" WITHOUT-INTERRUPTS EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 1 0 5 3 4 5 6 7 6 23 8 7 1 6 23 8 8 1 5 23 8 9 1 4 23 9 8 2 8 9 23 8 8 1 8 23 8 9 1 3 23 8 10 1 6 23 9 10 2 10 1 23 8 10 1 10 23 8 11 1 5 23 8 12 1 2 23 9 11 2 11 12 23 8 11 1 11 23 9 9 3 9 10 11 23 8 9 1 9 25 9 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 118) #(WITHOUT-INTERRUPTS COERCE-TO-MACRO INSTALL-FUNCTION T UNWIND-PROTECT NIL ENABLE-INTERRUPTS PROGN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("common" PROVIDE) 0 NIL)
