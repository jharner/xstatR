(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("regress" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("stats" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graphics" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("help" REQUIRE) 0 NIL)
#K(#(80 1 5 0 1 2 3 4 4 38 5 6 39 6 7 23 7 8 1 6 21 0 1 2 8 0 6 8 1 3 23 8 8 1 6 23 9 6 2 7 8 0 5 7 16 7 8 21 1 4 5 7 38 10 9 23 11 0 3 6 9 8 17 7 7 16 7 8 21 1 4 5 7 38 12 9 23 11 0 4 6 9 4 3 38 13 9 23 11 0 4 6 9 2 1 23 14 0 2 4 6 11 0 4) #(0 25 30 35 52 73) #("Normal Linear Regression Model" PROTO (X Y INTERCEPT SWEEP-MATRIX BASIS WEIGHTS INCLUDED TOTAL-SUM-OF-SQUARES RESIDUAL-SUM-OF-SQUARES PREDICTOR-NAMES RESPONSE-NAME CASE-LABELS) REGRESSION-MODEL-PROTO NIL *OBJECT* MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE :DOCUMENTATION SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (x y &key (intercept T) (print T) weights 
          included predictor-names response-name case-labels)
X           - list of independent variables or X matrix
Y           - dependent variable.
INTERCEPT   - T to include (default), NIL for no intercept
PRINT       - if not NIL print summary information
WEIGHTS     - if supplied should be the same length as Y; error variances are
               assumed to be inversely proportional to WEIGHTS
PREDICTOR-NAMES
RESPONSE-NAME
CASE-LABELS - sequences of strings or symbols.
INCLUDED    - if supplied should be the same length as Y, with elements nil
              to skip a in computing estimates (but not in residual analysis). 
Returns a regression model object. To examine the model further assign the
result to a variable and send it messages.
Example (data are in file absorbtion.lsp in the sample data directory/folder):
  (def m (regression-model (list iron aluminum) absorbtion))
  (send m :help)
  (send m :plot-residuals)" FUNCTION-DOCUMENTATION REGRESSION-MODEL %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REGRESSION-MODEL #K(#(77 3 3 0 0 0 3 2 2 0 1 6 21 2 1 2 6 0 6 12 1 3 23 4 12 1 2 23 5 12 2 10 12 23 6 13 1 1 21 0 4 5 13 0 1 13 1 13 23 7 14 1 1 21 0 6 7 14 23 8 13 1 1 1 13 21 1 8 9 1 16 1 14 23 9 14 1 14 1 10 0 11 14 21 0 11 12 14 23 8 13 1 1 1 13 0 1 13 38 10 14 38 11 15 23 12 14 2 14 15 38 13 15 23 6 16 1 13 21 0 14 15 16 0 13 16 1 16 39 14 17 23 15 16 2 17 13 23 12 0 3 14 15 16 38 16 15 23 12 0 3 14 15 2 38 17 15 23 12 0 3 14 15 3 38 18 15 23 12 0 3 14 15 5 38 19 15 23 12 0 3 14 15 12 38 20 15 23 12 0 3 14 15 7 38 21 15 23 12 0 3 14 15 8 38 22 15 23 12 0 3 14 15 9 21 0 17 18 4 38 23 15 23 12 0 2 14 15 11 0 14) #(0 17 22 33 43 48 58 65 70 80 83 88 95 98 123 128 137 219 228) #(T NIL (T T NIL %NOT-SUPPLIED NIL NIL NIL) (:INTERCEPT :PRINT :WEIGHTS :INCLUDED :PREDICTOR-NAMES :RESPONSE-NAME :CASE-LABELS) LENGTH REPEAT MATRIXP VECTORP LIST NUMBERP REGRESSION-MODEL-PROTO :NEW SEND :X BIND-COLUMNS APPLY :Y :INTERCEPT :WEIGHTS :INCLUDED :PREDICTOR-NAMES :RESPONSE-NAME :CASE-LABELS :DISPLAY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 2 1 0 1 38 1 3 25 2 0 3 1 3 2) #(0) #(T :NEEDS-COMPUTING SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns an expression that will reconstruct the regression model." :SAVE #K(#(80 2 8 0 1 2 3 4 5 6 7 16 23 8 10 1 9 23 8 11 1 8 38 9 12 23 10 12 2 1 12 23 8 12 1 12 23 11 11 2 11 12 23 8 11 1 11 23 8 12 1 8 38 12 13 23 10 13 2 1 13 23 8 13 1 13 23 11 12 2 12 13 23 8 12 1 12 23 8 13 1 7 23 8 14 1 8 38 5 15 23 10 15 2 1 15 23 8 15 1 15 23 11 14 2 14 15 23 8 14 1 14 23 8 15 1 6 23 8 16 1 8 38 4 17 23 10 17 2 1 17 23 8 17 1 17 23 11 16 2 16 17 23 8 16 1 16 23 8 17 1 5 23 8 18 1 8 38 3 19 23 10 19 2 1 19 23 8 19 1 19 23 11 18 2 18 19 23 8 18 1 18 23 8 19 1 4 23 8 20 1 8 38 2 21 23 10 21 2 1 21 23 8 21 1 21 23 11 20 2 20 21 23 8 20 1 20 23 8 21 1 3 23 8 22 1 8 38 1 23 23 10 23 2 1 23 23 8 23 1 23 23 11 22 2 22 23 23 8 22 1 22 23 8 23 1 2 23 8 24 1 8 38 0 25 23 10 25 2 1 25 23 8 25 1 25 23 11 24 2 24 25 23 8 24 1 24 25 11 0 15 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24) #(0) #(:CASE-LABELS :RESPONSE-NAME :PREDICTOR-NAMES :INCLUDED :WEIGHTS :INTERCEPT QUOTE REGRESSION-MODEL LIST :X SEND APPEND :Y) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SAVE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*REGRESSION-TOLERANCE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(1.0E-9 *REGRESSION-TOLERANCE* SET) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Tolerance for including regression column" VARIABLE-DOCUMENTATION *REGRESSION-TOLERANCE* %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*REGRESSION-TOLERANCE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Recomputes the estimates. For internal use by other messages" :COMPUTE #K(#(80 2 14 0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 38 14 16 23 15 16 2 1 16 38 16 17 23 15 17 2 1 17 23 17 17 2 17 15 38 18 18 23 15 18 2 1 18 23 17 18 2 18 14 38 19 19 23 15 19 2 1 19 38 20 20 23 15 20 2 1 20 21 0 2 1 20 0 12 20 23 21 20 3 16 20 13 23 17 20 2 20 14 23 22 21 2 17 13 23 22 22 2 17 12 2 43 22 12 23 2 43 22 11 24 23 23 25 2 24 24 38 24 26 23 25 25 3 25 26 10 38 24 26 23 25 26 3 22 26 10 23 26 0 7 21 22 17 18 20 25 26 68 25 23 23 26 38 27 27 23 28 28 1 25 17 28 28 23 29 28 1 28 2 47 28 21 28 2 42 27 28 27 34 9 28 21 0 4 3 19 23 30 0 5 24 24 25 13 2 23 31 29 2 12 22 51 7 30 3 28 25 24 23 32 0 3 30 29 27 23 17 29 2 25 8 63 7 29 0 63 6 26 0 68 25 23 23 29 63 5 29 0 35 28 29 21 0 6 5 29 23 33 0 1 3 35 28 16 23 34 16 1 16 2 45 16 12 16 63 4 16 0 57 0 80 6 1 7 1 23 30 7 5 3 3 2 4 5 21 0 8 9 7 35 1 7 20 4 7 7 36 1 7 0 57 0 11 0 6) #(0 80 83 194 203 254 259 278 297 310) #(0.0 "no columns could be swept" BASIS RESIDUAL-SUM-OF-SQUARES TOTAL-SUM-OF-SQUARES SWEEP-MATRIX (ARRAY T) NIL C-DOUBLE 2 1 0 (VECTOR C-DOUBLE) (ARRAY C-DOUBLE) :INCLUDED SEND :X COERCE :Y :INTERCEPT :WEIGHTS IF-ELSE ARRAY-DIMENSION LIST :ELEMENT-TYPE MAKE-ARRAY BASE-MAKE-SWEEP-MATRIX *REGRESSION-TOLERANCE* DIAGONAL BUTLAST SWEEP-IN-PLACE ISEQ MAPC ERROR NREVERSE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:COMPUTE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :NEEDS-COMPUTING #K(#(77 1 2 1 3 3 0 1 2 1 21 0 1 2 2 63 5 3 0 62 5 6 21 0 3 4 6 11 0 3 11 0 4) #(0 15 19 27 30) #(NIL T SWEEP-MATRIX #(NIL)) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NEEDS-COMPUTING) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Prints the least squares regression summary. Variables not used in the fit
are marked as aliased." :DISPLAY #K(#(80 2 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 12 38 16 18 23 17 18 2 1 18 23 18 18 2 18 17 38 19 19 23 17 19 2 1 19 38 20 20 23 17 20 2 1 20 38 21 21 23 17 21 2 1 21 0 18 22 0 19 23 38 22 24 23 17 24 2 1 24 21 0 1 2 24 23 23 0 2 14 2 1 3 23 23 0 2 14 3 38 24 24 23 17 24 2 1 24 21 0 4 5 24 16 22 25 16 23 26 23 23 0 4 14 4 25 26 17 22 22 17 23 23 23 25 24 2 20 16 0 15 25 37 60 6 10 25 24 38 26 26 23 17 26 2 1 26 23 27 26 2 25 26 21 0 7 8 26 23 28 27 2 21 25 16 22 28 16 23 29 23 23 0 5 14 5 27 28 29 17 22 22 17 23 23 1 9 23 28 27 2 21 25 23 23 0 3 14 6 27 61 112 25 25 37 60 6 10 25 24 23 23 0 2 14 13 38 29 26 23 17 26 2 1 26 23 23 0 3 14 12 26 38 30 26 23 17 26 2 1 26 23 23 0 3 14 11 26 38 31 26 23 17 26 2 1 26 23 23 0 3 14 10 26 38 31 26 23 17 26 2 1 26 38 32 27 23 17 27 2 1 27 37 35 11 12 26 27 38 32 28 23 17 28 2 1 28 23 23 0 3 14 7 28 38 33 26 23 17 26 2 1 26 23 23 0 3 14 9 26 25 23 0 2 14 13) #(0 82 90 96 110 130 145 165 194 207 217 295 311) #("~%Weighted Least Squares Estimates:~2%" "~%Least Squares Estimates:~2%" "Constant~25t~13,6g~40t(~,6g)~%" "~a~25t~13,6g~40t(~,6g)~%" "~a~25taliased~%" "Number of cases used:~25t~9d~%" NIL "Degrees of freedom:~25t~9d~%" "Number of cases:~25t~9d~%" "Sigma hat:~25t~13,6g~%" "R Squared:~25t~13,6g~%" "~%" T 0 1 LIST :COEF-ESTIMATES SEND COERCE :COEF-STANDARD-ERRORS :X :PREDICTOR-NAMES :WEIGHTS FORMAT :INTERCEPT ARRAY-DIMENSION :BASIS MEMBER SELECT :R-SQUARED :SIGMA-HAT :NUM-CASES :NUM-INCLUDED :DF) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DISPLAY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional new-x)
With no argument returns the x matrix as supplied to m. With an argument
NEW-X sets the x matrix to NEW-X and recomputes the estimates." :X #K(#(77 1 2 1 4 4 0 1 2 3 2 21 0 1 2 2 23 5 7 1 2 1 3 0 5 7 21 0 4 5 7 23 6 8 2 2 4 63 6 8 0 38 7 8 23 8 0 3 1 8 3 62 6 0 57 0) #(0 16 23 26 31 51) #(T (ARRAY C-DOUBLE) NIL X #(NIL) MATRIXP COERCE :NEEDS-COMPUTING SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:X) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional new-y)
With no argument returns the y sequence as supplied to m. With an argument
NEW-Y sets the y sequence to NEW-Y and recomputes the estimates." :Y #K(#(77 1 2 1 3 3 0 1 2 2 21 0 1 3 2 23 4 6 1 2 21 0 4 2 6 23 5 6 1 2 1 4 0 4 6 21 0 5 6 6 63 5 2 0 38 6 7 23 7 0 3 1 7 3 62 5 0 57 0) #(0 15 25 32 35 40 54) #(T NIL Y #(NIL) MATRIXP SEQUENCEP :NEEDS-COMPUTING SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:Y) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional new-intercept)
With no argument returns T if the model includes an intercept term, nil if
not. With an argument NEW-INTERCEPT the model is changed to include or
exclude an intercept, according to the value of NEW-INTERCEPT." :INTERCEPT #K(#(77 1 2 1 3 3 0 1 2 3 64 2 6 21 2 1 2 2 0 2 7 1 3 0 4 7 21 0 4 5 6 63 5 7 0 38 4 8 23 5 0 3 1 8 3 62 5 0 57 0) #(0 18 23 26 31 45) #(T NIL INTERCEPT #(%NOT-SUPPLIED) :NEEDS-COMPUTING SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:INTERCEPT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional new-w)
With no argument returns the weight sequence as supplied to m; NIL means
an unweighted model. NEW-W sets the weights sequence to NEW-W and
recomputes the estimates." :WEIGHTS #K(#(77 1 2 1 3 3 0 1 2 3 64 2 6 21 2 1 2 2 0 2 7 1 3 0 4 7 21 0 4 5 6 63 5 7 0 38 4 8 23 5 0 3 1 8 3 62 5 0 57 0) #(0 18 23 26 31 45) #(T NIL WEIGHTS #(%NOT-SUPPLIED) :NEEDS-COMPUTING SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:WEIGHTS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the total sum of squares around the mean." :TOTAL-SUM-OF-SQUARES #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 21 0 1 2 4 38 4 5 23 3 0 2 1 5 62 3 0 57 0) #(0 20 29) #(NIL TOTAL-SUM-OF-SQUARES :NEEDS-COMPUTING SEND :COMPUTE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:TOTAL-SUM-OF-SQUARES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the residual sum of squares for the model." :RESIDUAL-SUM-OF-SQUARES #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 21 0 1 2 4 38 4 5 23 3 0 2 1 5 62 3 0 57 0) #(0 20 29) #(NIL RESIDUAL-SUM-OF-SQUARES :NEEDS-COMPUTING SEND :COMPUTE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIDUAL-SUM-OF-SQUARES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the indices of the variables used in fitting the model." :BASIS #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 21 0 1 2 4 38 4 5 23 3 0 2 1 5 62 3 0 57 0) #(0 20 29) #(NIL BASIS :NEEDS-COMPUTING SEND :COMPUTE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:BASIS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the swept sweep matrix. For internal use" :SWEEP-MATRIX #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 21 0 1 2 4 38 4 5 23 3 0 2 1 5 62 3 0 57 0) #(0 20 29) #(NIL SWEEP-MATRIX :NEEDS-COMPUTING SEND :COMPUTE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SWEEP-MATRIX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional new-included)
With no argument,  NIL means a case is not used in calculating estimates, and non-nil means it is used.  NEW-INCLUDED is a sequence of length of y of nil and t to select cases.  Estimates are recomputed." :INCLUDED #K(#(77 1 2 1 3 3 0 1 2 2 21 0 1 2 2 23 4 6 1 2 38 5 7 23 6 7 2 1 7 3 61 6 7 6 1 3 0 3 6 21 0 4 5 6 23 7 7 1 2 63 5 7 0 38 8 7 23 6 0 3 1 7 4 62 5 6 21 0 6 7 6 62 5 0 57 0 38 5 6 23 6 6 2 1 6 25 9 0 2 4 6) #(0 15 36 39 44 63 71 76) #(NIL T INCLUDED #(NIL) LENGTH :NUM-CASES SEND COPY-SEQ :NEEDS-COMPUTING REPEAT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:INCLUDED) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional (names nil set))
With no argument returns the predictor names. NAMES sets the names." :PREDICTOR-NAMES #K(#(77 1 2 1 4 4 0 1 2 3 4 64 2 7 21 2 1 2 2 0 2 8 1 3 0 3 8 21 0 4 5 7 39 5 9 23 6 9 2 9 8 63 5 9 0 38 7 7 23 8 7 2 1 7 23 9 7 2 7 6 62 5 8 21 0 6 7 8 23 10 9 1 8 3 61 9 7 8 1 8 0 3 8 21 0 10 9 8 2 45 7 6 9 23 11 9 2 4 9 51 11 10 0 23 6 9 2 10 9 63 5 9 0 62 5 0 57 0 80 2 2 12 0 0 25 13 0 3 3 2 1) #(0 19 24 27 32 45 68 80 83 88 113 118) #(NIL 0 PREDICTOR-NAMES 1 #(%NOT-SUPPLIED) STRING MAPCAR :X SEND ARRAY-DIMENSION LENGTH ISEQ "Variable ~a" FORMAT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PREDICTOR-NAMES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional name)
With no argument returns the response name. NAME sets the name." :RESPONSE-NAME #K(#(77 1 2 1 3 3 0 1 2 3 64 2 6 21 2 1 2 2 0 2 7 1 3 0 3 7 21 0 4 8 6 21 0 5 6 7 23 4 8 1 7 1 7 0 3 8 63 5 8 0 62 5 0 57 0) #(0 18 23 26 31 36 43 46 50) #("Y" NIL RESPONSE-NAME #(%NOT-SUPPLIED) STRING) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESPONSE-NAME) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional labels)
With no argument returns the case-labels. LABELS sets the labels." :CASE-LABELS #K(#(77 1 2 1 4 4 0 1 2 3 4 64 2 7 21 2 1 2 2 0 2 8 1 3 0 5 8 21 0 4 8 7 21 0 5 6 8 39 5 9 23 6 9 2 9 8 1 7 38 7 9 23 8 9 2 1 9 2 45 9 4 9 23 9 9 2 3 9 51 9 10 0 23 6 9 2 10 9 63 6 9 0 62 6 0 57 0 80 2 2 10 2 0 25 11 0 3 3 2 1) #(0 19 24 27 32 37 48 78 82 87) #(0 1 NIL CASE-LABELS #(%NOT-SUPPLIED) STRING MAPCAR :NUM-CASES SEND ISEQ "~d" FORMAT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CASE-LABELS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the number of cases in the model." :NUM-CASES #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 25 2 0 1 2) #(0) #(:Y SEND LENGTH) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NUM-CASES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the number of cases used in the computations." :NUM-INCLUDED #K(#(80 2 2 0 1 1 38 2 4 23 3 4 2 1 4 23 4 4 3 4 3 2 25 5 0 1 4) #(0) #(0 1 :INCLUDED SEND IF-ELSE SUM) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NUM-INCLUDED) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the number of coefficients in the fit model (including the
intercept if the model includes one)." :NUM-COEFS #K(#(80 2 1 0 1 38 1 3 23 2 3 2 1 3 21 0 1 2 3 38 3 3 23 2 3 2 1 3 23 4 3 1 3 2 43 2 3 0 57 0 38 3 3 23 2 3 2 1 3 25 4 0 1 3) #(0 19 40) #(1 :INTERCEPT SEND :BASIS LENGTH) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NUM-COEFS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the number of degrees of freedom in the model." :DF #K(#(80 2 0 2 38 0 2 23 1 2 2 1 2 38 2 3 23 1 3 2 1 3 2 45 2 3 0 57 0) #(0) #(:NUM-INCLUDED SEND :NUM-COEFS) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the X matrix for the model, including a column of 1's, if
appropriate. Columns of X matrix correspond to entries in basis." :X-MATRIX #K(#(80 2 2 0 1 3 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 2 45 5 3 5 23 5 5 2 2 5 38 6 6 23 3 6 2 1 6 23 7 4 3 4 5 6 38 8 5 23 3 5 2 1 5 21 0 1 2 5 38 4 5 23 3 5 2 1 5 23 9 5 2 3 5 25 10 0 2 5 4 11 0 4) #(0 65 86) #(0 1 :X SEND :NUM-CASES ISEQ :BASIS SELECT :INTERCEPT REPEAT BIND-COLUMNS) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:X-MATRIX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the diagonal elements of the hat matrix." :LEVERAGES #K(#(80 2 1 0 3 38 1 3 23 2 3 2 1 3 38 3 4 23 2 4 2 1 4 38 4 5 23 2 5 2 1 5 23 5 5 2 4 5 2 42 5 4 4 38 6 5 23 2 5 2 1 5 23 7 5 2 2 5 23 5 4 2 4 5 21 0 1 2 3 2 42 3 4 0 57 0 11 0 4) #(0 69 76) #(1 :WEIGHTS SEND :X-MATRIX :XTXINV MATMULT :NUM-COEFS REPEAT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:LEVERAGES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the fitted values for the model." :FIT-VALUES #K(#(80 2 3 0 1 2 7 38 3 5 23 4 5 2 1 5 38 5 6 23 4 6 2 1 6 38 6 7 23 4 7 2 1 7 23 7 8 2 5 4 38 8 9 23 9 8 3 8 9 3 38 10 9 23 4 9 2 1 9 21 0 1 2 9 17 6 10 23 11 0 3 8 7 10 16 6 10 23 12 11 2 5 8 2 43 10 11 5 1 3 23 11 0 3 8 7 6 23 12 5 2 5 8 25 13 0 2 5 2) #(0 64 90 103) #(LIST 0.0 1 :X SEND :COEF-ESTIMATES :BASIS ARRAY-DIMENSION :INITIAL-ELEMENT MAKE-ARRAY :INTERCEPT SET-SELECT MATMULT COERCE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:FIT-VALUES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the raw residuals for a model." :RAW-RESIDUALS #K(#(80 2 0 2 38 0 2 23 1 2 2 1 2 38 2 3 23 1 3 2 1 3 2 45 2 3 0 57 0) #(0) #(:Y SEND :FIT-VALUES) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RAW-RESIDUALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the raw residuals for a model without weights. If the model
includes weights the raw residuals times the square roots of the weights
are returned." :RESIDUALS #K(#(80 2 0 2 38 0 2 23 1 2 2 1 2 38 2 3 23 1 3 2 1 3 21 0 1 2 3 23 3 3 1 3 2 42 3 2 0 57 0 11 0 2) #(0 27 39) #(:RAW-RESIDUALS SEND :WEIGHTS SQRT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIDUALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the error sum of squares for the model." :SUM-OF-SQUARES #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(:RESIDUAL-SUM-OF-SQUARES SEND) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SUM-OF-SQUARES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the estimated standard deviation of the deviations about the 
regression line." :SIGMA-HAT #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 37 35 1 2 5 3 2 47 4 5 4 25 5 0 1 4 11 0 2) #(0 30 40) #(NIL 0 :SUM-OF-SQUARES SEND :DF SQRT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SIGMA-HAT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the sample squared multiple correlation coefficient, R squared, for
the regression." :R-SQUARED #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 2 47 4 5 4 2 45 3 4 4 2 77 4 2 0 57 0) #(0) #(0 1 :SUM-OF-SQUARES SEND :TOTAL-SUM-OF-SQUARES) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:R-SQUARED) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the OLS (ordinary least squares) estimates of the regression
coefficients. Entries beyond the intercept correspond to entries in basis." :COEF-ESTIMATES #K(#(80 2 3 0 1 2 4 38 3 5 23 4 5 2 1 5 23 5 5 2 5 4 38 6 6 23 4 6 2 1 6 21 0 1 2 6 38 7 7 23 4 7 2 1 7 2 43 4 7 7 20 2 7 6 1 3 38 7 7 23 4 7 2 1 7 2 43 4 7 6 38 8 7 23 4 7 2 1 7 2 43 4 5 8 23 9 5 3 7 8 6 23 10 5 1 5 25 11 0 2 5 3) #(0 36 56 70) #(0 LIST 1 :X SEND ARRAY-DIMENSION :INTERCEPT :BASIS :SWEEP-MATRIX SELECT COMPOUND-DATA-SEQ COERCE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:COEF-ESTIMATES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns ((X^T) X)^(-1) or ((X^T) W X)^(-1)." :XTXINV #K(#(80 2 1 0 2 38 1 3 23 2 3 2 1 3 21 0 1 2 3 38 3 4 23 2 4 2 1 4 61 112 4 4 20 2 4 3 1 3 38 3 4 23 2 4 2 1 4 61 112 4 3 38 4 4 23 2 4 2 1 4 25 5 0 3 4 3 3) #(0 19 38 51) #(0 :INTERCEPT SEND :BASIS :SWEEP-MATRIX SELECT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:XTXINV) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns estimated standard errors of coefficients. Entries beyond the
intercept correspond to entries in basis." :COEF-STANDARD-ERRORS #K(#(80 2 1 0 2 38 1 3 23 2 3 2 1 3 21 0 1 2 3 38 1 3 23 2 3 2 1 3 38 3 4 23 2 4 2 1 4 23 4 4 1 4 23 5 4 1 4 2 42 3 4 0 57 0 11 0 2) #(0 19 54) #(NIL :SIGMA-HAT SEND :XTXINV DIAGONAL SQRT) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:COEF-STANDARD-ERRORS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args:  ()
Computes the internally studentized residuals for included cases and externally studentized residuals for excluded cases." :STUDENTIZED-RESIDUALS #K(#(80 2 2 0 1 6 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 38 5 6 23 3 6 2 1 6 38 6 7 23 3 7 2 1 7 2 45 3 5 8 23 7 8 2 2 8 23 8 8 1 8 2 42 6 8 8 2 47 4 8 8 2 43 3 5 9 23 8 9 1 9 2 42 6 9 9 2 47 4 9 9 25 9 0 3 7 8 9) #(0) #(1.0E-5 1 :RESIDUALS SEND :LEVERAGES :SIGMA-HAT :INCLUDED PMAX SQRT IF-ELSE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:STUDENTIZED-RESIDUALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args:  ()
Computes the externally studentized residuals." :EXTERNALLY-STUDENTIZED-RESIDUALS #K(#(80 2 2 0 1 5 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 38 5 6 23 3 6 2 1 6 2 45 5 3 7 23 6 8 2 4 2 2 45 5 8 8 2 47 7 8 7 23 7 7 1 7 2 42 4 7 7 25 8 0 3 6 7 4) #(0) #(2 1 :STUDENTIZED-RESIDUALS SEND :DF :INCLUDED ^ SQRT IF-ELSE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:EXTERNALLY-STUDENTIZED-RESIDUALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Computes Cook's distances." :COOKS-DISTANCES #K(#(80 2 2 0 1 5 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 23 5 5 2 5 3 38 6 6 23 3 6 2 1 6 2 47 5 6 5 38 7 6 23 3 6 2 1 6 2 45 2 4 7 2 47 4 7 7 2 42 5 7 7 2 42 5 4 8 25 8 0 3 6 7 8) #(0) #(1 2 :LEVERAGES SEND :STUDENTIZED-RESIDUALS ^ :NUM-COEFS :INCLUDED IF-ELSE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:COOKS-DISTANCES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional x-values)
Opens a window with a plot of the residuals. If X-VALUES are not supplied 
the fitted values are used. The plot can be linked to other plots with the 
link-views function. Returns a plot object." :PLOT-RESIDUALS #K(#(77 1 2 1 1 1 0 5 21 0 1 2 2 0 2 4 1 3 38 2 4 23 3 4 2 1 4 38 4 5 23 3 5 2 1 5 38 5 6 38 6 7 38 7 8 23 3 8 2 1 8 25 8 0 6 4 5 6 3 7 8) #(0 13 18 27) #("Residual Plot" #(NIL) :FIT-VALUES SEND :RESIDUALS :TITLE :POINT-LABELS :CASE-LABELS PLOT-POINTS) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOT-RESIDUALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional x-values)
Opens a window with a plot of the standardized residuals and two standard
error bars for the posterior distribution of the actual deviations from the
line. See Chaloner and Brant. If X-VALUES are not supplied  the fitted values
are used. The plot can be linked to other plots with the link-views function.
Returns a plot object." :PLOT-BAYES-RESIDUALS #K(#(77 1 2 1 3 3 0 1 2 8 38 4 6 23 5 6 2 1 6 38 6 7 23 5 7 2 1 7 2 47 6 7 6 38 7 7 23 5 7 2 1 7 23 8 7 1 7 2 42 5 7 7 2 45 6 7 8 2 43 6 7 9 21 0 1 2 2 0 2 10 1 3 38 9 10 23 5 10 2 1 10 38 10 11 38 11 12 38 12 13 23 5 13 2 1 13 23 13 11 6 10 6 11 4 12 13 51 4 12 1 11 23 14 0 6 3 12 10 8 10 9 38 15 12 23 5 0 2 11 12 11 0 11 80 6 1 16 1 38 17 7 25 5 0 7 1 7 2 3 4 5 6) #(0 67 72 81 133) #(LIST "Bayes Residual Plot" 2 #(NIL) :RESIDUALS SEND :SIGMA-HAT :LEVERAGES SQRT :FIT-VALUES :TITLE :POINT-LABELS :CASE-LABELS PLOT-POINTS MAP :ADJUST-TO-DATA NIL :PLOTLINE) 0 NIL) REGRESSION-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOT-BAYES-RESIDUALS) 0 NIL)) EVAL) 0 NIL)
