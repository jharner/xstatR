(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graph2" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graphics" REQUIRE) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Scatterplot Matrix" SCATMAT-PROTO :TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Scatmat" SCATMAT-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(T SCATMAT-PROTO :FIXED-ASPECT SEND) 0 NIL)
#K(#(80 1 0 4 38 0 1 38 1 2 38 2 3 38 1 4 23 3 3 2 3 4 25 3 0 3 1 2 3) #(0) #(SCATMAT-PROTO :MENU-TEMPLATE GRAPH-PROTO SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REDRAW-BACKGROUND #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(:ERASE-WINDOW SEND) 0 NIL) SCATMAT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW-BACKGROUND) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Spinning Plot" SPIN-PROTO :TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Spinner" SPIN-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(T SPIN-PROTO :FIXED-ASPECT SEND) 0 NIL)
#K(#(80 1 1 0 4 38 1 2 38 2 3 38 3 4 38 2 5 23 4 4 2 4 5 23 5 4 2 4 1 25 4 0 3 2 3 4) #(0) #((DASH FASTER SLOWER CUING AXES) SPIN-PROTO :MENU-TEMPLATE GRAPH-PROTO SEND APPEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(("X" "Y" "Z") SPIN-PROTO :VARIABLE-LABELS SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(NIL SPIN-PROTO :BLACK-ON-WHITE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(T SPIN-PROTO :DEPTH-CUING SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(T SPIN-PROTO :SHOWING-AXES SEND) 0 NIL)
#K(#(80 1 2 0 1 3 38 2 3 38 3 4 38 4 5 25 5 0 5 3 4 2 5 1) #(0) #(NIL VARIABLE SPIN-PROTO :SCALE-TYPE :DRAW SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 2 2 0 0 3 39 0 3 23 1 0 2 3 2 38 2 3 38 3 4 38 4 5 23 5 4 2 4 5 25 5 0 3 1 3 4) #(0) #(CALL-NEXT-METHOD APPLY :ADD-OVERLAY SPIN-CONTROL-OVERLAY-PROTO :NEW SEND) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADJUST-TO-DATA #K(#(77 3 2 0 0 0 4 3 3 0 1 2 7 38 5 6 23 6 0 2 6 5 38 7 6 23 8 6 2 1 6 21 0 2 1 6 38 9 7 23 8 7 2 1 7 38 10 8 2 45 7 4 9 23 11 9 2 3 9 23 8 8 3 1 8 9 23 12 9 1 7 23 13 10 1 8 61 45 10 10 23 14 11 1 8 2 77 10 11 10 2 42 9 10 8 38 15 9 23 11 10 1 7 38 5 11 23 8 0 6 1 9 10 3 11 5 38 10 9 23 11 10 1 7 61 45 8 11 38 5 12 23 8 0 7 1 9 10 11 8 12 5 21 0 3 4 2 38 16 6 23 8 0 2 1 6 38 17 6 25 8 0 2 1 6 11 0 5) #(0 36 142 147 165) #(0 1 NIL (T) (:DRAW) :DRAW CALL-NEXT-METHOD :SCALE-TYPE SEND :NUM-VARIABLES :RANGE ISEQ SQRT MIN MAX :CENTER :RESIZE :REDRAW) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADJUST-TO-DATA) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ROTATION-TYPE #K(#(77 1 2 1 2 2 0 1 2 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 21 0 4 5 5 63 4 6 0 62 4 0 57 0) #(0 17 22 25 30 34) #(NIL ROTATION-TYPE #(%NOT-SUPPLIED)) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ROTATION-TYPE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-MENU-ITEM #K(#(80 3 6 0 1 2 3 4 5 6 23 6 9 1 2 21 0 1 7 9 60 2 8 6 5 4 3 2 25 7 0 1 2 38 8 9 38 9 10 38 10 11 38 10 12 38 11 13 38 12 14 25 13 0 10 9 10 7 1 11 12 13 6 14 6 38 8 9 38 9 10 38 14 11 38 14 12 38 11 13 38 12 14 25 13 0 10 9 10 5 1 11 12 13 6 14 6 38 15 9 38 9 10 25 13 0 4 9 10 1 4 38 15 9 38 9 10 25 13 0 4 9 10 1 3 11 0 2) #(0 20 28 33 65 97 111 125) #(1.5 0.6666666666666666 "Depth Cuing" T "Show Axes" #(FASTER SLOWER CUING AXES) SYMBOLP CALL-NEXT-METHOD GRAPH-ITEM-PROTO :NEW :SHOWING-AXES :TOGGLE :REDRAW SEND :DEPTH-CUING SPIN-SPEED-ITEM-PROTO) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-MENU-ITEM) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Args: (x y z &key (draw t) (type 'solid) (spline 3) color)
Adds a grid surface using sequences X, Y with values in the matrix Z.
Z should be (length X) by (length Y)." :ADD-SURFACE #K(#(77 3 5 0 0 0 2 1 1 0 2 23 3 10 1 4 51 7 11 5 3 7 8 6 1 23 4 0 3 11 2 10 23 5 10 1 4 51 3 11 5 2 7 8 6 1 23 4 0 3 11 3 10 21 0 1 2 5 38 6 10 23 7 0 2 1 10 11 0 9 80 8 1 0 8 21 0 4 5 2 38 8 9 23 9 10 1 1 2 42 2 10 10 23 10 9 4 1 7 9 10 1 6 23 11 9 2 1 7 16 9 10 71 2 2 9 11 38 12 12 23 9 13 1 10 23 13 13 2 6 13 23 11 13 3 10 13 11 38 14 14 38 15 15 38 16 16 25 7 0 9 5 12 13 14 8 15 4 16 3 80 8 1 0 8 21 0 8 9 2 38 8 9 23 9 10 1 1 2 42 2 10 10 23 10 9 4 1 7 9 10 1 10 23 11 9 2 1 7 16 9 10 71 2 2 9 11 38 12 12 23 9 13 1 10 23 13 13 2 6 13 23 11 13 3 13 10 11 38 14 14 38 15 15 38 16 16 25 7 0 9 5 12 13 14 8 15 4 16 3) #(0 58 67 70 80 103 109 160 170 193 199) #(NIL (T SOLID 3 NIL) (:DRAW :TYPE :SPLINE :COLOR) ROW-LIST MAPCAR COLUMN-LIST :REDRAW SEND :XVALS LENGTH SPLINE LIST :ADD-LINES REPEAT :DRAW :TYPE :COLOR) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-SURFACE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Args: (f xmin xmax ymin ymax &rest args &key (num-points 6))
Adds surface of function F over a NUM-POINTS by NUM-POINTS grid on the
rectangle [xmin, xmax] x [ymin, ymax]. Passes other keywords to
:add-surface method." :ADD-FUNCTION #K(#(77 3 7 0 1 0 1 0 0 5 23 2 9 3 3 4 8 23 2 10 3 5 6 8 23 3 11 3 9 10 2 39 4 12 38 5 13 25 6 0 7 12 1 13 9 10 11 7) #(0) #((6) (:NUM-POINTS) RSEQ OUTER-PRODUCT SEND :ADD-SURFACE APPLY) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (a b c)
Adds the graph of the plane A + B x + Cy to the plot." :ABCPLANE #K(#(77 2 5 0 5 0 1 2 3 4 10 38 5 11 23 6 11 3 1 11 10 38 5 12 23 6 12 3 1 12 9 39 6 13 38 7 14 23 8 15 1 11 39 9 16 23 10 16 2 16 11 23 11 16 1 16 23 12 17 1 8 2 42 7 17 17 2 47 16 17 16 2 45 15 16 15 23 8 16 1 11 39 9 17 23 10 17 2 17 11 23 11 17 1 17 23 12 18 1 8 2 42 7 18 18 2 47 17 18 17 2 43 16 17 16 23 8 17 1 12 39 9 18 23 10 18 2 18 12 23 11 18 1 18 23 12 19 1 8 2 42 7 19 19 2 47 18 19 18 2 45 17 18 17 23 8 18 1 12 39 9 19 23 10 19 2 19 12 23 11 19 1 19 23 12 20 1 8 2 42 7 20 20 2 47 19 20 19 2 43 18 19 18 38 13 19 51 1 20 3 2 4 3 25 10 0 11 13 1 14 20 15 16 17 18 19 6 5 80 6 0 2 2 42 3 4 6 2 42 2 5 7 25 14 0 3 1 6 7) #(0 218) #(NIL 2 3 1 0 :RANGE SEND :ADD-FUNCTION MEAN - APPLY ABS SQRT :SPLINE +) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ABCPLANE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((TOP LEFTS GAP SIDE ASCENT BOX-TOP TEXT-BASE) SPIN-CONTROL-OVERLAY-PROTO NIL GRAPH-OVERLAY-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 2 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 11 63 17 16 0 63 15 14 0 38 16 18 38 17 19 23 18 18 2 18 19 63 13 18 0 38 16 18 38 19 19 23 18 18 3 18 19 12 38 16 19 38 19 20 23 18 19 3 19 20 11 38 16 20 38 19 21 23 18 0 3 20 21 10 62 17 20 62 15 21 2 42 9 20 22 2 42 8 20 23 2 43 23 21 23 2 42 7 20 24 2 42 9 21 25 23 20 24 3 24 25 18 2 42 6 20 25 2 42 8 21 26 23 20 25 3 25 26 18 2 42 5 20 26 2 42 4 21 27 23 20 26 4 26 27 18 19 2 42 3 20 27 2 42 16 21 28 23 20 27 4 27 28 18 19 23 21 18 6 22 23 24 25 26 27 63 2 18 0 57 0) #(0) #(LEFTS 12 4 11 7 6 3 2 "Yaw" "Roll" "Pitch" ASCENT 10 SIDE 5 GAP GRAPH-PROTO :TEXT-ASCENT SEND :TEXT-WIDTH + LIST) 0 NIL) SPIN-CONTROL-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :RESIZE #K(#(80 2 6 0 1 2 3 4 5 6 38 6 8 23 7 8 2 1 8 38 8 9 23 7 9 2 8 9 38 9 10 23 7 10 2 8 10 23 10 10 1 10 2 45 9 10 9 2 43 9 7 9 62 6 10 62 5 11 38 11 12 23 7 12 2 8 12 2 77 11 12 12 23 12 12 3 9 10 12 2 45 12 11 13 63 4 9 0 63 3 12 0 63 2 13 0 57 0) #(0) #(BOX-TOP TEXT-BASE TOP SIDE GAP 1 :GRAPH SEND :CANVAS-HEIGHT :MARGIN FOURTH :TEXT-ASCENT +) 0 NIL) SPIN-CONTROL-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIZE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REDRAW #K(#(80 2 11 0 1 2 3 4 5 6 7 8 9 10 9 62 12 13 62 11 14 62 10 15 62 9 16 62 8 17 62 7 18 62 6 19 38 11 20 38 12 21 23 13 21 2 13 21 23 13 0 6 13 20 5 14 21 14 51 2 19 3 17 19 13 23 14 0 2 19 15 23 15 19 2 15 4 23 16 19 3 19 16 17 23 17 20 2 18 3 51 1 21 1 13 25 14 0 4 21 2 19 20 80 5 0 1 38 18 5 25 13 0 5 1 5 2 3 4 80 5 0 1 38 19 5 25 13 0 6 3 5 4 2 1 1) #(0 103 119) #(("Pitch" "Roll" "Yaw") 3 (1 3 5) 0 BOX-TOP TEXT-BASE SIDE GAP LEFTS TOP GRAPH :DRAW-LINE :CANVAS-WIDTH SEND MAPCAR SELECT + REPEAT :DRAW-STRING :FRAME-RECT) 0 NIL) SPIN-CONTROL-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-CLICK #K(#(80 6 11 0 1 2 3 4 5 6 7 8 9 10 9 62 16 17 62 15 18 62 14 19 62 13 0 62 12 20 62 11 21 62 10 22 37 60 1 8 18 3 38 11 23 23 12 0 3 17 23 9 23 13 21 3 22 3 21 21 0 2 7 21 2 43 19 20 22 23 13 22 3 19 2 22 23 14 22 1 22 16 22 22 38 15 23 23 12 23 2 17 23 23 16 23 1 23 21 0 3 7 22 38 17 24 2 47 22 7 25 23 18 25 1 25 23 19 25 2 6 25 23 12 0 3 17 24 25 38 15 24 23 20 25 1 22 21 0 4 5 25 0 23 25 1 6 61 45 23 25 23 12 0 3 17 24 25 38 21 22 51 9 23 1 17 23 12 0 4 17 22 23 9 38 11 22 23 12 0 3 17 22 4 11 0 8 11 0 9 80 4 1 1 1 38 22 5 23 12 0 2 1 5 25 23 0 1 4) #(0 42 64 103 142 147 151 184 187 190) #((PITCHING ROLLING YAWING) 2 T NIL BOX-TOP TEXT-BASE SIDE GAP LEFTS TOP GRAPH :IDLE-ON SEND < WHICH :ANGLE ABS :ROTATION-TYPE FLOOR SELECT ODDP :WHILE-BUTTON-DOWN :ROTATE PAUSE) 0 NIL) SPIN-CONTROL-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-CLICK) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH MULT) SPIN-SPEED-ITEM-PROTO NIL MENU-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 4 7 0 1 2 3 4 5 6 2 63 10 2 0 63 9 3 0 37 62 1 2 8 3 0 4 11 1 3 0 5 11 23 7 0 1 11 38 8 11 37 62 4 5 8 3 0 6 12 1 6 0 7 12 25 9 0 3 1 11 12) #(0 25 30 33 47 52 55) #("Slower" "Faster" #\S #\F 1 MULT GRAPH CALL-NEXT-METHOD :KEY SEND) 0 NIL) SPIN-SPEED-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 2 0 1 5 62 3 4 38 2 5 62 2 6 62 3 7 38 2 8 23 3 7 2 7 8 2 42 6 7 6 25 3 0 3 4 5 6) #(0) #(MULT GRAPH :ANGLE SEND) 0 NIL) SPIN-SPEED-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 3 38 3 4 38 4 5 38 0 6 23 5 4 3 4 5 6 23 6 4 1 4 50 0 1 2 4 3 38 3 4 38 4 5 38 0 6 23 5 4 3 4 5 6 49 7 4 0 38 3 4 51 3 5 0 23 8 0 4 4 1 5 2 11 0 1 11 0 2 80 2 1 9 1 38 7 3 31 3 0 1 1 25 10 0 1 2) #(0 34 72 75) #(:DO-IDLE NIL SUBR SPIN-PROTO :GET-METHOD SEND TYPE-OF XLISP::OLD-SPIN-IDLE XLISP::ADD-METHOD 2 PAUSE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (f xmin xmax ymin ymax &key (num-points 6) (spline 3))
Rotatable plot of function F of two real variables over the range
between [xmin, xmax] x [ymin, ymax]. The function is evaluated at
NUM-POINTS points. If SPLINE is not NIL a spline is fit at 
(* SPLINE NUMPOINTS) points." FUNCTION-DOCUMENTATION SPIN-FUNCTION %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPIN-FUNCTION #K(#(77 2 6 0 5 0 1 2 3 4 4 39 5 12 38 6 13 38 7 14 38 8 15 23 9 12 7 12 13 14 11 15 10 6 39 5 13 38 10 14 38 11 15 23 9 0 11 13 12 14 1 2 3 4 5 15 10 6 38 12 13 38 11 14 23 5 0 4 12 13 14 10 38 13 13 23 5 0 2 12 13 38 14 13 23 5 0 3 12 13 10 38 15 13 38 16 14 2 47 14 11 14 38 11 15 23 5 0 7 12 13 9 8 14 15 10 38 15 13 38 16 14 2 47 14 11 14 61 45 14 14 38 11 15 23 5 0 7 12 13 8 7 14 15 10 38 17 13 23 5 0 2 12 13 11 0 12) #(0) #(2 1 0 NIL 3 SEND SPIN-PROTO :NEW :SHOW APPLY :ADD-FUNCTION :DRAW :ADJUST-TO-DATA :NEW-MENU :SHOWING-AXES :ROTATE-2 PI :SHOW-WINDOW) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Name List" NAME-LIST-PROTO :TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("List" NAME-LIST-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #((LINK MOUSE DASH ERASE-SELECTION FOCUS-ON-SELECTION SHOW-ALL COLOR SELECTION DASH OPTIONS SAVE-IMAGE) NAME-LIST-PROTO :MENU-TEMPLATE SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :CLEAR-CONTENT #K(#(80 2 0 3 39 0 2 38 1 3 38 2 4 23 0 4 2 1 4 25 3 0 4 2 1 3 4) #(0) #(SEND :ERASE-RECT :VIEW-RECT APPLY) 0 NIL) NAME-LIST-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLEAR-CONTENT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Histogram" HISTOGRAM-PROTO :TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Histogram" HISTOGRAM-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(NIL HISTOGRAM-PROTO :FIXED-ASPECT SEND) 0 NIL)
#K(#(80 1 2 0 1 2 38 2 3 38 3 4 25 4 0 4 3 4 2 1) #(0) #(125 250 HISTOGRAM-PROTO :SIZE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #((LINK MOUSE RESIZE-BRUSH DASH ERASE-SELECTION FOCUS-ON-SELECTION SHOW-ALL COLOR SELECTION DASH SLICER RESCALE OPTIONS SAVE-IMAGE DASH CHANGE-BINS) HISTOGRAM-PROTO :MENU-TEMPLATE SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-MENU-ITEM #K(#(80 3 1 0 2 23 1 4 1 2 21 0 1 4 4 60 2 3 3 2 25 2 0 1 2 38 3 4 38 4 5 25 5 0 3 4 5 1 11 0 2) #(0 15 20 25 38) #(#(CHANGE-BINS) SYMBOLP CALL-NEXT-METHOD CHANGE-HIST-BINS-ITEM-PROTO :NEW SEND) 0 NIL) HISTOGRAM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-MENU-ITEM) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAG-POINT #K(#(77 3 4 0 0 0 2 1 1 0 2 38 3 6 23 4 6 4 2 3 6 5 21 0 1 2 6 38 5 7 23 6 0 2 1 7 21 0 3 5 6 21 0 4 5 4 38 7 7 23 6 0 2 1 7 11 0 6) #(0 27 36 41 46 55) #(NIL (T) (:DRAW) :DRAW CALL-NEXT-METHOD :RESIZE SEND :REDRAW) 0 NIL) HISTOGRAM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAG-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH) CHANGE-HIST-BINS-ITEM-PROTO NIL MENU-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 2 0 1 0 63 4 2 0 25 2 0 1 3) #(0) #("Change Bins" GRAPH CALL-NEXT-METHOD) 0 NIL) CHANGE-HIST-BINS-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 5 0 1 2 3 4 3 62 6 7 38 5 8 23 6 7 2 7 8 23 7 7 4 5 4 3 7 21 0 1 2 7 62 6 8 38 5 9 23 6 0 3 8 9 7 62 6 7 38 8 8 25 6 0 2 7 8 11 0 2) #(0 34 59) #(NIL 30 2 "Number of bins" GRAPH :NUM-BINS SEND GET-NEW-INTEGER :REDRAW) 0 NIL) CHANGE-HIST-BINS-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Plot" SCATTERPLOT-PROTO :TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Plot" SCATTERPLOT-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #(NIL SCATTERPLOT-PROTO :FIXED-ASPECT SEND) 0 NIL)
#K(#(80 1 0 4 38 0 1 38 1 2 38 2 3 38 1 4 23 3 3 2 3 4 25 3 0 3 1 2 3) #(0) #(SCATTERPLOT-PROTO :MENU-TEMPLATE GRAPH-PROTO SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (f xmin xmax &key (num-points 50)
Adds plot of function F of one real variable over the range between xmin
and xmax to the plot. The function is evaluated at NUM-POINTS points." :ADD-FUNCTION #K(#(77 3 5 0 1 0 4 3 3 0 1 2 5 38 5 10 23 6 10 2 1 10 37 61 2 1 9 10 23 7 0 1 8 23 8 10 3 3 4 6 23 9 11 2 2 10 39 6 12 38 10 13 23 11 14 2 10 11 25 12 0 5 12 1 13 14 5) #(0 28 33) #(NIL "only works for 2D plots" 2 (50) (:NUM-POINTS) :NUM-VARIABLES SEND ERROR RSEQ MAPCAR :ADD-LINES LIST APPLY) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (a b)
Adds the graph of the line A + B x to the plot." :ABLINE #K(#(80 4 1 0 5 38 1 5 23 2 5 3 1 5 4 38 3 6 16 5 7 71 2 2 5 8 51 1 9 2 2 3 25 2 0 5 1 6 9 7 8 80 4 0 1 2 42 2 3 4 2 43 1 4 0 57 0) #(0 41) #(0 :RANGE SEND :ADD-FUNCTION) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ABLINE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :PLOTLINE #K(#(80 7 0 4 38 0 7 23 1 8 2 2 4 23 1 9 2 3 5 38 2 10 25 3 0 6 1 7 8 9 10 6) #(0) #(:ADD-LINES LIST :DRAW SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOTLINE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (f xmin xmax &optional (num-points 50) labels)
Plots function F of one real variable over the range between xmin and xmax.
The function is evaluated at NUM-POINTS points. LABELS is a list of axis
labels." FUNCTION-DOCUMENTATION PLOT-FUNCTION %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PLOT-FUNCTION #K(#(77 3 4 0 0 0 1 0 0 4 23 2 7 3 2 3 4 23 3 8 2 1 7 38 4 9 38 5 10 25 6 0 6 7 8 9 5 10 6) #(0) #((50 SOLID NIL) (:NUM-POINTS :TYPE :LABELS) RSEQ MAPCAR :TYPE :VARIABLE-LABELS PLOT-LINES) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-BOXPLOT #K(#(77 3 3 0 0 0 10 9 9 0 1 2 3 4 5 6 7 8 11 38 11 15 23 12 15 2 1 15 37 61 2 1 10 15 23 13 0 1 6 2 42 14 4 15 2 42 13 4 16 23 14 17 1 2 23 15 18 2 17 12 23 15 19 2 17 11 23 15 20 2 17 10 23 15 21 2 17 9 23 15 22 2 17 8 38 16 23 2 45 3 16 24 2 43 3 16 25 23 12 0 7 1 23 24 18 25 18 7 38 16 23 2 45 3 16 24 2 43 3 16 25 23 12 0 7 1 23 24 22 25 22 7 38 16 23 23 12 0 7 1 23 3 18 3 19 7 38 16 23 23 12 0 7 1 23 3 21 3 22 7 38 16 22 2 45 3 15 23 2 43 3 15 24 23 12 0 7 1 22 23 19 24 19 7 38 16 22 2 45 3 15 23 2 43 3 15 24 23 12 0 7 1 22 23 20 24 20 7 38 16 22 2 45 3 15 23 2 43 3 15 24 23 12 0 7 1 22 23 21 24 21 7 38 16 22 2 45 3 15 23 2 45 3 15 24 23 12 0 7 1 22 23 19 24 21 7 38 16 22 2 43 3 15 23 2 43 3 15 24 25 12 0 7 1 22 23 19 24 21 7) #(0 34 39) #("only works for 2D plots" NIL 4 3 2 1 0 0.1 0.4 (1.0 1.0 T) (:X :WIDTH :DRAW) :NUM-VARIABLES SEND ERROR FIVNUM SELECT :PLOTLINE) 0 NIL) SCATTERPLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-BOXPLOT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (data &key (title \"Box Plot\"))
DATA is a sequence, a list of sequences or a matrix. Makes a boxplot of the
sequence or a parallel box plot of the sequences in the list or the columns
of the matrix." FUNCTION-DOCUMENTATION BOXPLOT %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BOXPLOT #K(#(77 3 2 0 0 0 7 6 6 0 1 2 3 4 5 8 0 1 9 38 8 10 38 9 11 38 10 12 38 11 13 23 12 10 7 10 11 8 12 2 13 7 23 13 11 1 9 21 0 1 2 11 23 14 9 1 9 1 9 23 15 12 1 9 21 0 3 4 12 0 7 12 1 5 0 3 12 21 0 7 6 12 16 9 13 23 16 12 1 13 21 0 8 9 12 23 17 9 1 9 23 18 11 1 9 23 19 12 1 9 23 20 11 3 11 12 6 38 21 12 48 5 11 13 48 4 11 14 23 12 0 5 10 12 4 13 14 38 22 12 48 8 11 13 23 12 0 5 10 12 3 7 13 38 21 11 23 23 12 1 9 61 112 12 12 23 12 0 5 10 11 5 5 12 23 23 11 1 9 0 5 12 37 60 10 11 12 11 38 24 13 48 12 9 14 38 25 15 61 112 12 16 23 12 0 5 10 13 14 15 16 61 112 12 12 37 60 10 11 12 11 38 26 13 23 12 0 2 10 13 11 0 10) #(0 52 59 69 74 77 82 90 95 100 188 221) #(T 1 0 4 NIL 2 ("Box Plot") (:TITLE) SCATTERPLOT-PROTO :NEW :TITLE :SHOW SEND MATRIXP COLUMN-LIST LISTP NUMBERP LIST MIN MAX GET-NICE-RANGE :RANGE :Y-AXIS LENGTH :ADD-BOXPLOT :X :SHOW-WINDOW) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (x data &key (title \"Box Plot\"))
DATA is a list of sequences or a matrix. X is a sequence with as many
elements as DATA has elements or columns. Makes a parallel box plot
of the sequences in the list or the columns of the matrix vs X." FUNCTION-DOCUMENTATION BOXPLOT-X %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BOXPLOT-X #K(#(77 3 3 0 0 0 9 8 8 0 1 2 3 4 5 6 7 11 0 2 12 0 1 13 38 10 14 38 11 15 38 12 16 38 13 17 23 14 14 7 14 15 11 16 3 17 10 23 15 15 1 12 21 0 1 2 15 23 16 12 1 12 1 9 23 17 16 1 12 21 0 3 4 16 0 10 16 1 5 0 6 16 21 0 7 6 16 16 12 17 23 18 16 1 17 21 0 8 9 16 23 1 12 1 12 23 19 15 1 12 23 20 16 1 12 23 21 15 3 15 16 9 38 22 16 48 8 15 17 48 7 15 18 23 14 0 5 14 16 7 17 18 38 23 16 48 11 15 17 23 14 0 5 14 16 6 10 17 23 24 13 2 13 5 23 25 15 1 13 23 25 16 1 12 37 35 10 11 15 16 23 26 0 1 4 23 27 15 1 13 23 19 15 1 15 23 19 16 1 13 2 45 16 15 16 23 20 17 1 13 2 43 17 15 17 23 21 16 3 16 17 9 38 22 17 48 8 16 18 48 7 16 19 23 14 0 5 14 17 8 18 19 38 28 17 48 11 16 18 23 14 0 5 14 17 6 10 18 23 25 16 1 12 0 8 17 37 60 12 13 17 16 38 29 18 48 17 12 19 38 30 20 38 31 21 48 17 13 22 23 14 0 7 14 18 19 20 15 21 22 61 112 17 17 37 60 12 13 17 16 38 32 18 23 14 0 2 14 18 11 0 14) #(0 57 64 74 79 82 87 95 100 105 180 185 272 310) #("argument lengths do not match" LIST T 1 0 4 NIL 2 ("Box Plot") (:TITLE) SCATTERPLOT-PROTO :NEW :TITLE :SHOW SEND MATRIXP COLUMN-LIST LISTP NUMBERP MIN MAX GET-NICE-RANGE :RANGE :Y-AXIS COERCE LENGTH ERROR DIFFERENCE :X-AXIS :ADD-BOXPLOT :WIDTH :X :SHOW-WINDOW) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (data &key (quantile-function #'normal-quant) (title \"Quantile Plot\") point-labels)" FUNCTION-DOCUMENTATION QUANTILE-PLOT %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(QUANTILE-PLOT #K(#(77 3 2 0 0 0 1 0 0 4 21 2 1 2 2 0 2 6 1 3 39 2 6 23 3 7 1 1 61 112 7 7 23 4 8 1 1 61 112 8 8 2 47 7 8 7 31 6 6 1 7 38 5 7 38 6 8 38 7 9 25 8 0 8 6 1 7 3 8 5 9 4) #(0 15 20 23) #((%NOT-SUPPLIED "Quantile Plot" NIL ("Theoretical Quantiles" "Observed Quantiles")) (:QUANTILE-FUNCTION :TITLE :POINT-LABELS :VARIABLE-LABELS) NORMAL-QUANT RANK LENGTH :TITLE :VARIABLE-LABELS :POINT-LABELS PLOT-POINTS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (data &key (distribution-function #'normal-cdf) (title \"Probability Plot\") point-labels)" FUNCTION-DOCUMENTATION PROBABILITY-PLOT %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROBABILITY-PLOT #K(#(77 3 2 0 0 0 4 3 3 0 1 2 6 21 2 1 2 2 0 2 8 1 3 39 5 8 23 6 9 1 1 61 112 9 9 23 7 10 1 1 61 112 10 10 2 47 9 10 9 31 8 10 1 1 38 8 11 38 9 12 38 10 13 23 11 8 8 9 10 11 3 12 7 13 4 38 12 9 23 13 0 5 8 9 6 6 5 38 14 9 23 13 0 5 8 9 6 6 5 11 0 8) #(0 18 23 26) #(5 T ("Theoretical CDF" "Observed CDF") (%NOT-SUPPLIED "Probability Plot" NIL) (:DISTRIBUTION-FUNCTION :TITLE :POINT-LABELS) NORMAL-CDF RANK LENGTH :TITLE :VARIABLE-LABELS :POINT-LABELS PLOT-POINTS :X-AXIS SEND :Y-AXIS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-SURFACE-CONTOUR #K(#(77 3 6 0 0 0 3 2 2 0 1 5 23 4 9 4 2 3 4 5 23 5 9 2 9 8 16 9 10 21 1 1 2 9 38 6 11 23 7 12 1 10 38 8 13 23 9 0 5 1 11 12 13 7 17 9 9 16 9 10 21 1 1 2 9 21 0 3 4 6 38 10 11 25 9 0 2 1 11 11 0 7) #(0 34 65 70 79) #(NIL 2 (T) (:DRAW) SURFACE-CONTOUR SPLIT-LIST :ADD-LINES TRANSPOSE :DRAW SEND :REDRAW-CONTENT) 0 NIL) SCATTERPLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-SURFACE-CONTOUR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-SURFACE-CONTOURS #K(#(77 3 5 1 5 0 0 4 3 3 0 1 2 4 21 0 1 4 5 23 6 10 1 5 21 0 2 3 10 23 0 10 2 5 5 1 5 23 7 10 2 5 7 1 5 23 8 10 1 4 23 9 11 1 4 2 45 11 10 11 2 42 11 8 11 2 43 10 11 10 16 10 11 21 1 6 7 10 38 10 12 38 11 13 23 12 0 8 1 12 2 3 4 11 13 9 17 10 10 16 10 11 21 1 6 7 10 21 0 8 9 6 38 13 12 25 12 0 2 1 12 11 0 9) #(0 19 29 37 45 70 78 107 112 121) #(LIST (0.2 0.4 0.6 0.8) NIL (T) (:DRAW) #(NIL) NUMBERP COERCE MIN MAX :ADD-SURFACE-CONTOUR :DRAW SEND :REDRAW-CONTENT) 0 NIL) SCATTERPLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-SURFACE-CONTOURS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-FUNCTION-CONTOURS #K(#(77 3 7 1 3 0 0 2 1 1 0 5 23 4 11 3 3 4 8 23 5 11 2 11 10 23 4 12 3 5 6 8 23 5 12 2 12 10 23 6 13 3 11 12 2 38 7 14 38 8 15 25 9 0 8 1 14 11 12 13 7 15 9) #(0) #(VECTOR (6 T) (:NUM-POINTS :DRAW) #(NIL) RSEQ COERCE OUTER-PRODUCT :ADD-SURFACE-CONTOURS :DRAW SEND) 0 NIL) SCATTERPLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-FUNCTION-CONTOURS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (f xmin xmax ymin ymax &key levels (num-points 6))
Contour plot of function F of two real variables over the range
between [xmin, xmax] x [ymin, ymax]. The function is evaluated at
NUM-POINTS points." FUNCTION-DOCUMENTATION CONTOUR-FUNCTION %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTOUR-FUNCTION #K(#(77 3 6 0 1 0 3 2 2 0 1 4 39 4 11 38 5 12 38 6 13 38 7 14 23 8 11 7 11 12 13 10 14 9 6 38 9 12 38 10 13 38 11 14 23 4 0 12 11 12 1 2 3 4 5 7 13 8 14 9 38 12 12 38 11 13 23 4 0 4 11 12 13 9 38 13 12 23 4 0 2 11 12 38 14 12 23 4 0 2 11 12 11 0 11) #(0) #(NIL 2 (NIL 6) (:LEVELS :NUM-POINTS) SEND SCATTERPLOT-PROTO :NEW :SHOW APPLY :ADD-FUNCTION-CONTOURS :NUM-POINTS :DRAW :ADJUST-TO-DATA :NEW-MENU :SHOW-WINDOW) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graph3" REQUIRE) 0 NIL)
