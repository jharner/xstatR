(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLISP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("dialogs" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((NUM-TO-STRING OK-OR-CANCEL-DIALOG-PROTO OK-OR-CANCEL-DIALOG MESSAGE-DIALOG-PROTO MESSAGE-DIALOG GET-STRING-DIALOG-PROTO GET-STRING-DIALOG GET-VALUE-DIALOG CHOOSE-ITEM-DIALOG-PROTO CHOOSE-ITEM-DIALOG CHOOSE-SUBSET-DIALOG-PROTO CHOOSE-SUBSET-DIALOG SEQUENCE-SCROLL-ITEM-PROTO SEQUENCE-SLIDER-DIALOG-PROTO SEQUENCE-SLIDER-DIALOG INTERVAL-SCROLL-ITEM-PROTO INTERVAL-SLIDER-DIALOG-PROTO INTERVAL-SLIDER-DIALOG) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NUM-TO-STRING #K(#(80 2 0 0 25 0 0 1 1) #(0) #(PRIN1-TO-STRING) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((OK-BUTTON CANCEL-BUTTON) OK-OR-CANCEL-DIALOG-PROTO NIL MODAL-DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 1 0 5 4 4 0 1 2 3 8 21 2 1 2 5 0 5 11 1 3 51 13 11 0 21 2 4 5 6 0 6 12 1 6 51 14 12 0 21 1 7 8 2 0 2 13 1 9 23 6 13 1 2 38 7 14 38 8 15 38 9 16 23 10 14 5 14 15 10 16 11 38 7 15 38 8 16 38 9 17 23 10 15 5 15 16 9 17 12 0 13 16 51 15 17 0 23 11 16 2 17 16 63 8 14 0 63 7 15 0 39 12 17 23 6 18 2 14 15 23 6 18 1 18 23 13 18 2 16 18 23 14 0 3 17 18 3 38 15 16 21 0 10 11 4 0 14 17 1 12 0 15 17 25 10 0 3 1 16 17 80 1 1 16 0 11 0 1 80 1 1 17 0 11 0 1 80 2 0 2 23 18 2 1 1 21 0 16 17 2 38 19 2 38 8 3 25 10 0 3 2 3 1 11 0 1) #(0 19 24 28 33 38 42 47 52 57 149 154 157 164 172 180 194 207) #(CANCEL-BUTTON OK-BUTTON "Cancel" "OK" (T %NOT-SUPPLIED %NOT-SUPPLIED) (:OK-DEFAULT :OK-ACTION :CANCEL-ACTION) LIST MODAL-BUTTON-PROTO :NEW :ACTION SEND MAPCAR CALL-NEXT-METHOD APPEND APPLY :DEFAULT-BUTTON T NIL STRINGP TEXT-ITEM-PROTO) 0 NIL) OK-OR-CANCEL-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s &optional (ok-default t) &rest args)
Open modal dialog with string S and OK, Cancel buttons. Returns T for
OK, NIL for Cancel. S can contain format directives, which are filled
from the remaining arguments." FUNCTION-DOCUMENTATION OK-OR-CANCEL-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(OK-OR-CANCEL-DIALOG #K(#(77 2 2 1 1 1 0 4 38 2 5 38 3 6 39 4 7 23 5 7 4 7 4 1 3 38 6 8 23 7 5 5 5 6 7 8 2 38 8 6 25 7 0 2 5 6) #(0) #(NIL #(T) OK-OR-CANCEL-DIALOG-PROTO :NEW FORMAT APPLY :OK-DEFAULT SEND :MODAL-DIALOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 0 4 38 2 4 39 3 5 23 4 6 1 4 21 0 1 2 6 0 4 6 1 3 23 5 6 1 4 23 6 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 7 7 23 8 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 9 7 23 8 0 4 4 7 2 1 23 10 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #(NIL MESSAGE-DIALOG-PROTO MODAL-DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 1 0 3 21 1 1 2 2 0 2 4 1 3 23 1 4 1 2 38 2 5 38 3 6 23 4 5 3 5 6 3 23 1 6 1 5 23 5 6 2 4 6 23 6 0 1 6 38 7 6 25 4 0 3 1 6 5) #(0 10 15 20) #("OK" LIST MODAL-BUTTON-PROTO :NEW SEND APPEND CALL-NEXT-METHOD :DEFAULT-BUTTON) 0 NIL) MESSAGE-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s &rest args)
Open modal dialog with string S and OK buttons. Returns NIL. S can contain
format directives, which are filled from the remaining arguments." FUNCTION-DOCUMENTATION MESSAGE-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MESSAGE-DIALOG #K(#(77 2 1 0 1 0 3 38 1 3 38 2 4 39 3 5 23 4 5 3 5 2 1 23 5 3 3 3 4 5 38 6 4 25 5 0 2 3 4) #(0) #(NIL MESSAGE-DIALOG-PROTO :NEW FORMAT APPLY SEND :MODAL-DIALOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(GET-STRING-DIALOG-PROTO NIL OK-OR-CANCEL-DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 1 0 5 4 4 0 1 2 3 8 64 4 9 21 2 1 2 4 0 4 10 1 3 0 6 10 38 6 11 38 7 12 23 8 11 3 11 12 2 38 9 12 38 7 13 21 0 4 5 9 23 10 14 3 6 5 10 1 6 0 7 14 38 11 15 23 8 12 5 12 13 14 15 8 39 12 13 23 13 14 2 11 12 38 14 15 51 7 16 1 12 25 15 0 5 13 14 15 16 3 80 2 0 1 38 16 2 25 8 0 2 1 2) #(0 22 27 30 54 63 66 104) #("~a" NIL "" 20 (%NOT-SUPPLIED) (:INITIAL) TEXT-ITEM-PROTO :NEW SEND EDIT-TEXT-ITEM-PROTO FORMAT :TEXT-LENGTH CALL-NEXT-METHOD LIST :OK-ACTION APPLY :TEXT) 0 NIL) GET-STRING-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s &key initial)
Opens a modal dialog with prompt S, a text field and OK, Cancel buttons.
INITIAL is converted to a string with ~A format directive. Returns string
of text field content on OK, NIL on cancel." FUNCTION-DOCUMENTATION GET-STRING-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-STRING-DIALOG #K(#(77 2 1 0 0 3 39 0 2 38 1 3 38 2 4 23 3 2 4 2 3 4 1 38 4 3 25 0 0 2 2 3) #(0) #(SEND GET-STRING-DIALOG-PROTO :NEW APPLY :MODAL-DIALOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s &key initial)
Opens a modal dialog with prompt S, a text field and OK, Cancel buttons.
INITIAL is converted to a string with ~S format directive. On Cancel returns
NIL. ON OK Returns list of result of reading and eval'ing the text field's
content." FUNCTION-DOCUMENTATION GET-VALUE-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-VALUE-DIALOG #K(#(77 3 2 0 1 0 4 3 3 0 1 2 3 64 3 7 21 2 1 2 3 0 3 8 1 3 0 4 8 21 0 4 5 7 23 5 7 3 6 5 8 1 6 0 8 7 39 6 8 38 7 9 23 8 7 5 8 1 9 7 2 21 0 7 8 7 23 9 7 1 7 23 10 7 2 7 6 23 11 7 1 7 25 12 0 1 7 11 0 6) #(0 21 26 29 34 43 46 66 87) #("" "~s" NIL (%NOT-SUPPLIED) (:INITIAL) FORMAT GET-STRING-DIALOG :INITIAL APPLY MAKE-STRING-INPUT-STREAM READ EVAL LIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(CHOOSE-ITEM-DIALOG-PROTO NIL OK-OR-CANCEL-DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 4 0 1 0 1 0 0 6 38 2 6 38 3 7 23 4 6 3 6 7 2 38 5 7 38 3 8 38 6 9 23 4 7 5 7 8 3 9 5 39 7 8 23 8 9 2 6 7 38 9 10 51 1 11 1 7 25 10 0 5 8 9 10 11 4 80 2 0 1 38 6 2 25 4 0 2 1 2) #(0 67) #((0) (:INITIAL) TEXT-ITEM-PROTO :NEW SEND CHOICE-ITEM-PROTO :VALUE CALL-NEXT-METHOD LIST :OK-ACTION APPLY) 0 NIL) CHOOSE-ITEM-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s strings &key initial)
Opens modal dialog with prompt S, a choice item for list of strings STRINGS
and OK, Cancel buttons. Returns chosen string on OK, NIL on cancel." FUNCTION-DOCUMENTATION CHOOSE-ITEM-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHOOSE-ITEM-DIALOG #K(#(77 2 1 0 0 3 39 0 2 38 1 3 38 2 4 23 3 2 4 2 3 4 1 38 4 3 25 0 0 2 2 3) #(0) #(SEND CHOOSE-ITEM-DIALOG-PROTO :NEW APPLY :MODAL-DIALOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(CHOOSE-SUBSET-DIALOG-PROTO NIL OK-OR-CANCEL-DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 4 0 1 0 3 2 2 0 1 6 38 4 8 38 5 9 23 6 8 3 8 9 2 23 7 9 1 3 2 45 9 7 9 23 8 9 2 6 9 51 3 10 1 5 23 9 9 3 10 3 9 39 10 10 20 8 9 11 38 11 12 51 2 13 1 9 25 12 0 5 10 11 12 13 4 80 2 0 1 38 13 2 25 6 0 2 1 2 80 2 0 1 51 1 2 0 23 9 2 2 2 1 23 14 2 1 2 25 15 0 1 2 80 4 0 4 38 16 4 38 5 5 38 13 6 23 17 7 2 3 1 25 6 0 5 4 5 2 6 7) #(0 77 90 114) #(0 1 (NIL) (:INITIAL) TEXT-ITEM-PROTO :NEW SEND LENGTH ISEQ MAPCAR CALL-NEXT-METHOD :OK-ACTION APPLY :VALUE WHICH LIST TOGGLE-ITEM-PROTO MEMBER) 0 NIL) CHOOSE-SUBSET-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (s strings &key initial)
Opens modal dialog with prompt S, a set of toggle items for list of 
strings STRINGS, and OK, Cancel buttons. Returns list of list of indices
of chosen items on OK, NIL on cancel." FUNCTION-DOCUMENTATION CHOOSE-SUBSET-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHOOSE-SUBSET-DIALOG #K(#(77 2 1 0 0 3 39 0 2 38 1 3 38 2 4 23 3 2 4 2 3 4 1 38 4 3 25 0 0 2 2 3) #(0) #(SEND CHOOSE-SUBSET-DIALOG-PROTO :NEW APPLY :MODAL-DIALOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((SEQUENCE DISPLAY-SEQUENCE VALUE-TEXT-ITEM) SEQUENCE-SCROLL-ITEM-PROTO NIL SCROLL-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 0 0 7 6 6 0 1 2 3 4 5 8 23 8 14 2 2 13 21 0 1 2 7 23 8 15 2 7 13 1 3 0 14 15 63 12 14 0 63 11 15 0 63 10 3 0 38 9 15 38 10 16 38 11 17 38 12 18 23 13 19 1 14 61 109 19 19 38 14 20 38 15 21 25 16 0 12 15 4 16 5 17 9 18 19 20 8 21 6) #(0 27 35 38) #(5 0 VALUE-TEXT-ITEM DISPLAY-SEQUENCE SEQUENCE VECTOR (NIL (180 16) NIL NIL NIL) (:TEXT-ITEM :SIZE :LOCATION :ACTION :DISPLAY) COERCE :SIZE :LOCATION :MIN-VALUE :MAX-VALUE LENGTH :PAGE-INCREMENT :ACTION CALL-NEXT-METHOD) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SCROLL-ACTION #K(#(80 2 0 1 38 0 2 23 1 0 2 1 2 38 2 2 25 1 0 2 1 2) #(0) #(:DISPLAY-VALUE SEND :USER-ACTION) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SCROLL-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 0 1 38 0 2 23 1 0 2 1 2 38 2 2 25 1 0 2 1 2) #(0) #(:DISPLAY-VALUE SEND :USER-ACTION) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VALUE #K(#(77 1 2 1 1 1 0 3 64 2 4 21 2 1 2 2 0 2 5 1 3 0 3 5 21 0 4 5 4 23 2 0 1 5 38 3 6 23 4 0 2 1 6 25 2 0 0) #(0 16 21 24 29 43) #(NIL #(%NOT-SUPPLIED) CALL-NEXT-METHOD :DISPLAY-VALUE SEND) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DISPLAY-VALUE #K(#(80 2 4 0 1 2 3 4 62 5 6 21 0 1 2 6 62 5 6 38 4 7 62 3 8 38 5 9 23 6 9 2 1 9 9 8 9 8 23 7 8 3 4 2 8 25 6 0 3 6 7 8 11 0 4) #(0 16 52) #("~s" DISPLAY-SEQUENCE NIL VALUE-TEXT-ITEM :TEXT :VALUE SEND FORMAT) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DISPLAY-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :USER-ACTION #K(#(80 2 3 0 1 2 3 62 4 5 21 0 1 2 5 62 4 5 62 2 6 38 3 7 23 4 7 2 1 7 9 6 7 6 33 5 0 1 6 11 0 3) #(0 15 39) #(SEQUENCE NIL ACTION :VALUE SEND) 0 NIL) SEQUENCE-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:USER-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(SEQUENCE-SLIDER-DIALOG-PROTO NIL DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 0 0 3 2 2 0 1 7 38 4 9 38 5 10 23 6 9 3 9 10 3 38 4 10 38 5 11 38 7 12 23 6 10 5 10 11 8 12 7 38 8 11 38 5 12 38 9 13 38 10 14 38 11 15 23 6 11 9 11 12 2 13 10 14 5 15 6 23 12 12 3 9 10 11 38 13 13 23 14 0 3 12 13 4 38 15 12 25 6 0 2 11 12) #(0) #((100 5) "          " ("Value" "Slider" NIL NIL) (:TEXT :TITLE :ACTION :DISPLAY) TEXT-ITEM-PROTO :NEW SEND :LOCATION SEQUENCE-SCROLL-ITEM-PROTO :TEXT-ITEM :ACTION :DISPLAY LIST :TITLE CALL-NEXT-METHOD :DISPLAY-VALUE) 0 NIL) SEQUENCE-SLIDER-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VALUE #K(#(77 2 2 0 2 0 1 3 39 2 5 62 4 6 48 3 6 6 38 3 7 25 4 0 4 5 6 7 2) #(0) #(2 ITEMS SEND :VALUE APPLY) 0 NIL) SEQUENCE-SLIDER-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (data &key (text \"Value\") (title \"Slider\") action display)
Opens modeless dialog with title TITLE, prompt TEXT, a text display and a
scrollbar. The scrollbar scrolls through the DATA sequence and displays the
corresponding element of the DISPLAY sequence. When a scroll event occurs
ACTION is called with the current value of DATA as argument." FUNCTION-DOCUMENTATION SEQUENCE-SLIDER-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SEQUENCE-SLIDER-DIALOG #K(#(77 2 1 0 0 3 39 0 2 38 1 3 38 2 4 25 3 0 4 2 3 4 1) #(0) #(SEND SEQUENCE-SLIDER-DIALOG-PROTO :NEW APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((INTERVAL NUM-POINTS VALUE-TEXT-ITEM) INTERVAL-SCROLL-ITEM-PROTO NIL SCROLL-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 0 0 8 7 7 0 1 2 3 4 5 6 7 21 2 1 2 7 0 7 15 1 3 48 11 2 15 48 10 2 16 23 9 15 3 15 16 9 48 8 15 15 63 14 2 0 63 13 15 0 63 12 3 0 38 10 16 38 11 17 38 12 18 38 13 19 61 109 15 20 38 14 21 25 15 0 10 16 4 17 5 18 11 19 20 21 6) #(0 22 27 46) #(2 50 1 0 VALUE-TEXT-ITEM NUM-POINTS INTERVAL (NIL (180 16) NIL NIL %NOT-SUPPLIED) (:TEXT-ITEM :SIZE :LOCATION :ACTION :POINTS) GET-NICE-RANGE :SIZE :LOCATION :MIN-VALUE :MAX-VALUE :ACTION CALL-NEXT-METHOD) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VALUE #K(#(77 1 2 1 5 5 0 1 2 3 4 9 64 2 8 21 2 1 2 2 0 2 9 1 3 0 3 9 62 7 10 62 6 11 21 0 4 5 8 9 10 5 12 9 10 4 13 61 109 11 14 2 45 9 12 15 2 45 13 12 16 2 47 15 16 15 2 42 14 15 12 23 6 12 1 12 23 7 0 1 12 38 8 12 23 9 0 2 1 12 38 10 12 23 9 0 2 1 12 9 10 5 12 9 10 4 13 23 7 14 0 61 109 11 15 2 47 14 15 14 2 45 13 12 15 2 42 14 15 13 2 43 12 13 0 57 0) #(0 20 25 28 39 99) #(NIL 1 0 NUM-POINTS INTERVAL #(%NOT-SUPPLIED) FLOOR CALL-NEXT-METHOD :DISPLAY-VALUE SEND :USER-ACTION) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAX #K(#(77 1 2 1 2 2 0 1 4 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 38 3 7 23 4 7 2 1 7 21 0 4 5 5 38 5 8 8 8 4 6 0 38 3 8 23 4 0 3 1 8 7 38 5 5 9 5 4 0 57 0) #(0 17 22 25 39 57) #(NIL 1 #(%NOT-SUPPLIED) :VALUE SEND INTERVAL) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MIN #K(#(77 1 2 1 2 2 0 1 4 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 38 3 7 23 4 7 2 1 7 21 0 4 5 5 38 5 8 8 8 4 6 0 38 3 8 23 4 0 3 1 8 7 38 5 5 9 5 4 0 57 0) #(0 17 22 25 39 57) #(NIL 0 #(%NOT-SUPPLIED) :VALUE SEND INTERVAL) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MIN) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :USER-ACTION #K(#(80 2 2 0 1 2 62 3 4 21 0 1 2 4 62 3 4 38 2 5 23 3 5 2 1 5 33 4 0 1 5 11 0 2) #(0 14 31) #(NIL ACTION :VALUE SEND) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:USER-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DISPLAY-VALUE #K(#(80 2 2 0 1 3 62 3 4 21 0 1 2 4 62 3 4 38 2 5 38 3 6 23 4 6 2 1 6 23 5 6 1 6 25 4 0 3 4 5 6 11 0 2) #(0 14 41) #(NIL VALUE-TEXT-ITEM :TEXT :VALUE SEND NUM-TO-STRING) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DISPLAY-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SCROLL-ACTION #K(#(80 2 0 1 38 0 2 23 1 0 2 1 2 38 2 2 25 1 0 2 1 2) #(0) #(:DISPLAY-VALUE SEND :USER-ACTION) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SCROLL-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 0 1 38 0 2 23 1 0 2 1 2 38 2 2 25 1 0 2 1 2) #(0) #(:DISPLAY-VALUE SEND :USER-ACTION) 0 NIL) INTERVAL-SCROLL-ITEM-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(INTERVAL-SLIDER-DIALOG-PROTO NIL DIALOG-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 3 0 0 0 7 6 6 0 1 2 3 4 5 9 0 2 14 0 6 15 21 0 1 2 7 48 10 14 16 48 9 14 17 23 8 16 3 16 17 15 48 10 16 17 48 9 16 18 23 9 14 2 17 18 48 8 16 15 38 10 16 38 11 17 38 12 18 23 13 16 5 16 17 13 18 12 38 10 17 38 11 18 23 13 17 3 17 18 3 38 14 18 38 11 19 38 15 20 38 16 21 38 17 22 23 13 18 9 18 19 14 20 16 21 5 22 15 23 9 19 3 17 16 18 38 18 20 23 19 0 3 19 20 4 38 20 19 25 13 0 2 18 19) #(0 27 60) #(2 1 0 NIL (100 5) "              " ("Value" "Slider" NIL 30 T) (:TEXT :TITLE :ACTION :POINTS :NICE) GET-NICE-RANGE LIST TEXT-ITEM-PROTO :NEW :LOCATION SEND INTERVAL-SCROLL-ITEM-PROTO :TEXT-ITEM :ACTION :POINTS :TITLE CALL-NEXT-METHOD :DISPLAY-VALUE) 0 NIL) INTERVAL-SLIDER-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VALUE #K(#(77 2 2 0 2 0 1 3 39 2 5 62 4 6 48 3 6 6 38 3 7 25 4 0 4 5 6 7 2) #(0) #(2 ITEMS SEND :VALUE APPLY) 0 NIL) INTERVAL-SLIDER-DIALOG-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (data &key (text \"Value\") (title \"Slider\") action (points 30) (nice t))
Opens modeless dialog with title TITLE, prompt TEXT, a text display and a
scrollbar. The scrollbar scrolls through the interval DATA, a list of the form
(LOW HIGH), sequence and displays the value. When a scroll event occurs
ACTION is called with the current value in the interval as argument. If NICE
is not NIL DATA and POINTS are revised to produce a nice set of values." FUNCTION-DOCUMENTATION INTERVAL-SLIDER-DIALOG %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INTERVAL-SLIDER-DIALOG #K(#(77 2 1 0 0 3 39 0 2 38 1 3 38 2 4 25 3 0 4 2 3 4 1) #(0) #(SEND INTERVAL-SLIDER-DIALOG-PROTO :NEW APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
