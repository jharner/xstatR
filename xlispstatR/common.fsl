(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLISP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(X EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIFTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(4) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIXTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(5) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SEVENTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(6) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EIGHTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(7) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NINTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(8) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(TENTH #K(#(80 2 1 0 0 48 2 1 0 57 0) #(0) #(9) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((COMPILE COMPILE-FILE) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-SETF* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-SETF*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(STEP EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((DEFTYPE FLONUM SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT REAL SEQUENCE) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DEFTYPE-ARGLIST-FIX #K(#(80 2 5 0 1 2 3 4 9 23 5 7 2 6 1 21 0 1 8 7 2 43 7 5 7 38 6 8 51 9 9 0 23 7 8 4 9 1 8 7 21 0 3 2 8 23 8 8 1 1 23 9 9 1 1 0 7 10 37 76 7 4 8 10 48 10 9 11 23 10 12 1 11 21 0 5 6 12 23 11 13 1 11 23 11 14 1 3 23 11 15 1 2 23 12 14 2 14 15 23 11 14 1 14 23 12 13 2 13 14 47 10 9 13 0 2 43 10 5 10 37 76 7 4 8 10 11 0 9 11 0 1 80 2 0 1 38 13 2 25 14 0 2 1 2) #(0 20 45 50 64 78 115 126 129 132) #(* QUOTE NIL 1 &OPTIONAL POSITION :START POSITION-IF LENGTH COPY-LIST SYMBOLP LIST APPEND LAMBDA-LIST-KEYWORDS MEMBER) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 7 3 4 5 6 7 8 9 7 23 10 11 1 2 23 11 12 1 10 23 11 13 1 9 23 11 14 1 8 23 11 15 1 7 23 11 16 1 1 23 12 15 2 15 16 23 11 15 1 15 23 11 16 1 7 23 11 17 1 6 23 12 16 2 16 17 23 11 16 1 16 23 12 14 3 14 15 16 23 11 14 1 14 23 11 15 1 5 23 11 16 1 4 23 11 17 1 11 23 12 16 3 16 17 3 23 11 16 1 16 23 12 15 2 15 16 23 11 15 1 15 23 12 13 3 13 14 15 23 11 13 1 13 23 11 14 1 7 23 11 15 1 1 23 12 14 2 14 15 23 11 14 1 14 25 12 0 3 12 13 14 80 3 0 2 17 1 3 51 1 4 0 25 13 0 2 4 3) #(0 20 185) #(DEFTYPE COERCE-TO-MACRO INSTALL-FUNCTION LAMBDA FUNCTION *TYPE-SPEC* QUOTE GET SETF PROGN DEFTYPE-ARGLIST-FIX LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* FLONUM #K(#(80 1 1 0 0 11 0 1) #(0) #(FLOAT) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(FLONUM) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* SHORT-FLOAT #K(#(80 1 1 0 0 11 0 1) #(0) #(FLOAT) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SHORT-FLOAT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* SINGLE-FLOAT #K(#(80 1 1 0 0 11 0 1) #(0) #(FLOAT) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SINGLE-FLOAT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* DOUBLE-FLOAT #K(#(80 1 1 0 0 11 0 1) #(0) #(FLOAT) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DOUBLE-FLOAT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* LONG-FLOAT #K(#(80 1 1 0 0 11 0 1) #(0) #(FLOAT) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(LONG-FLOAT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* REAL #K(#(80 1 1 0 0 11 0 1) #(0) #((OR INTEGER RATIO FLOAT)) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(REAL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* RATIONAL #K(#(80 1 1 0 0 11 0 1) #(0) #((OR INTEGER RATIO)) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(RATIONAL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*TYPE-SPEC* SEQUENCE #K(#(80 1 1 0 0 11 0 1) #(0) #((SATISFIES SEQUENCEP)) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SEQUENCE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((EVAL-WHEN) EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 6 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 3 3 4 5 2 23 6 6 2 5 1 21 0 3 2 6 38 7 7 23 6 6 2 7 1 21 0 4 5 6 23 8 6 1 3 25 9 0 2 6 2 11 0 4 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 40 49 54 65 68) #(EVAL-WHEN COERCE-TO-MACRO INSTALL-FUNCTION PROGN NIL EVAL MEMBER :EXECUTE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((DEFSETF DOCUMENTATION) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(APPLY-ARG-ROTATE #K(#(80 3 0 2 23 0 3 1 2 16 3 3 23 1 4 1 2 25 2 0 3 1 3 4) #(0) #(LAST BUTLAST APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 4 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 16 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 11 23 19 20 1 2 21 0 2 3 20 23 6 20 1 15 23 6 21 1 14 23 6 22 1 13 23 6 23 1 12 23 6 24 1 1 23 20 23 2 23 24 23 6 23 1 23 23 6 24 1 12 23 6 25 1 4 23 20 24 2 24 25 23 6 24 1 24 23 20 22 3 22 23 24 23 6 22 1 22 23 6 23 1 12 23 6 24 1 2 23 20 23 2 23 24 23 6 23 1 23 23 20 21 3 21 22 23 23 6 21 1 21 23 6 22 1 5 23 6 23 1 12 23 6 24 1 1 23 20 23 2 23 24 23 6 23 1 23 23 6 24 1 12 23 6 25 1 11 23 20 24 2 24 25 23 6 24 1 24 23 20 22 3 22 23 24 23 6 22 1 22 23 6 23 1 10 23 6 24 1 9 23 20 24 1 24 23 6 24 1 24 23 6 25 1 8 23 6 26 1 7 23 6 27 1 12 23 6 28 1 1 23 20 27 2 27 28 23 6 27 1 27 23 6 28 1 12 23 6 29 1 4 23 20 28 2 28 29 23 6 28 1 28 23 6 29 1 12 23 6 30 1 2 23 20 29 2 29 30 23 6 29 1 29 23 20 26 4 26 27 28 29 23 6 26 1 26 23 6 27 1 6 23 20 25 3 25 26 27 23 6 25 1 25 23 20 23 3 23 24 25 23 6 23 1 23 23 6 24 1 12 23 6 25 1 1 23 20 24 2 24 25 23 6 24 1 24 25 20 0 5 20 21 22 23 24 23 6 20 1 19 23 6 21 1 18 16 3 22 23 20 22 2 22 2 23 6 22 1 22 17 3 23 23 20 21 3 21 22 23 23 6 21 1 21 23 20 20 2 20 21 23 21 21 0 23 6 22 1 19 23 6 23 1 18 23 6 24 1 17 23 6 25 1 21 23 20 24 2 24 25 23 6 24 1 24 23 6 25 1 16 23 6 26 1 20 23 6 27 1 21 23 20 25 3 25 26 27 23 6 25 1 25 23 20 23 3 23 24 25 23 6 23 1 23 23 20 20 2 22 23 23 6 21 1 15 23 6 22 1 14 23 6 23 1 13 23 6 24 1 12 23 6 25 1 1 23 20 24 2 24 25 23 6 24 1 24 23 6 25 1 12 23 6 26 1 11 23 20 25 2 25 26 23 6 25 1 25 23 20 23 3 23 24 25 23 6 23 1 23 23 6 24 1 20 23 20 22 3 22 23 24 23 6 22 1 22 23 6 23 1 10 23 6 24 1 9 23 20 24 1 24 23 6 24 1 24 23 6 25 1 8 23 6 26 1 7 23 6 27 1 12 23 6 28 1 1 23 20 27 2 27 28 23 6 27 1 27 23 6 28 1 12 23 6 29 1 11 23 20 28 2 28 29 23 6 28 1 28 23 6 29 1 20 23 20 26 4 26 27 28 29 23 6 26 1 26 23 6 27 1 6 23 20 25 3 25 26 27 23 6 25 1 25 23 20 23 3 23 24 25 23 6 23 1 23 23 6 24 1 5 23 6 25 1 12 23 6 26 1 1 23 20 25 2 25 26 23 6 25 1 25 23 6 26 1 12 23 6 27 1 4 23 20 26 2 26 27 23 6 26 1 26 23 20 24 3 24 25 26 23 6 24 1 24 23 6 25 1 12 23 6 26 1 1 23 20 25 2 25 26 23 6 25 1 25 25 20 0 5 21 22 23 24 25 80 3 0 2 17 1 3 51 1 4 0 25 22 0 2 4 3) #(0 20 52 378 797) #(DEFSETF COERCE-TO-MACRO INSTALL-FUNCTION *SETF* REMPROP *CMP-SETF* LIST PUSH :COMPILE-TOPLEVEL EVAL-WHEN *SETF-LAMBDA* QUOTE GET SETF PROGN APPLY-ARG-ROTATE &REST LAMBDA FUNCTION SYMBOLP APPEND GENSYM APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LOAD-HELP #K(#(80 1 10 0 1 2 3 4 5 6 7 8 9 7 38 10 11 21 0 1 2 11 0 10 11 1 3 38 11 12 23 12 11 1 12 21 0 4 24 11 23 13 0 1 9 23 14 0 0 49 10 8 0 38 11 11 23 15 0 2 11 7 38 11 11 23 16 11 3 11 10 6 50 0 23 5 11 6 0 11 12 21 0 6 9 12 23 17 13 1 11 21 0 7 9 13 46 11 1 13 21 0 9 8 13 38 11 13 23 15 13 1 13 23 18 0 3 11 1 13 1 22 21 1 10 22 11 71 2 2 11 13 60 13 4 20 18 16 12 11 1 22 16 11 13 23 19 13 1 13 21 0 13 22 13 16 11 14 23 20 14 1 14 23 21 14 1 14 21 0 14 22 14 16 11 14 23 20 14 1 14 38 22 15 71 3 4 11 16 23 23 14 3 14 15 16 21 0 22 15 14 16 11 14 23 20 14 1 14 38 24 15 71 3 4 11 16 38 11 17 23 15 17 1 17 23 23 0 4 14 15 16 17 1 22 16 11 13 46 13 3 13 21 0 22 17 13 16 11 13 38 11 14 23 15 14 1 14 23 18 0 3 13 3 14 1 22 16 11 13 46 13 2 13 21 0 22 19 13 16 11 13 38 11 14 23 15 14 1 14 23 18 0 3 13 2 14 1 22 16 11 13 46 13 1 13 21 0 22 21 13 16 11 13 38 11 14 23 15 14 1 14 23 18 0 3 13 1 14 38 11 12 23 16 11 3 12 10 6 50 0 23 5 11 6 23 13 0 1 5 25 25 0 0 11 0 10) #(0 22 27 35 40 78 86 96 105 122 127 140 142 155 173 201 235 247 267 279 299 311 329 345 354) #(FUNCTION-DOCUMENTATION VARIABLE-DOCUMENTATION TYPE-DOCUMENTATION #(FUNCTION VARIABLE TYPE OBJECT) "done" *EOF* 0 T "loading in help file information - this will take a minute ..." NIL *HELP-LOADED* *HELP-STREAM* STREAMP PRINC FORCE-OUTPUT FILE-POSITION READ SYMBOLP %SET-GET BOUNDP SYMBOL-VALUE OBJECTP :INTERNAL-DOC SEND :DOCUMENTATION TERPRI) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DOCUMENTATION #K(#(80 3 6 0 1 2 3 4 5 3 23 6 0 0 60 2 7 5 4 3 2 1 0 8 9 1 6 46 1 6 9 1 6 46 1 5 9 1 6 46 1 4 9 1 6 46 1 3 9 23 7 10 1 9 21 0 7 8 10 38 8 11 23 9 10 1 11 1 9 0 8 10 21 0 10 11 10 38 8 11 23 10 0 2 11 9 38 8 11 23 11 9 1 11 23 12 10 1 9 21 0 12 13 10 11 0 9 11 0 8) #(0 22 27 33 39 45 49 59 69 72 77 94 104 107) #(FUNCTION-DOCUMENTATION VARIABLE-DOCUMENTATION TYPE-DOCUMENTATION SETF-DOCUMENTATION #(FUNCTION VARIABLE TYPE SETF) NIL LOAD-HELP NUMBERP *HELP-STREAM* STREAMP FILE-POSITION READ STRINGP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* DOCUMENTATION #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 4 11 1 2 3 4 5 6 7 8 9 10 11 11 23 12 15 1 14 23 12 16 1 3 23 12 17 1 13 23 12 18 1 12 23 12 19 1 11 23 12 20 1 2 23 12 21 1 10 23 12 22 1 9 23 13 21 2 21 22 23 12 21 1 21 23 13 19 3 19 20 21 23 12 19 1 19 23 12 20 1 1 23 13 18 3 18 19 20 23 12 18 1 18 23 13 17 2 17 18 23 12 17 1 17 23 12 18 1 8 23 12 19 1 12 23 12 20 1 11 23 12 21 1 2 23 12 22 1 10 23 12 23 1 7 23 13 22 2 22 23 23 12 22 1 22 23 13 20 3 20 21 22 23 12 20 1 20 23 12 21 1 1 23 13 19 3 19 20 21 23 12 19 1 19 23 13 18 2 18 19 23 12 18 1 18 23 12 19 1 6 23 12 20 1 12 23 12 21 1 11 23 12 22 1 2 23 12 23 1 10 23 12 24 1 5 23 13 23 2 23 24 23 12 23 1 23 23 13 21 3 21 22 23 23 12 21 1 21 23 12 22 1 1 23 13 20 3 20 21 22 23 12 20 1 20 23 13 19 2 19 20 23 12 19 1 19 23 12 20 1 12 23 12 21 1 12 23 12 22 1 11 23 12 23 1 2 23 12 24 1 10 23 12 25 1 4 23 13 24 2 24 25 23 12 24 1 24 23 13 22 3 22 23 24 23 12 22 1 22 23 12 23 1 1 23 13 21 3 21 22 23 23 12 21 1 21 23 13 20 2 20 21 23 12 20 1 20 25 13 0 6 15 16 17 18 19 20) #(0 16) #(APPLY-ARG-ROTATE SETF-DOCUMENTATION TYPE-DOCUMENTATION TYPE VARIABLE-DOCUMENTATION VARIABLE FUNCTION-DOCUMENTATION QUOTE GET SETF FUNCTION CASE LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* DOCUMENTATION REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(DOCUMENTATION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* FIRST #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 2 1 2 3 23 3 5 1 4 23 3 6 1 3 23 3 7 1 2 23 4 6 2 6 7 23 3 6 1 6 23 3 7 1 1 25 4 0 3 5 6 7) #(0 16) #(APPLY-ARG-ROTATE CAR SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* FIRST REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(FIRST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* SECOND #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 1 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* SECOND REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SECOND) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* THIRD #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 2 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* THIRD REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(THIRD) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* FOURTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 3 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* FOURTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(FOURTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* FIFTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 4 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* FIFTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(FIFTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* SIXTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 5 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* SIXTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SIXTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* SEVENTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 6 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* SEVENTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SEVENTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* EIGHTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 7 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* EIGHTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(EIGHTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* NINTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 8 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* NINTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(NINTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* TENTH #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 3 1 2 3 4 23 4 6 1 5 23 4 7 1 4 23 4 8 1 3 23 4 9 1 2 23 5 7 3 7 8 9 23 4 7 1 7 23 4 8 1 1 25 5 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE 9 NTH SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* TENTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(TENTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* REST #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 3 2 1 2 3 23 3 5 1 4 23 3 6 1 3 23 3 7 1 2 23 4 6 2 6 7 23 3 6 1 6 23 3 7 1 1 25 4 0 3 5 6 7) #(0 16) #(APPLY-ARG-ROTATE CDR SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* REST REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(REST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* %STRUCT-REF #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 4 1 1 4 23 2 5 1 4 23 2 6 1 2 23 2 7 1 3 23 2 8 1 1 25 3 0 4 5 6 7 8) #(0 16) #(APPLY-ARG-ROTATE %STRUCT-SET LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* %STRUCT-REF REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(%STRUCT-REF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-RM-AREF #K(#(80 4 0 1 23 0 4 1 1 6 4 2 3 0 57 0) #(0) #(COMPOUND-DATA-SEQ) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-RM-AREF *SETF* ROW-MAJOR-AREF %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* ROW-MAJOR-AREF REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(ROW-MAJOR-AREF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 0 0 3 3 2 1) #(0) #(%SET-GET *SETF* GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* GET REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(GET) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-SYMBOL-VALUE *SETF* SYMBOL-VALUE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SYMBOL-VALUE REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SYMBOL-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-SYMBOL-FUNCTION *SETF* SYMBOL-FUNCTION %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SYMBOL-FUNCTION REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SYMBOL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-SYMBOL-PLIST *SETF* SYMBOL-PLIST %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SYMBOL-PLIST REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SYMBOL-PLIST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-CAR *SETF* CAR %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* CAR REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CAR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-CDR *SETF* CDR %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* CDR REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CDR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-AREF *SETF* AREF %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* AREF REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(AREF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-GETHASH *SETF* GETHASH %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* GETHASH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(GETHASH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(SET-SELECT *SETF* SELECT %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SELECT REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SELECT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 0 25 2 0 3 2 1 2) #(0) #(*SETF* SLOT-VALUE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SLOT-VALUE REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SLOT-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-NTH *SETF* NTH %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* NTH REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(NTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-ELT *SETF* ELT %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* ELT REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(ELT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #(%SET-SVREF *SETF* SVREF %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF-LAMBDA* SVREF REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(SVREF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((*MODULES* PROVIDE REQUIRE PROBE-FILE) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*MODULES* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *MODULES* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*MODULES*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROVIDE #K(#(80 2 0 3 38 0 2 38 1 3 39 2 4 23 3 2 4 1 2 3 4 49 0 2 0 57 0) #(0) #(*MODULES* :TEST EQUAL ADJOIN) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #("SYSTEM" (*MODULE-PATH* CREATE-MODULE-PATH) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*MODULE-PATH* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *MODULE-PATH* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*MODULE-PATH*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REQUIRE #K(#(77 1 2 1 1 1 0 6 21 2 1 2 2 0 2 4 1 3 23 2 4 1 1 23 2 5 1 1 23 3 6 1 4 21 0 4 5 6 0 4 6 1 6 23 4 6 1 4 38 5 7 38 6 8 39 7 9 23 8 7 4 5 7 8 9 21 0 7 8 7 11 0 3 0 6 4 16 4 5 21 1 9 13 4 23 9 6 1 5 21 0 10 11 6 23 10 0 1 6 1 12 38 11 7 23 10 0 3 5 7 3 17 4 4 16 4 5 21 1 9 13 4 11 0 3) #(0 13 18 23 38 43 48 70 73 84 94 101 111 122) #(NIL #(%NOT-SUPPLIED) STRING LISTP LIST *MODULES* :TEST EQUAL MEMBER FIND-REQUIRE-FILE LOAD :IF-DOES-NOT-EXIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-REQUIRE-FILE #K(#(80 2 4 0 1 2 3 12 23 4 6 1 1 38 5 7 16 7 8 21 1 1 16 7 23 6 9 2 1 8 23 7 10 1 9 38 8 11 50 0 2 6 10 11 23 9 12 1 9 23 10 13 1 9 23 11 13 1 13 23 12 12 2 12 13 38 8 13 38 13 14 23 14 15 1 9 38 15 16 23 16 17 1 9 23 17 12 6 13 12 14 15 16 17 23 6 12 2 2 12 23 6 13 2 12 4 23 18 13 1 13 21 0 4 3 13 23 6 14 2 12 3 23 18 13 1 14 21 0 5 15 13 11 0 12 1 15 21 0 7 9 6 23 18 12 1 9 21 0 8 15 12 11 0 9 1 15 23 6 12 2 9 4 23 18 12 1 12 21 0 11 10 12 23 6 13 2 9 3 23 18 12 1 13 21 0 12 13 12 11 0 9 23 18 12 1 9 21 0 14 15 12 11 0 9 17 7 7 16 7 8 21 1 1 16 7 11 0 5) #(0 24 44 116 127 132 137 142 152 157 173 184 189 192 202 205 216) #("_autoidx" ".fsl" ".lsp" NIL PATHNAME-TYPE *MODULE-PATH* MERGE-PATHNAMES FILE-TYPE :DIRECTORY PATHNAME-DIRECTORY PATHNAME-NAME LIST APPEND :DEVICE PATHNAME-DEVICE :HOST PATHNAME-HOST MAKE-PATHNAME PROBE-FILE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-MODULE-PATH #K(#(80 1 2 0 1 4 38 2 3 23 3 3 2 3 2 38 4 4 38 2 5 23 3 5 2 5 1 38 4 6 23 5 5 2 5 6 25 6 0 3 3 4 5) #(0) #((:RELATIVE "Examples") (:RELATIVE) :DIRECTORY MAKE-PATHNAME *DEFAULT-PATH* MERGE-PATHNAMES LIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROBE-FILE #K(#(80 2 1 0 2 38 1 3 38 2 4 23 3 3 3 1 3 4 21 0 1 2 3 25 4 0 1 1 11 0 2) #(0 23 28) #(NIL :DIRECTION :PROBE OPEN TRUENAME) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((MATRIXP EQUALP Y-OR-N-P YES-OR-NO-P INCF DECF PUSH POP PUSHNEW REMF ROTATEF WITH-INPUT-FROM-STRING WITH-OUTPUT-TO-STRING WITH-OPEN-FILE WITH-OPEN-STREAM READ-FROM-STRING REALP TYPECASE) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MATRIXP #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 3 61 4 2 0 57 0 11 0 3) #(0 16 28) #(2 NIL ARRAYP ARRAY-RANK) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EQUALP #K(#(80 3 2 0 1 3 50 2 1 2 1 2 11 0 3 23 2 5 1 1 21 0 3 6 5 23 2 5 1 2 21 0 4 5 5 3 61 1 2 0 57 0 11 0 4 23 3 5 1 1 21 0 7 10 5 23 3 5 1 2 21 0 8 9 5 25 4 0 2 1 2 11 0 4 23 5 5 1 1 21 0 11 16 5 23 5 5 1 2 21 0 12 15 5 23 6 5 1 1 23 6 6 1 2 37 61 13 14 5 6 39 7 5 25 8 0 3 5 1 2 11 0 4 11 0 4 23 9 5 1 1 21 0 18 17 5 23 10 5 1 1 21 0 19 24 5 23 9 6 1 2 21 0 21 20 6 23 10 6 1 2 21 0 22 23 6 23 6 6 1 1 23 6 7 1 2 41 6 7 5 1 25 0 4 5 1 25 0 4 5 21 0 26 27 5 39 7 5 25 8 0 3 5 1 2 11 0 4) #(0 12 15 25 35 42 45 55 65 71 74 84 94 110 120 123 126 136 141 146 156 161 166 182 187 190 195 205) #(T NIL NUMBERP CHARACTERP CHAR-EQUAL LISTP LENGTH EQUALP EVERY ARRAYP STRINGP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(Y-OR-N-P #K(#(77 2 1 0 5 0 1 2 3 4 2 23 5 0 0 21 0 1 2 1 23 6 0 0 39 7 7 38 8 8 23 9 0 3 7 8 1 23 10 7 0 23 11 7 2 6 7 23 12 8 2 7 5 21 0 4 3 8 23 12 8 2 7 3 21 0 8 5 8 38 8 8 23 13 0 2 4 8 23 10 8 0 23 11 7 2 6 8 23 12 8 2 7 5 21 0 7 6 8 23 12 8 2 7 3 21 0 8 5 8 25 12 0 2 7 5) #(0 20 37 58 64 69 99 105 110) #(NIL "N" " Answer \"y\" or \"n\": " "Y" " " RESET-SYSTEM FRESH-LINE FORMAT *TERMINAL-IO* APPLY READ-LINE STRING-TRIM STRING-EQUAL PRINC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(YES-OR-NO-P #K(#(77 2 1 0 5 0 1 2 3 4 2 23 5 0 0 21 0 1 2 1 23 6 0 0 39 7 7 38 8 8 23 9 0 3 7 8 1 23 10 7 0 23 11 7 2 6 7 23 12 8 2 7 5 21 0 4 3 8 23 12 8 2 7 3 21 0 8 5 8 38 8 8 23 13 0 2 4 8 23 10 8 0 23 11 7 2 6 8 23 12 8 2 7 5 21 0 7 6 8 23 12 8 2 7 3 21 0 8 5 8 25 12 0 2 7 5) #(0 20 37 58 64 69 99 105 110) #(NIL "NO" " Answer \"yes\" or \"no\": " "YES" " " RESET-SYSTEM FRESH-LINE FORMAT *TERMINAL-IO* APPLY READ-LINE STRING-TRIM STRING-EQUAL PRINC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 6 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 11 3 4 5 6 7 8 9 10 11 12 13 18 16 1 14 71 2 2 1 15 38 14 16 71 2 0 1 17 23 15 16 2 16 17 71 2 2 16 16 38 16 17 71 2 0 1 18 23 15 17 2 17 18 71 2 2 17 17 38 17 18 71 2 0 1 19 23 15 18 2 18 19 71 2 2 18 18 0 16 19 0 19 20 21 0 3 2 20 0 4 19 21 0 4 5 18 23 18 20 0 23 19 21 1 10 23 19 22 1 20 23 19 23 1 15 23 20 22 2 22 23 23 19 22 1 22 23 19 23 1 14 23 19 24 1 12 23 19 25 1 20 23 19 26 1 19 23 19 27 1 17 23 20 24 4 24 25 26 27 23 19 24 1 24 23 20 23 2 23 24 23 19 23 1 23 23 20 22 2 22 23 23 19 22 1 22 23 19 23 1 9 23 19 24 1 11 23 20 24 2 24 2 23 19 24 1 24 23 19 25 1 8 23 19 26 1 18 23 19 27 1 7 23 19 28 1 6 23 19 29 1 20 23 20 28 2 28 29 23 19 28 1 28 23 19 29 1 6 23 19 30 1 5 23 19 31 1 14 23 20 30 2 30 31 23 19 30 1 30 23 20 29 2 29 30 23 19 29 1 29 23 20 27 3 27 28 29 23 19 27 1 27 23 20 25 3 25 26 27 23 19 25 1 25 23 20 23 3 23 24 25 23 19 23 1 23 25 20 0 3 21 22 23 23 19 20 1 13 23 19 21 1 14 23 19 22 1 12 23 19 23 1 15 23 19 24 1 19 23 19 25 1 17 23 20 22 4 22 23 24 25 23 19 22 1 22 23 20 21 2 21 22 23 19 21 1 21 23 20 21 1 21 23 19 21 1 21 23 19 22 1 11 23 20 22 2 22 2 23 19 22 1 22 25 20 0 3 20 21 22 80 3 0 2 17 1 3 51 1 4 0 25 21 0 2 4 3) #(0 20 113 116 121 348 435) #(WITH-INPUT-FROM-STRING COERCE-TO-MACRO INSTALL-FUNCTION NIL 0 GET-OUTPUT-STREAM-LIST LENGTH - SETF PROG1 LET* PROGN MAKE-STRING-INPUT-STREAM LET :START MEMBER :END :INDEX GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 6 16 1 7 23 7 8 1 6 23 7 9 1 7 23 7 10 1 5 23 8 10 1 10 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 23 8 9 1 9 23 7 9 1 9 23 7 10 1 4 23 8 10 2 10 2 23 7 10 1 10 23 7 11 1 3 23 7 12 1 7 23 8 11 2 11 12 23 7 11 1 11 25 8 0 4 8 9 10 11 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 124) #(WITH-OUTPUT-TO-STRING COERCE-TO-MACRO INSTALL-FUNCTION GET-OUTPUT-STREAM-STRING PROGN MAKE-STRING-OUTPUT-STREAM LET LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 6 3 4 5 6 7 8 10 16 1 9 17 1 10 23 9 11 1 8 23 9 12 1 9 23 9 13 1 7 23 10 13 2 13 10 23 9 13 1 13 23 10 12 2 12 13 23 9 12 1 12 23 10 12 1 12 23 9 12 1 12 23 9 13 1 6 23 9 14 1 5 23 10 14 2 14 2 23 9 14 1 14 23 9 15 1 4 23 9 16 1 9 23 9 17 1 3 23 9 18 1 9 23 10 17 2 17 18 23 9 17 1 17 23 10 15 3 15 16 17 23 9 15 1 15 23 10 13 3 13 14 15 23 9 13 1 13 25 10 0 3 11 12 13 80 3 0 2 17 1 3 51 1 4 0 25 11 0 2 4 3) #(0 20 168) #(WITH-OPEN-FILE COERCE-TO-MACRO INSTALL-FUNCTION CLOSE WHEN PROGN UNWIND-PROTECT OPEN LET LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 5 3 4 5 6 7 8 23 8 8 1 7 16 1 9 23 8 9 1 9 71 2 2 1 10 23 8 10 1 10 23 9 9 2 9 10 23 8 9 1 9 23 9 9 1 9 23 8 9 1 9 23 8 10 1 6 23 8 11 1 5 23 9 11 2 11 2 23 8 11 1 11 23 8 12 1 4 16 1 13 23 8 13 1 13 23 8 14 1 3 16 1 15 23 8 15 1 15 23 9 14 2 14 15 23 8 14 1 14 23 9 12 3 12 13 14 23 8 12 1 12 23 9 10 3 10 11 12 23 8 10 1 10 25 9 0 3 8 9 10 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 164) #(WITH-OPEN-STREAM COERCE-TO-MACRO INSTALL-FUNCTION CLOSE WHEN PROGN UNWIND-PROTECT LET LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(READ-FROM-STRING #K(#(77 3 2 2 2 0 0 1 0 0 1 23 3 7 3 1 4 5 25 4 0 3 7 2 3) #(0) #((0 NIL NIL) (:START :END :PRESERVE-WHITESPACE) #(T NIL) MAKE-STRING-INPUT-STREAM READ) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REALP #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 11 0 2 25 1 0 1 1) #(0 14 17) #(RATIONALP FLOATP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 6 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 2 3 4 4 23 5 5 1 4 23 5 6 1 1 23 5 7 1 3 16 2 8 23 5 8 1 8 23 6 7 2 7 8 23 5 7 1 7 23 6 5 3 5 6 7 17 2 6 20 5 6 0 57 0 77 2 2 0 5 7 8 9 10 11 8 23 12 8 1 7 51 1 9 1 8 23 5 10 1 6 23 5 11 1 8 23 5 12 1 1 23 6 11 2 11 12 23 5 11 1 11 23 6 11 1 11 23 5 11 1 11 23 5 12 1 5 23 13 13 1 2 71 2 3 13 13 23 14 13 2 13 4 21 0 3 4 13 23 15 14 1 2 23 16 14 2 9 14 23 13 15 1 2 71 2 1 15 15 20 3 15 15 23 5 15 1 15 23 6 13 2 14 15 1 5 23 16 13 2 9 2 23 6 12 2 12 13 23 5 12 1 12 25 6 0 3 10 11 12 80 3 0 2 17 1 3 51 2 4 0 25 17 0 2 4 3) #(0 20 76 159 197 203 221) #(TYPECASE COERCE-TO-MACRO INSTALL-FUNCTION QUOTE TYPEP LIST APPEND T (T OTHERWISE) COND LET "VAR" GENSYM LAST MEMBER BUTLAST MAPCAR APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PAIRLIS COPY-ALIST COPY-TREE SIGNUM) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PAIRLIS #K(#(77 1 3 1 0 0 1 39 1 4 23 2 4 3 4 1 2 25 3 0 2 4 3) #(0) #(#(NIL) CONS MAPCAR NCONC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-ALIST #K(#(80 2 1 0 3 21 0 1 5 1 16 1 3 21 1 2 3 3 71 2 3 1 4 71 2 1 1 5 20 4 5 3 1 4 16 1 3 17 1 4 23 1 4 1 4 20 3 4 0 57 0 11 0 2) #(0 10 18 34 37 51) #(NIL COPY-ALIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-TREE #K(#(80 2 0 2 21 1 1 2 1 16 1 2 23 0 2 1 2 17 1 3 23 0 3 1 3 20 2 3 0 57 0 11 0 1) #(0 9 31) #(COPY-TREE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIGNUM #K(#(80 2 0 1 23 0 2 1 1 21 0 1 4 2 23 1 2 1 1 21 0 2 3 2 11 0 1 23 2 2 1 1 2 47 1 2 0 57 0 39 3 2 25 4 0 2 2 1) #(0 14 24 27 39) #(NUMBERP ZEROP ABS SIGNUM MAP-ELEMENTS) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((LOGTEST CIS SINH COSH TANH ASINH ACOSH ATANH) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LOGTEST #K(#(80 3 2 0 1 1 23 2 5 2 1 2 23 3 5 1 5 21 0 1 2 5 11 0 3 11 0 4) #(0 22 25) #(NIL T LOGAND ZEROP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CIS #K(#(80 2 1 0 1 2 42 2 1 3 25 1 0 1 3) #(0) #(#C(0.0 1.0) EXP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SINH #K(#(80 2 1 0 2 23 1 3 1 1 61 45 1 4 23 1 4 1 4 2 45 3 4 3 2 47 3 2 0 57 0) #(0) #(2.0 EXP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COSH #K(#(80 2 1 0 2 23 1 3 1 1 61 45 1 4 23 1 4 1 4 2 43 3 4 3 2 47 3 2 0 57 0) #(0) #(2.0 EXP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(TANH #K(#(80 2 0 2 23 0 2 1 1 23 1 3 1 1 2 47 2 3 0 57 0) #(0) #(SINH COSH) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ASINH #K(#(80 2 1 0 1 2 42 1 1 3 2 43 2 3 3 23 1 3 1 3 2 43 1 3 3 25 2 0 1 3) #(0) #(1.0 SQRT LOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ACOSH #K(#(80 2 0 3 61 112 1 2 61 109 1 3 61 112 1 4 2 47 3 4 3 23 0 3 1 3 2 42 2 3 2 2 43 1 2 2 25 1 0 1 2) #(0) #(SQRT LOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ATANH #K(#(80 2 1 0 2 61 112 1 3 2 42 1 1 4 2 45 2 4 4 23 1 4 1 4 2 47 3 4 3 25 2 0 1 3) #(0) #(1.0 SQRT LOG) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((FILL ACONS) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FILL #K(#(77 3 3 0 0 0 2 1 1 0 2 0 4 6 0 6 7 21 0 2 1 7 23 3 6 1 1 0 3 7 37 71 4 3 7 6 8 1 7 2 0 61 112 7 7 37 71 4 3 7 6 11 0 1) #(0 22 27 36 51) #(NIL (0 NIL) (:START :END) LENGTH) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ACONS #K(#(80 4 0 1 20 1 2 4 20 4 3 0 57 0) #(0) #() 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((NUNION NINTERSECTION NSET-DIFFERENCE SET-EXCLUSIVE-OR NSET-EXCLUSIVE-OR) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NUNION UNION SYMBOL-FUNCTION %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NINTERSECTION INTERSECTION SYMBOL-FUNCTION %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NSET-DIFFERENCE SET-DIFFERENCE SYMBOL-FUNCTION %SET-SYMBOL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-EXCLUSIVE-OR #K(#(77 2 3 0 0 2 39 0 4 23 1 4 4 4 1 2 3 39 0 5 23 1 5 4 5 2 1 3 25 2 0 2 4 5) #(0) #(SET-DIFFERENCE APPLY APPEND) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NSET-EXCLUSIVE-OR #K(#(77 2 3 0 0 2 39 0 4 23 1 4 4 4 1 2 3 39 0 5 23 1 5 4 5 2 1 3 25 2 0 2 4 5) #(0) #(SET-DIFFERENCE APPLY NCONC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((SET-MACRO-CHARACTER GET-MACRO-CHARACTER) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-MACRO-CHARACTER #K(#(77 1 3 2 1 1 0 3 21 2 1 2 4 0 4 6 1 3 38 2 6 23 3 7 1 1 21 0 4 5 3 38 4 8 1 6 38 5 8 20 8 2 8 6 6 7 8 0 11 0 5) #(0 13 18 21 31 36 39) #(T #(NIL %NOT-SUPPLIED) *READTABLE* CHAR-INT :TMACRO :NMACRO) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-MACRO-CHARACTER #K(#(77 1 2 1 1 1 0 2 21 2 1 2 2 0 2 4 1 3 38 2 4 23 3 5 1 1 7 4 5 4 21 1 4 5 4 38 2 4 23 3 5 1 1 7 4 5 4 17 4 0 57 0 11 0 3) #(0 13 18 21 35 52) #(NIL #(%NOT-SUPPLIED) *READTABLE* CHAR-INT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((COPY-READTABLE READTABLEP SET-SYNTAX-FROM-CHAR) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 38 2 3 23 3 3 1 3 25 4 0 3 2 1 3) #(0) #(T *COMMON-LISP-READTABLE* *READTABLE* COPY-ARRAY MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*COMMON-LISP-READTABLE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-READTABLE #K(#(77 1 1 2 1 1 0 3 21 2 1 2 1 0 1 4 1 3 38 2 4 21 2 4 5 2 0 2 5 1 6 23 3 5 1 3 21 0 7 8 4 0 4 6 1 9 38 4 6 25 5 0 2 5 6) #(0 13 18 21 26 31 36 41 46 49) #(256 #(%NOT-SUPPLIED %NOT-SUPPLIED) *READTABLE* MAKE-ARRAY *COMMON-LISP-READTABLE* REPLACE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(READTABLEP #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 3 61 4 2 0 57 0 11 0 3) #(0 16 28) #(256 NIL VECTORP LENGTH) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-SYNTAX-FROM-CHAR #K(#(77 1 3 2 1 1 0 4 21 2 1 2 3 0 3 6 1 3 38 2 6 21 0 4 5 4 0 4 7 1 6 38 3 7 23 4 8 1 1 23 4 9 1 2 7 7 9 9 6 6 8 9 0 11 0 5) #(0 13 18 21 26 31 34) #(T #(%NOT-SUPPLIED NIL) *READTABLE* *COMMON-LISP-READTABLE* CHAR-INT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((SAVEFUN DEBUG NODEBUG) EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 27 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 11 23 30 29 1 28 23 30 30 1 27 23 30 31 1 26 23 30 32 1 25 23 30 33 1 24 23 31 32 2 32 33 23 30 32 1 32 23 30 33 1 23 23 30 34 1 25 23 30 35 1 1 23 31 34 2 34 35 23 30 34 1 34 23 31 33 2 33 34 23 30 33 1 33 23 30 34 1 22 23 31 31 4 31 32 33 34 23 30 31 1 31 23 31 30 2 30 31 23 30 30 1 30 23 30 31 1 21 23 30 32 1 20 23 30 33 1 19 23 30 34 1 25 23 30 35 1 1 23 31 34 2 34 35 23 30 34 1 34 23 31 33 2 33 34 23 30 33 1 33 23 31 32 2 32 33 23 30 32 1 32 23 31 31 2 31 32 23 30 31 1 31 23 30 32 1 18 23 30 33 1 17 23 30 34 1 27 23 30 35 1 16 23 30 36 1 15 23 31 33 4 33 34 35 36 23 30 33 1 33 23 31 32 2 32 33 23 30 32 1 32 23 31 30 3 30 31 32 23 30 30 1 30 23 30 31 1 14 23 30 32 1 18 23 30 33 1 13 23 30 34 1 12 23 30 35 1 11 23 30 36 1 10 23 30 37 1 9 23 30 38 1 21 23 31 37 2 37 38 23 30 37 1 37 23 30 38 1 25 23 30 39 1 8 23 31 38 2 38 39 23 30 38 1 38 23 31 36 3 36 37 38 23 30 36 1 36 23 30 37 1 25 23 30 38 1 7 23 31 37 2 37 38 23 30 37 1 37 23 30 38 1 25 23 30 39 1 6 23 31 38 2 38 39 23 30 38 1 38 23 31 35 4 35 36 37 38 23 30 35 1 35 23 30 36 1 12 23 30 37 1 25 23 30 38 1 1 23 31 37 2 37 38 23 30 37 1 37 23 30 38 1 5 23 30 39 1 21 23 31 38 2 38 39 23 30 38 1 38 23 31 36 3 36 37 38 23 30 36 1 36 23 31 34 3 34 35 36 23 30 34 1 34 23 30 35 1 18 23 31 33 3 33 34 35 23 30 33 1 33 23 30 34 1 4 23 30 35 1 18 23 31 34 2 34 35 23 30 34 1 34 23 30 35 1 27 23 31 32 4 32 33 34 35 23 30 32 1 32 23 30 33 1 3 23 30 34 1 2 23 31 33 2 33 34 23 30 33 1 33 23 31 31 3 31 32 33 23 30 31 1 31 25 31 0 3 29 30 31 80 3 0 2 17 1 3 51 1 4 0 25 32 0 2 4 3) #(0 20 589) #(SAVEFUN COERCE-TO-MACRO INSTALL-FUNCTION NIL T CLOSE CDR DEFMACRO DEFUN LAMBDA CAR EQ IF CONS PRINT COND :OUTPUT :DIRECTION OPEN FP SYMBOL-FUNCTION FUNCTION-LAMBDA-EXPRESSION FVAL ".lsp" SYMBOL-NAME STRING QUOTE CONCATENATE FNAME LET* LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DEBUG #K(#(80 1 1 0 0 49 1 1 0 57 0) #(0) #(T *BREAKENABLE*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NODEBUG #K(#(80 1 1 0 0 49 1 1 0 57 0) #(0) #(NIL *BREAKENABLE*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((DEFPACKAGE DO-SYMBOLS DO-EXTERNAL-SYMBOLS DO-ALL-SYMBOLS APROPOS APROPOS-LIST) EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 5 21 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 23 24 26 0 23 24 27 0 23 24 28 0 23 24 29 0 23 25 30 1 25 23 25 31 1 26 23 25 32 1 3 23 26 31 2 31 32 23 25 31 1 31 23 25 32 1 27 23 25 33 1 24 23 26 32 2 32 33 23 25 32 1 32 23 25 33 1 28 23 25 34 1 23 23 26 33 2 33 34 23 25 33 1 33 23 25 34 1 29 23 25 35 1 23 23 26 34 2 34 35 23 25 34 1 34 23 25 35 1 1 23 25 36 1 23 23 26 35 2 35 36 23 25 35 1 35 23 26 31 5 31 32 33 34 35 23 25 31 1 31 23 25 32 1 22 23 25 33 1 23 23 25 34 1 21 23 25 35 1 20 23 25 36 1 19 23 25 37 1 18 23 25 38 1 26 23 26 37 2 37 38 23 25 37 1 37 23 25 38 1 17 23 25 39 1 1 23 25 40 1 23 23 26 38 3 38 39 40 23 25 38 1 38 23 25 39 1 16 23 25 40 1 2 23 26 39 2 39 40 23 25 39 1 39 23 26 36 4 36 37 38 39 23 25 36 1 36 23 25 37 1 17 23 25 38 1 28 23 25 39 1 15 23 25 40 1 26 23 26 39 2 39 40 23 25 39 1 39 23 25 40 1 26 23 25 41 1 14 23 25 42 1 26 23 26 41 2 41 42 23 25 41 1 41 23 25 42 1 27 23 25 43 1 13 23 26 37 7 37 38 39 40 41 42 43 23 25 37 1 37 23 25 38 1 12 23 25 39 1 17 23 25 40 1 27 23 25 41 1 11 23 25 42 1 27 23 26 41 2 41 42 23 25 41 1 41 23 26 39 3 39 40 41 23 25 39 1 39 23 25 40 1 10 23 25 41 1 9 23 25 42 1 8 23 25 43 1 27 23 26 41 3 41 42 43 23 25 41 1 41 23 25 42 1 7 23 25 43 1 20 23 26 42 2 42 43 23 25 42 1 42 23 26 40 3 40 41 42 23 25 40 1 40 23 25 41 1 17 23 25 42 1 29 23 25 43 1 6 23 25 44 1 28 23 25 45 1 27 23 26 43 3 43 44 45 23 25 43 1 43 23 26 41 3 41 42 43 23 25 41 1 41 23 25 42 1 5 23 25 43 1 10 23 25 44 1 18 23 25 45 1 29 23 26 44 2 44 45 23 25 44 1 44 23 25 45 1 7 23 25 46 1 12 23 26 45 2 45 46 23 25 45 1 45 23 26 43 3 43 44 45 23 25 43 1 43 23 25 44 1 17 23 25 45 1 1 23 25 46 1 15 23 25 47 1 29 23 26 46 2 46 47 23 25 46 1 46 23 25 47 1 29 23 25 48 1 14 23 25 49 1 29 23 26 48 2 48 49 23 25 48 1 48 23 26 44 5 44 45 46 47 48 23 25 44 1 44 23 25 45 1 21 23 26 45 2 45 4 23 25 45 1 45 23 25 46 1 7 23 25 47 1 5 23 26 46 2 46 47 23 25 46 1 46 23 26 34 13 34 35 36 37 38 39 40 41 42 43 44 45 46 23 25 34 1 34 23 26 32 3 32 33 34 23 25 32 1 32 25 26 0 3 30 31 32 80 3 0 2 17 1 3 51 1 4 0 25 27 0 2 4 3) #(0 20 750) #(DO-SYMBOL-ARRAYS COERCE-TO-MACRO INSTALL-FUNCTION NEW-ITEM AREF GO 199 <= IF 1+ NEW-LIST -1 REST FIRST RETURN SETF NULL WHEN NEW-ARRAY TAGBODY BLOCK NIL 0 LET GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 5 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 9 3 4 5 6 7 8 9 10 11 14 23 12 12 0 23 12 13 0 23 12 14 0 23 13 15 1 11 23 13 16 1 12 71 2 2 1 17 21 0 2 3 17 71 2 2 1 17 1 4 0 3 17 23 13 17 1 17 23 14 16 2 16 17 23 13 16 1 16 23 13 17 1 13 23 13 18 1 10 23 13 19 1 12 23 14 18 2 18 19 23 13 18 1 18 23 14 17 2 17 18 23 13 17 1 17 23 13 18 1 14 23 13 19 1 9 23 13 20 1 8 23 13 21 1 12 23 13 22 1 7 23 14 20 3 20 21 22 23 13 20 1 20 23 13 21 1 6 23 13 22 1 5 23 13 23 1 8 23 14 22 2 22 23 23 13 22 1 22 23 13 23 1 9 23 13 24 1 12 23 13 25 1 13 23 14 23 3 23 24 25 23 13 23 1 23 23 14 21 3 21 22 23 23 13 21 1 21 23 14 19 3 19 20 21 23 13 19 1 19 23 14 18 2 18 19 23 13 18 1 18 23 14 16 3 16 17 18 23 13 16 1 16 23 13 17 1 4 16 1 18 23 13 18 1 18 71 3 4 1 19 23 13 19 1 19 23 13 20 1 14 23 13 21 1 2 23 14 17 5 17 18 19 20 21 23 13 17 1 17 25 14 0 3 15 16 17 80 3 0 2 17 1 3 51 1 4 0 25 15 0 2 4 3) #(0 20 67 74 77 321) #(DO-SYMBOLS COERCE-TO-MACRO INSTALL-FUNCTION *PACKAGE* DO-SYMBOL-ARRAYS FUNCTION MAPCAR NIL PACKAGE-OBARRAY CONS PACKAGE-USE-LIST LET* GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 5 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 5 3 4 5 6 7 9 23 8 8 0 23 8 9 0 23 6 10 1 7 23 6 11 1 8 71 2 2 1 12 21 0 2 3 12 71 2 2 1 12 1 4 0 3 12 23 6 12 1 12 23 9 11 2 11 12 23 6 11 1 11 23 6 12 1 9 23 6 13 1 6 23 6 14 1 5 23 6 15 1 8 23 9 14 2 14 15 23 6 14 1 14 23 9 13 2 13 14 23 6 13 1 13 23 9 12 2 12 13 23 6 12 1 12 23 9 11 2 11 12 23 6 11 1 11 23 6 12 1 4 16 1 13 23 6 13 1 13 71 3 4 1 14 23 6 14 1 14 23 6 15 1 9 23 6 16 1 2 23 9 12 5 12 13 14 15 16 23 6 12 1 12 25 9 0 3 10 11 12 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 59 66 69 203) #(DO-EXTERNAL-SYMBOLS COERCE-TO-MACRO INSTALL-FUNCTION *PACKAGE* DO-SYMBOL-ARRAYS PACKAGE-OBARRAY LIST LET* GENSYM APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 8 3 4 5 6 7 8 9 10 11 23 11 11 0 23 11 12 0 23 12 13 1 10 23 12 14 1 11 23 12 15 1 9 23 13 15 1 15 23 12 15 1 15 23 13 14 2 14 15 23 12 14 1 14 23 12 15 1 12 23 12 16 1 8 23 13 15 2 15 16 23 12 15 1 15 23 13 14 2 14 15 23 12 14 1 14 23 12 15 1 7 23 12 16 1 6 23 12 17 1 11 23 13 16 2 16 17 23 12 16 1 16 23 12 17 1 5 23 12 18 1 4 23 12 19 1 6 23 13 18 2 18 19 23 12 18 1 18 23 12 19 1 12 23 13 17 3 17 18 19 23 12 17 1 17 23 12 18 1 5 23 12 19 1 4 23 12 20 1 6 23 12 21 1 8 23 13 19 3 19 20 21 23 12 19 1 19 23 12 20 1 12 23 13 18 3 18 19 20 23 12 18 1 18 23 13 15 4 15 16 17 18 23 12 15 1 15 23 12 16 1 3 16 1 17 23 12 17 1 17 71 2 2 1 18 23 12 18 1 18 23 12 19 1 12 23 12 20 1 2 23 13 16 5 16 17 18 19 20 23 12 16 1 16 25 13 0 4 13 14 15 16 80 3 0 2 17 1 3 51 1 4 0 25 14 0 2 4 3) #(0 20 296) #(DO-ALL-SYMBOLS COERCE-TO-MACRO INSTALL-FUNCTION DO-SYMBOL-ARRAYS PACKAGE-OBARRAY PUSH P DOLIST NIL LIST-ALL-PACKAGES LET* GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 6 3 4 5 6 7 8 6 23 9 9 1 8 23 9 10 1 7 23 9 11 1 6 23 9 12 1 5 23 10 10 3 10 11 12 23 9 10 1 10 23 9 11 1 4 23 9 12 1 3 23 9 13 1 1 23 10 12 2 12 13 23 9 12 1 12 23 9 13 1 3 23 9 14 1 2 23 10 13 2 13 14 23 9 13 1 13 23 10 11 3 11 12 13 23 9 11 1 11 25 10 0 3 9 10 11 80 3 0 2 17 1 3 51 1 4 0 25 11 0 2 4 3) #(0 20 130) #(DEFPACKAGE COERCE-TO-MACRO INSTALL-FUNCTION QUOTE DO-DEFPACKAGE :EXECUTE :LOAD-TOPLEVEL :COMPILE-TOPLEVEL EVAL-WHEN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-DEFPACKAGE #K(#(80 3 4 0 1 2 3 18 23 4 7 1 1 0 6 8 0 7 9 0 2 10 16 10 11 21 1 1 4 10 16 11 12 38 5 13 50 0 2 3 12 13 17 11 14 23 6 8 2 14 8 17 10 10 16 10 11 21 1 1 4 10 0 9 12 21 0 5 6 12 39 7 13 23 8 14 1 9 23 6 14 2 8 14 23 9 13 2 13 14 38 10 14 39 11 15 23 12 13 3 13 14 15 23 13 0 3 9 1 13 1 7 38 5 13 39 7 14 23 9 14 2 14 8 38 10 15 39 11 16 23 12 14 3 14 15 16 23 14 9 3 1 13 14 0 2 12 16 12 13 21 1 8 17 12 16 13 14 60 14 3 15 10 9 1 16 71 2 2 13 15 23 4 15 1 15 71 2 0 13 16 16 16 17 21 1 11 16 16 23 7 18 1 17 23 15 0 2 18 15 59 2 18 19 21 0 12 13 19 23 16 0 2 18 9 1 14 23 7 20 1 17 23 17 0 3 4 20 15 17 16 16 16 16 17 21 1 11 16 16 39 7 15 17 13 16 23 9 15 2 15 16 23 18 0 2 15 9 17 12 12 16 12 13 21 1 8 17 12 0 2 14 16 14 15 21 1 18 21 14 16 15 16 38 19 17 50 0 19 20 16 17 39 7 18 17 15 19 23 9 18 2 18 19 23 20 0 2 18 9 17 14 14 16 14 15 21 1 18 21 14 0 2 16 16 16 17 21 1 22 32 16 16 17 18 60 18 5 29 24 23 1 31 71 2 2 17 19 23 4 19 1 19 71 2 0 17 20 16 20 21 21 1 25 31 20 23 7 22 1 21 23 15 0 2 22 19 59 2 22 23 21 0 26 27 23 23 21 0 2 22 9 1 28 23 7 24 1 21 23 17 0 3 4 24 19 17 20 20 16 20 21 21 1 25 31 20 17 17 19 16 19 20 21 1 30 31 19 23 7 21 1 20 23 22 0 2 21 9 17 19 19 16 19 20 21 1 30 31 19 17 16 16 16 16 17 21 1 22 32 16 0 2 18 16 18 19 21 1 33 37 18 16 19 20 38 23 21 50 0 34 36 20 21 17 19 22 16 22 23 21 1 35 36 22 23 7 24 1 23 23 22 24 2 24 9 23 24 0 2 24 9 17 22 22 16 22 23 21 1 35 36 22 17 18 18 16 18 19 21 1 33 37 18 11 0 9) #(0 30 42 51 62 70 112 144 155 164 166 189 209 217 229 240 258 269 280 292 310 321 332 341 343 366 386 394 406 417 428 450 461 472 484 495 523 534) #(#(:SHADOW :SHADOWING-IMPORT-FROM) "no symbol named ~s in package ~s" #(:INTERN :IMPORT-FROM) NIL FIND-PACKAGE :NICKNAMES APPEND STRING PACKAGE-NICKNAMES MAPCAR :TEST STRING= REMOVE-DUPLICATES RENAME-PACKAGE MAKE-PACKAGE FIND-SYMBOL SHADOWING-IMPORT ERROR SHADOW :USE USE-PACKAGE IMPORT INTERN :EXPORT EXPORT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(APROPOS #K(#(77 1 2 1 6 6 0 1 2 3 4 5 10 21 0 1 10 2 23 7 9 1 2 23 8 10 2 2 8 39 8 11 20 2 9 12 23 9 11 2 11 12 20 10 11 9 0 8 10 0 8 11 0 7 12 0 8 13 0 9 14 21 0 3 4 14 16 14 13 17 14 14 0 3 12 1 5 0 8 10 1 21 61 112 12 12 37 76 2 6 4 12 7 13 12 11 21 0 8 5 11 16 11 10 17 11 11 23 10 15 2 1 10 21 0 9 7 15 23 11 0 3 6 5 10 1 7 23 12 9 0 0 8 10 0 9 11 16 11 12 21 1 11 12 11 23 8 13 1 12 20 13 10 10 23 8 13 2 12 8 20 13 10 10 17 11 11 16 11 12 21 1 11 12 11 0 8 13 0 8 14 0 7 15 0 8 16 0 10 17 21 0 14 15 17 16 17 16 17 17 17 0 3 15 1 16 0 8 13 1 21 61 112 15 15 37 76 13 17 4 15 7 16 15 14 21 0 19 16 14 16 14 13 17 14 14 23 10 18 2 1 13 21 0 20 18 18 23 11 0 3 6 5 13 1 18 13 0 0) #(0 18 61 66 77 82 92 96 101 118 127 145 175 190 195 206 211 221 225 230 247 256) #(-1 199 "~s~%" T 0 NIL #(NIL) PACKAGE-USE-LIST PACKAGE-OBARRAY MAPCAR STRING-SEARCH FORMAT LIST-ALL-PACKAGES) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(APROPOS-LIST #K(#(77 1 2 1 4 4 0 1 2 3 11 0 6 7 21 0 1 10 2 23 5 8 1 2 23 6 9 2 2 6 39 6 10 20 2 8 11 23 7 10 2 10 11 20 9 10 8 0 6 9 0 6 10 0 5 11 0 6 12 0 8 13 21 0 3 4 13 16 13 12 17 13 13 0 3 11 1 5 0 6 9 11 0 7 61 112 11 11 37 76 2 6 4 11 7 12 11 10 21 0 8 5 10 16 10 9 17 10 10 23 8 14 2 1 9 21 0 9 7 14 20 9 7 7 1 7 23 9 8 0 0 6 9 0 8 10 16 10 11 21 1 11 12 10 23 6 12 1 11 20 12 9 9 23 6 12 2 11 6 20 12 9 9 17 10 10 16 10 11 21 1 11 12 10 0 6 12 0 6 13 0 5 14 0 6 15 0 9 16 21 0 14 15 16 16 16 15 17 16 16 0 3 14 1 16 0 6 12 11 0 7 61 112 14 14 37 76 13 17 4 14 7 15 14 13 21 0 19 16 13 16 13 12 17 13 13 23 8 17 2 1 12 21 0 20 18 17 20 12 7 7 1 18) #(0 19 62 67 78 84 94 98 103 120 126 144 174 189 194 205 211 221 225 230 247) #(-1 199 0 NIL #(NIL) PACKAGE-USE-LIST PACKAGE-OBARRAY MAPCAR STRING-SEARCH LIST-ALL-PACKAGES) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((VALUES-LIST MULTIPLE-VALUE-LIST MULTIPLE-VALUE-BIND MULTIPLE-VALUE-SETQ) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VALUES-LIST #K(#(80 2 0 1 39 0 2 25 1 0 2 2 1) #(0) #(VALUES APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 3 3 4 5 3 23 3 5 1 4 23 3 6 1 3 23 3 7 1 2 23 6 6 2 6 7 23 3 6 1 6 23 3 7 1 1 25 6 0 3 5 6 7 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 65) #(MULTIPLE-VALUE-LIST COERCE-TO-MACRO INSTALL-FUNCTION LIST FUNCTION MULTIPLE-VALUE-CALL APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 7 3 4 5 6 7 8 9 8 23 10 11 0 23 11 12 1 10 23 11 13 1 9 23 11 14 1 8 23 11 15 1 7 23 11 16 1 6 23 11 17 1 11 23 12 15 4 15 1 16 17 23 11 15 1 15 23 11 16 1 5 23 11 17 1 4 23 11 18 1 11 23 12 17 2 17 18 23 11 17 1 17 23 12 16 2 16 17 23 11 16 1 16 23 12 14 4 14 15 16 3 23 11 14 1 14 23 12 13 2 13 14 23 11 13 1 13 23 11 14 1 2 25 12 0 3 12 13 14 80 3 0 2 17 1 3 51 1 4 0 25 13 0 2 4 3) #(0 20 153) #(MULTIPLE-VALUE-BIND COERCE-TO-MACRO INSTALL-FUNCTION IGNORE DECLARE &REST &OPTIONAL LAMBDA FUNCTION MULTIPLE-VALUE-CALL GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 6 2 0 23 1 2 1 2 25 2 0 2 1 2 80 4 0 1 35 1 4 20 3 4 4 36 1 4 0 35 1 4 20 2 4 4 36 1 4 0 57 0 80 2 1 3 0 25 4 0 1 2 80 3 3 5 6 7 7 51 2 6 0 23 8 6 2 6 1 34 5 7 51 1 8 1 7 23 9 0 3 8 1 6 0 6 8 21 0 5 4 8 23 4 9 0 20 9 6 6 23 10 8 1 4 23 10 9 1 6 23 10 10 1 2 23 10 11 1 3 35 7 12 23 11 11 2 11 12 23 10 11 1 11 16 6 12 23 10 12 1 12 25 11 0 5 8 9 10 11 12 80 3 0 2 17 1 3 51 3 4 0 25 12 0 2 4 3) #(0 20 48 58 98 106 157) #(MULTIPLE-VALUE-SETQ COERCE-TO-MACRO INSTALL-FUNCTION "V" GENSYM SETQ MULTIPLE-VALUE-BIND NIL MAPCAR MAPC LIST APPEND APPLY) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 1 2 4 25 4 0 1 1 11 0 2) #(0 17 22) #(SAVE NIL "SAVE" FIND-SYMBOL UNEXPORT) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 1 2 4 25 4 0 1 1 11 0 2) #(0 17 22) #(RESTORE NIL "RESTORE" FIND-SYMBOL UNEXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((SAVE-WORKSPACE ADD-EXIT-FUNCTION) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAVE-WORKSPACE #K(#(80 2 7 0 1 2 1 3 4 5 10 38 6 9 21 1 2 11 9 38 6 9 16 9 9 38 6 10 17 10 10 49 6 10 0 52 8 3 10 11 1 1 34 7 12 54 4 13 14 0 57 10 38 7 15 69 6 5 1 6 70 1 10 49 7 15 0 51 14 17 2 14 12 23 8 17 2 4 17 23 8 17 1 17 38 7 18 23 9 0 2 17 18 72 9 17 3 58 17 21 0 7 8 17 16 17 17 14 17 1 5 23 2 0 1 2 1 5 39 8 0 31 9 0 0 53 11 35 12 15 12 2 7 15 53 11 38 10 9 23 11 9 1 9 16 9 10 21 1 12 13 9 71 3 4 10 11 38 12 12 23 13 0 2 11 12 17 9 9 16 9 10 21 1 12 13 9 23 14 0 1 1 25 15 0 0 80 4 0 0 36 2 3 0 55 1 10) #(0 11 19 42 52 60 63 104 111 118 127 136 152 177 186) #("stack overflow" T ERROR (*ACTIVE-HANDLERS*) NIL #:BLOCK9493 *EXIT-FUNCTIONS* *ACTIVE-HANDLERS* LIST PUSH-CONDITION-HANDLERS *HARDWARE-OBJECTS* COPY-LIST :REMOVE SEND SAVE EXIT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-EXIT-FUNCTION #K(#(80 2 0 1 38 0 2 20 1 2 2 49 0 2 0 57 0) #(0) #(*EXIT-FUNCTIONS*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((DECLARE PROCLAIM SPECIAL) EXPORT) 0 NIL)
#K(#(80 1 1 0 1 51 8 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 1 0 3 3 4 5 3 38 6 5 21 0 2 7 5 0 1 5 16 5 6 21 1 3 6 5 16 6 7 50 0 4 5 7 3 25 7 0 1 2 17 5 5 16 5 6 21 1 3 6 5 11 0 4 11 0 4 80 3 0 2 17 1 3 51 1 4 0 25 8 0 2 4 3) #(0 20 37 48 57 62 73 76 79) #(DECLARE COERCE-TO-MACRO INSTALL-FUNCTION "special declarations are not supported" SPECIAL NIL *DISPLACE-MACROS* WARN APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROCLAIM #K(#(80 2 2 0 1 2 16 1 4 50 0 1 4 4 3 17 1 4 16 4 5 21 1 2 3 4 23 2 0 1 5 17 4 4 16 4 5 21 1 2 3 4 11 0 2 11 0 2) #(0 15 26 42 45) #(NIL SPECIAL MARK-AS-SPECIAL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((WRITE WRITE-STRING WRITE-LINE FINISH-OUTPUT CLEAR-OUTPUT *PRINT-PRETTY* *PRINT-CIRCLE* *PRINT-RADIX* *PRINT-BASE* *PRINT-ARRAY* *READ-BASE* WRITE-TO-STRING PRIN1-TO-STRING PRINC-TO-STRING) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PRINT-PRETTY* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(NIL *PRINT-PRETTY* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PRINT-PRETTY*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PRINT-CIRCLE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(NIL *PRINT-CIRCLE* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PRINT-CIRCLE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PRINT-RADIX* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(NIL *PRINT-RADIX* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PRINT-RADIX*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PRINT-BASE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(10 *PRINT-BASE* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PRINT-BASE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PRINT-ARRAY* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(T *PRINT-ARRAY* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PRINT-ARRAY*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*READ-BASE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(10 *READ-BASE* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*READ-BASE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(WRITE #K(#(77 3 2 0 0 0 15 14 14 0 1 2 3 4 5 6 7 8 9 10 11 12 13 24 21 2 1 2 2 0 2 28 1 3 38 16 28 69 27 26 1 5 70 57 0 49 16 28 0 21 2 6 7 3 0 3 30 1 8 38 17 30 69 25 26 1 10 70 1 4 49 17 30 0 21 2 11 12 4 0 4 32 1 13 38 18 32 69 24 26 1 15 70 1 9 49 18 32 0 21 2 16 17 5 0 5 34 1 18 38 19 34 69 23 26 1 20 70 1 14 49 19 34 0 21 2 21 22 6 0 6 36 1 23 38 20 36 69 22 26 1 25 70 1 19 49 20 36 0 21 2 26 27 7 0 7 38 1 28 38 21 38 69 21 26 1 30 70 1 24 49 21 38 0 21 2 31 32 8 0 8 40 1 33 38 22 40 69 20 26 1 35 70 1 29 49 22 40 0 21 2 36 37 9 0 9 42 1 38 38 23 42 69 19 26 1 40 70 1 34 49 23 42 0 21 2 41 42 10 0 10 44 1 43 38 24 44 69 18 26 1 45 70 1 39 49 24 44 0 21 2 46 47 11 0 11 46 1 48 38 25 46 69 17 26 1 50 70 1 44 49 25 46 0 21 2 51 52 12 0 12 48 1 53 38 26 48 69 16 26 1 55 70 1 49 49 26 48 0 21 2 56 57 13 0 13 50 1 58 38 27 50 38 16 51 21 0 59 60 51 0 14 51 1 61 0 15 51 23 28 0 3 50 51 1 10 1 1 54) #(0 29 34 37 42 45 54 59 62 67 70 79 84 87 92 95 104 109 112 117 120 129 134 137 142 145 154 159 162 167 170 179 184 187 192 195 204 209 212 217 220 229 234 237 242 245 254 259 262 267 270 279 284 287 292 295 304 309 312 320 325 328) #("~s" "~a" (*PRINT-PRETTY*) (*PRINT-ARRAY*) (*PRINT-BASE*) (*PRINT-RADIX*) (*PRINT-CIRCLE*) (*PRINT-CASE*) (*PRINT-LEVEL*) (*PRINT-LENGTH*) (*PRINT-READABLY*) (*PRINT-GENSYM*) T (*PRINT-ESCAPE*) (%NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED %NOT-SUPPLIED) (:ESCAPE :GENSYM :READABLY :LENGTH :LEVEL :CASE :CIRCLE :RADIX :BASE :ARRAY :PRETTY :STREAM) *PRINT-ESCAPE* *PRINT-GENSYM* *PRINT-READABLY* *PRINT-LENGTH* *PRINT-LEVEL* *PRINT-CASE* *PRINT-CIRCLE* *PRINT-RADIX* *PRINT-BASE* *PRINT-ARRAY* *PRINT-PRETTY* *STANDARD-OUTPUT* FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(WRITE-STRING #K(#(77 3 2 1 3 0 0 2 1 1 0 2 21 2 1 2 2 0 2 6 1 3 38 4 6 23 5 7 3 1 3 4 23 6 0 3 6 5 7 11 0 1) #(0 17 22 25) #("~a" (0 NIL) (:START :END) #(%NOT-SUPPLIED) *STANDARD-OUTPUT* SUBSEQ FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(WRITE-LINE #K(#(77 3 2 1 3 0 0 2 1 1 0 2 21 2 1 2 2 0 2 6 1 3 38 4 6 23 5 7 3 1 3 4 23 6 0 3 6 5 7 11 0 1) #(0 17 22 25) #("~a~%" (0 NIL) (:START :END) #(%NOT-SUPPLIED) *STANDARD-OUTPUT* SUBSEQ FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FINISH-OUTPUT #K(#(77 1 1 1 0 0 1 21 2 1 2 1 0 1 2 1 3 38 1 2 25 2 0 1 2) #(0 12 17 20) #(#(%NOT-SUPPLIED) *STANDARD-OUTPUT* FORCE-OUTPUT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CLEAR-OUTPUT #K(#(77 1 1 1 0 0 1 21 2 1 2 1 0 1 2 1 3 38 1 2 25 2 0 1 2) #(0 12 17 20) #(#(%NOT-SUPPLIED) *STANDARD-OUTPUT* FORCE-OUTPUT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(WRITE-TO-STRING #K(#(77 2 2 0 0 3 23 0 3 0 39 1 4 38 2 5 23 3 0 5 4 1 5 3 2 25 4 0 1 3) #(0) #(MAKE-STRING-OUTPUT-STREAM WRITE :STREAM APPLY GET-OUTPUT-STREAM-STRING) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRIN1-TO-STRING #K(#(80 2 2 0 1 0 25 2 0 3 3 2 1) #(0) #("~s" NIL FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRINC-TO-STRING #K(#(80 2 2 0 1 0 25 2 0 3 3 2 1) #(0) #("~a" NIL FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((KEYWORDP SCHAR NRECONC) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(*SETF-LAMBDA* CHAR #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 4 2 1 2 4 23 3 6 1 5 23 3 7 1 4 23 3 8 1 2 23 3 9 1 3 23 4 7 3 7 8 9 23 3 7 1 7 23 3 8 1 1 25 4 0 3 6 7 8) #(0 16) #(APPLY-ARG-ROTATE AREF SETF LIST APPEND) 0 NIL) BYTE-CODE-CLOSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(*SETF* CHAR REMPROP) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CHAR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(KEYWORDP #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 23 4 5 1 2 40 4 5 0 57 0 11 0 3) #(0 16 32) #("KEYWORD" NIL SYMBOLP SYMBOL-PACKAGE FIND-PACKAGE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SCHAR CHAR %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NRECONC #K(#(80 3 0 1 23 0 3 1 1 25 1 0 2 3 2) #(0) #(NREVERSE NCONC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((DESCRIBE SVREF LAMBDA-LIST-KEYWORDS GET-PROPERTIES) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DESCRIBE #K(#(77 1 2 1 1 1 0 1 23 2 4 1 1 25 3 0 4 2 3 1 4) #(0) #("~&~s - ~a~%" #(T) TYPE-OF FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SVREF AREF %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #((&OPTIONAL &REST &KEY &ALLOW-OTHER-KEYS &AUX &WHOLE &ENVIRONMENT &BODY) T LAMBDA-LIST-KEYWORDS MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(LAMBDA-LIST-KEYWORDS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-PROPERTIES #K(#(80 3 2 0 1 4 20 4 4 5 0 2 6 16 6 7 21 1 1 4 6 23 2 8 2 1 7 50 0 2 3 8 5 17 6 6 16 6 7 21 1 1 4 6 13 0 3 7 8 3 13 0 3 4 4 4) #(0 21 33 44 50) #(T NIL GETF) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PARSE-INTEGER COMPILED-FUNCTION-P PACKAGEP GENTEMP BIT-VECTOR-P) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PARSE-INTEGER #K(#(77 3 2 0 0 0 1 0 0 1 23 2 6 3 1 2 3 25 3 0 1 6) #(0) #((0 NIL NIL NIL) (:START :END :RADIX :JUNK-ALLOWED) SUBSEQ READ-FROM-STRING) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPILED-FUNCTION-P #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #((OR SUBR BYTE-CODE-CLOSURE) TYPEP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PACKAGEP #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(PACKAGE TYPEP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*GENTEMP-COUNTER* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 1 2 4 11 0 1 25 4 0 2 3 2) #(0 17 20) #(NIL -1 *GENTEMP-COUNTER* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*GENTEMP-COUNTER*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENTEMP #K(#(77 1 1 2 3 3 0 1 2 3 21 2 1 2 2 0 2 6 1 3 38 4 6 38 5 7 2 43 7 5 7 49 5 7 0 38 5 7 23 6 7 4 4 3 1 7 23 7 8 2 7 6 21 0 3 4 8 25 8 0 2 7 6) #(0 15 20 23 57) #("~a~d" NIL 1 #("T" %NOT-SUPPLIED) *PACKAGE* *GENTEMP-COUNTER* FORMAT FIND-SYMBOL INTERN) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BIT-VECTOR-P #K(#(80 2 1 0 0 11 0 2) #(0) #(NIL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(DESTRUCTURING-BIND EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DESTRUCTURING-ARGLIST-P #K(#(80 2 0 1 51 1 2 0 23 0 2 2 2 1 43 2 0 57 0 80 2 0 1 38 1 2 23 2 2 2 1 2 21 0 2 3 2 11 0 2 43 1 0 57 0) #(0 19 37 40) #(FIND-IF LAMBDA-LIST-KEYWORDS MEMBER) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DO-DESTRUCTURE #K(#(80 4 12 0 1 2 3 4 5 6 7 8 9 10 11 11 23 12 16 1 1 16 16 17 21 0 1 9 16 23 13 18 1 16 21 0 2 8 18 21 1 3 4 17 23 14 18 0 23 15 19 1 4 23 15 20 1 18 23 15 21 1 2 23 16 20 2 20 21 23 15 20 1 20 23 16 20 1 20 23 15 20 1 20 23 15 21 1 6 23 15 22 1 18 23 16 21 2 21 22 17 16 22 23 15 23 1 5 23 15 24 1 18 23 16 23 2 23 24 23 17 22 3 22 23 3 23 15 22 1 22 23 17 21 3 17 21 22 23 15 21 1 21 25 16 0 3 19 20 21 23 18 18 1 17 21 0 5 7 18 21 0 6 7 17 23 14 19 0 23 15 20 1 8 23 15 21 1 19 23 15 22 1 2 23 16 21 2 21 22 23 15 21 1 21 23 15 22 1 17 23 15 23 1 15 23 15 24 1 14 23 15 25 1 19 23 15 26 1 7 23 16 24 3 24 25 26 23 15 24 1 24 23 15 25 1 6 23 15 26 1 19 23 16 25 2 25 26 23 15 25 1 25 23 16 23 3 23 24 25 23 15 23 1 23 23 16 22 2 22 23 23 15 22 1 22 23 16 21 2 21 22 23 15 21 1 21 17 16 22 23 15 23 1 5 23 15 24 1 19 23 16 23 2 23 24 23 17 22 3 22 23 3 23 15 22 1 22 25 16 0 3 20 21 22 25 19 0 1 9 23 15 17 1 12 23 15 18 1 11 23 15 19 1 10 23 15 20 1 16 23 16 19 3 19 20 3 23 15 19 1 19 23 16 18 2 18 19 23 15 18 1 18 23 15 19 1 2 25 16 0 3 17 18 19 23 15 16 1 15 23 15 17 1 14 23 15 18 1 2 23 15 19 1 13 23 16 17 3 17 18 19 23 15 17 1 17 25 16 0 3 16 17 3) #(0 29 39 44 150 160 165 325 330 385) #(LET REST FIRST NIL LET* "bad formal argument list" LAMBDA FUNCTION APPLY T DESTRUCTURE-CHECK-ARG PROGN DESTRUCTURE-FIX-ARGLIST DESTRUCTURING-ARGLIST-P GENSYM LIST APPEND DO-DESTRUCTURE SYMBOLP ERROR) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DESTRUCTURE-CHECK-ARG #K(#(80 3 3 0 1 2 0 21 0 1 3 2 21 0 2 5 1 23 3 0 1 3 1 5 21 1 5 4 1 23 3 0 1 5 11 0 1) #(0 12 17 24 29 34) #("too many arguments" NIL "too few arguments" ERROR) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DESTRUCTURE-FIX-ARGLIST #K(#(80 2 3 0 1 2 4 0 1 5 23 3 5 1 5 23 4 6 1 5 17 6 7 21 0 1 2 7 17 6 8 23 5 8 2 2 8 19 6 8 0 23 6 6 2 4 5 21 0 3 4 6 47 6 5 2 0 11 0 5) #(0 28 41 52 57) #(&REST NIL &BODY COPY-LIST LAST LIST POSITION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 0 1 23 3 4 1 1 25 4 0 3 4 2 3 80 3 0 2 17 1 3 51 1 4 0 25 5 0 2 4 3) #(0 20 38) #(DESTRUCTURING-BIND COERCE-TO-MACRO INSTALL-FUNCTION DESTRUCTURE-FIX-ARGLIST DO-DESTRUCTURE APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 0 0 25 3 0 3 1 2 3 80 3 0 2 17 1 3 51 1 4 0 25 4 0 2 4 3) #(0 20 33) #(DESTRUCTURING-BIND COERCE-TO-MACRO INSTALL-FUNCTION DO-DESTRUCTURE APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((SPECIAL-FORM-P) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPECIAL-FORM-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 4 4 23 3 4 1 1 21 0 2 3 4 23 4 4 1 1 25 5 0 2 4 2 11 0 3 11 0 3) #(0 16 26 37 40) #(FSUBR NIL SYMBOLP FBOUNDP SYMBOL-FUNCTION TYPEP) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(COMPLEMENT EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COMPLEMENT #K(#(80 2 0 1 51 1 2 1 1 11 0 2 77 2 2 0 2 0 1 1 23 2 5 2 1 2 21 0 2 3 5 11 0 3 11 0 4) #(0 12 31 34) #(NIL T APPLY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((COPY-STRUCTURE COPY-SYMBOL) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-STRUCTURE #K(#(80 2 0 0 25 0 0 1 1) #(0) #(%COPY-STRUCT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-SYMBOL #K(#(77 1 2 1 1 1 0 3 23 2 4 1 1 23 3 4 1 4 23 4 4 1 4 21 0 1 6 2 23 5 5 1 1 21 0 2 3 5 23 6 6 1 1 23 7 0 2 4 6 23 8 5 1 1 21 0 4 5 5 23 9 6 1 1 23 10 0 2 4 6 23 11 5 1 1 23 12 5 1 5 23 13 0 2 4 5 11 0 4) #(0 28 38 49 59 70 86) #(NIL #(NIL) SYMBOL-NAME COPY-SEQ MAKE-SYMBOL BOUNDP SYMBOL-VALUE %SET-SYMBOL-VALUE FBOUNDP SYMBOL-FUNCTION %SET-SYMBOL-FUNCTION SYMBOL-PLIST COPY-LIST %SET-SYMBOL-PLIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((TAILP LDIFF) EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(TAILP #K(#(80 3 1 0 2 0 2 4 23 1 5 1 4 21 0 4 1 5 50 1 2 3 1 4 11 0 3 17 4 4 23 1 5 1 4 21 0 4 1 5 41 4 1 0 57 0) #(0 18 24 27 40) #(T ATOM) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LDIFF #K(#(80 3 1 0 4 0 1 4 0 3 5 23 1 6 1 4 21 0 4 1 6 50 1 2 3 2 4 25 2 0 1 5 17 4 6 16 4 7 20 7 5 7 0 6 4 0 7 5 23 1 6 1 4 21 0 4 1 6 50 1 5 6 4 2 25 2 0 1 5 25 3 0 2 5 4) #(0 21 27 32 58 64 69) #(NIL ATOM NREVERSE NRECONC) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(MEMBER-IF EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MEMBER-IF #K(#(77 3 3 0 0 0 2 1 1 0 2 0 2 5 21 0 2 8 5 21 0 3 4 3 16 5 6 31 3 6 1 6 1 5 16 5 6 31 1 6 1 6 21 0 6 7 6 11 0 5 16 5 0 17 5 5 1 1 11 0 4) #(0 14 19 24 34 37 47 50 58) #(NIL (NIL) (:KEY)) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(ISQRT EXPORT) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ISQRT #K(#(80 2 3 0 1 2 4 23 3 5 2 1 4 21 0 1 5 5 23 4 6 1 1 21 0 5 2 6 23 5 6 1 1 23 6 6 2 6 3 23 7 6 2 2 6 23 6 7 2 1 6 2 45 6 7 8 23 8 8 1 8 37 62 4 3 3 8 2 43 6 7 8 23 6 6 2 8 3 23 6 7 2 1 6 2 45 6 7 8 23 8 8 1 8 37 62 4 3 3 8 2 109 6 7 0 57 0 23 9 5 1 1 25 10 0 1 5) #(0 18 28 67 100 107) #(1 2 INTEGER TYPEP MINUSP INTEGER-LENGTH TRUNCATE ASH ABS SQRT FLOOR) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
