(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graphics" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("stats" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("dialogs" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #((ARROW WATCH CROSS BRUSH HAND FINGER HOUR-GLASS TRASH-BAG TRASH-CAN) T *CURSORS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CURSORS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #((WHITE BLACK RED GREEN BLUE CYAN MAGENTA YELLOW) T *COLORS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*COLORS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #((DOT DOT1 DOT2 DOT3 DOT4 DISK DIAMOND CROSS SQUARE WEDGE1 WEDGE2 X) T *PLOT-SYMBOLS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PLOT-SYMBOLS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Close all plot windos." FUNCTION-DOCUMENTATION CLOSE-ALL-PLOTS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CLOSE-ALL-PLOTS #K(#(80 1 1 0 2 38 1 2 51 2 3 0 23 2 2 2 3 2 23 3 2 2 1 2 51 1 3 0 25 2 0 2 3 2 80 2 0 1 38 4 2 25 5 0 2 1 2 80 2 2 0 6 2 48 3 1 4 38 7 5 23 8 5 2 4 5 21 0 3 4 5 11 0 4 11 0 2) #(0 34 47 71 74) #(NIL *HARDWARE-OBJECTS* MAPCAR REMOVE :REMOVE SEND 2 GRAPH-WINDOW-PROTO KIND-OF-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (prompt low high initial)
Open dialog to get an integer in the range (LOW HIGH). Returns the integer
or NIL if Cancelled or integer is not in range. Beeps if integer is bad." FUNCTION-DOCUMENTATION GET-NEW-INTEGER %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-NEW-INTEGER #K(#(80 5 2 0 1 3 23 2 7 5 6 5 1 2 3 38 3 8 23 4 7 3 7 8 4 21 0 1 7 7 16 7 8 23 5 8 1 8 21 0 2 3 8 16 7 9 23 6 8 3 2 9 3 1 4 0 6 8 21 0 5 6 8 16 7 0 57 0 23 7 0 0 11 0 6 11 0 6) #(0 30 43 55 58 63 68 75) #("~a: (between ~d and ~d)" NIL FORMAT :INITIAL GET-VALUE-DIALOG INTEGERP < SYSBEEP) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Return list of all linked plots." FUNCTION-DOCUMENTATION LINKED-PLOTS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LINKED-PLOTS #K(#(80 1 2 0 1 6 0 2 3 38 2 4 16 4 5 21 1 1 7 4 48 1 5 6 38 3 7 23 4 7 2 6 7 21 0 2 3 7 38 5 8 23 6 7 2 6 8 1 4 0 2 7 21 0 5 6 7 20 6 3 3 17 4 4 16 4 5 21 1 1 7 4 11 0 3) #(0 20 38 49 52 57 61 72) #(2 NIL *HARDWARE-OBJECTS* GRAPH-PROTO KIND-OF-P :LINKED SEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Return list of all currently visible graph windows." FUNCTION-DOCUMENTATION ACTIVE-GRAPH-WINDOWS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ACTIVE-GRAPH-WINDOWS #K(#(80 1 0 2 39 0 1 38 1 2 23 2 1 2 1 2 51 1 2 0 25 3 0 2 2 1 80 2 0 1 38 4 2 25 5 0 2 1 2) #(0 26) #(THIRD *HARDWARE-OBJECTS* MAPCAR REMOVE-IF-NOT GRAPH-WINDOW-PROTO KIND-OF-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Returns list of symbols with color definitions." FUNCTION-DOCUMENTATION COLOR-SYMBOLS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COLOR-SYMBOLS #K(#(80 1 5 0 1 2 3 4 11 0 5 6 23 5 7 0 0 5 8 0 7 9 16 9 10 21 1 1 2 9 23 6 11 1 10 20 11 8 8 23 6 11 2 10 5 20 11 8 8 17 9 9 16 9 10 21 1 1 2 9 0 5 11 0 5 12 0 4 13 0 5 14 0 8 15 21 0 4 5 15 16 15 14 17 15 15 0 1 13 1 6 0 5 11 11 0 6 61 112 13 13 37 76 3 7 2 13 7 14 13 12 21 0 9 6 12 16 12 11 17 12 12 46 11 3 16 21 0 10 8 16 20 11 6 6 1 8) #(0 30 60 75 80 91 97 107 111 116 131) #(-1 199 |color-index| 0 NIL LIST-ALL-PACKAGES PACKAGE-OBARRAY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Returns list of symbols with cursor definitions." FUNCTION-DOCUMENTATION CURSOR-SYMBOLS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CURSOR-SYMBOLS #K(#(80 1 5 0 1 2 3 4 11 0 5 6 23 5 7 0 0 5 8 0 7 9 16 9 10 21 1 1 2 9 23 6 11 1 10 20 11 8 8 23 6 11 2 10 5 20 11 8 8 17 9 9 16 9 10 21 1 1 2 9 0 5 11 0 5 12 0 4 13 0 5 14 0 8 15 21 0 4 5 15 16 15 14 17 15 15 0 1 13 1 6 0 5 11 11 0 6 61 112 13 13 37 76 3 7 2 13 7 14 13 12 21 0 9 6 12 16 12 11 17 12 12 46 11 3 16 21 0 10 8 16 20 11 6 6 1 8) #(0 30 60 75 80 91 97 107 111 116 131) #(-1 199 |cursor-index| 0 NIL LIST-ALL-PACKAGES PACKAGE-OBARRAY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ()
Returns list of symbols with plot symbol definitions." FUNCTION-DOCUMENTATION PLOT-SYMBOL-SYMBOLS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PLOT-SYMBOL-SYMBOLS #K(#(80 1 5 0 1 2 3 4 11 0 5 6 23 5 7 0 0 5 8 0 7 9 16 9 10 21 1 1 2 9 23 6 11 1 10 20 11 8 8 23 6 11 2 10 5 20 11 8 8 17 9 9 16 9 10 21 1 1 2 9 0 5 11 0 5 12 0 4 13 0 5 14 0 8 15 21 0 4 5 15 16 15 14 17 15 15 0 1 13 1 6 0 5 11 11 0 6 61 112 13 13 37 76 3 7 2 13 7 14 13 12 21 0 9 6 12 16 12 11 17 12 12 46 11 3 16 21 0 10 8 16 20 11 6 6 1 8) #(0 30 60 75 80 91 97 107 111 116 131) #(-1 199 |symbol-index| 0 NIL LIST-ALL-PACKAGES PACKAGE-OBARRAY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (n)
Pause for N/60 seconds." FUNCTION-DOCUMENTATION PAUSE %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PAUSE #K(#(80 2 2 0 1 2 23 2 0 0 2 47 1 3 4 38 3 5 2 42 4 5 4 23 4 5 0 2 43 4 5 4 23 4 5 0 37 76 2 1 4 5 11 0 2 1 1) #(0 32 42) #(NIL 60 FLUSH-GRAPHICS INTERNAL-TIME-UNITS-PER-SECOND GET-INTERNAL-RUN-TIME) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (&rest plots)
Links the argument plots: any change in hiliting or visibility of points in
the current plot is propagated to the other plots." FUNCTION-DOCUMENTATION LINK-VIEWS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LINK-VIEWS #K(#(77 2 1 0 0 1 51 1 2 0 25 0 0 2 2 1 80 2 1 1 1 38 2 3 25 3 0 3 1 3 2) #(0 16) #(MAPC T :LINKED SEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (&rest plots)
Removes links to its arguments. With no arguments removes all links." FUNCTION-DOCUMENTATION UNLINK-VIEWS %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNLINK-VIEWS #K(#(77 2 1 0 0 1 21 0 1 2 1 51 3 2 0 25 0 0 2 2 1 25 1 0 0 80 2 1 2 1 38 3 3 25 4 0 3 1 3 2) #(0 11 21 25) #(MAPC UNLINK-ALL-WINDOWS NIL :LINKED SEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional x y &key (draw t))
Sets or retrieves current variables." :CURRENT-VARIABLES #K(#(77 3 2 2 3 0 0 2 1 1 0 1 21 0 1 3 2 38 4 6 23 5 0 4 1 6 2 3 21 0 2 3 4 38 6 6 23 5 0 2 1 6 38 4 6 25 5 0 2 1 6) #(0 17 33 42) #(NIL (T) (:DRAW) #(NIL NIL) :CONTENT-VARIABLES SEND :REDRAW) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CURRENT-VARIABLES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional x y z &key (draw t))
Sets or retrieves current variables." :CURRENT-VARIABLES #K(#(77 3 2 3 3 0 0 2 1 1 0 1 21 0 1 3 2 38 4 7 23 5 0 5 1 7 2 3 4 21 0 2 3 5 38 6 7 23 5 0 2 1 7 38 4 7 25 5 0 2 1 7) #(0 17 34 43) #(NIL (T) (:DRAW) #(NIL NIL NIL) :CONTENT-VARIABLES SEND :REDRAW) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CURRENT-VARIABLES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional new)
Sets or returns scale type." :SCALE-TYPE #K(#(77 3 2 1 4 0 0 3 2 2 0 1 4 64 2 6 21 2 1 2 2 0 2 7 1 3 0 4 7 21 0 4 5 6 63 5 7 0 38 5 8 38 6 9 23 7 0 4 1 8 9 3 62 5 0 57 0) #(0 21 26 29 34 52) #(NIL SCALE-TYPE (T) (:DRAW) #(%NOT-SUPPLIED) :ADJUST-TO-DATA :DRAW SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SCALE-TYPE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MENU-TITLE #K(#(77 1 2 1 2 2 0 1 2 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 21 0 4 5 5 63 4 6 0 62 4 0 57 0) #(0 17 22 25 30 34) #(NIL MENU-TITLE #(%NOT-SUPPLIED)) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MENU-TITLE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VARIABLE-LABELS #K(#(77 1 2 1 3 3 0 1 2 3 64 2 6 21 2 1 2 2 0 2 7 1 3 0 4 7 21 0 4 5 6 39 4 8 23 5 8 3 3 8 7 63 5 8 0 62 5 0 57 0) #(0 18 23 26 31 45) #(VECTOR NIL VARIABLE-LABELS #(%NOT-SUPPLIED) STRING MAP) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VARIABLE-LABELS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :BLACK-ON-WHITE #K(#(77 1 2 1 2 2 0 1 2 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 21 0 4 5 5 63 4 6 0 62 4 0 57 0) #(0 17 22 25 30 34) #(NIL BLACK-ON-WHITE #(%NOT-SUPPLIED)) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:BLACK-ON-WHITE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (var &optional shift &key (draw t))
Sets or retrieves current center for variable VAR. Sends :RESIZE and :REDRAW
messages if DRAW is true. Vectorized." :CENTER #K(#(77 2 2 0 0 2 39 0 3 38 1 4 25 2 0 4 3 1 4 2) #(0) #(SEND :SHIFT APPLY) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CENTER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DEPTH-CUING #K(#(77 1 2 1 1 1 0 0 64 2 0 21 2 1 1 2 11 0 3) #(0 16) #(NIL #(%NOT-SUPPLIED)) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DEPTH-CUING) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Open dialog to set symbol used to plot selected points." :SET-SELECTION-SYMBOL #K(#(80 2 2 0 1 9 38 2 4 51 7 5 0 23 3 4 2 5 4 39 4 5 23 5 5 2 5 4 23 6 5 2 3 5 21 0 1 6 5 23 7 6 0 23 8 6 2 1 6 38 9 7 23 10 7 2 1 7 48 5 4 8 0 6 9 16 9 10 21 1 2 5 9 38 11 11 23 10 11 2 10 11 21 0 3 4 11 38 11 12 23 10 0 3 10 12 2 38 12 11 23 10 0 4 10 11 7 8 38 13 11 23 10 0 2 10 11 17 9 9 16 9 10 21 1 2 5 9 11 0 2 11 0 2 80 2 1 14 0 25 15 0 2 1 2) #(0 39 73 87 97 128 131 134) #(NIL "Symbol for selected points" *PLOT-SYMBOLS* REMOVE-IF STRING MAPCAR CHOOSE-ITEM-DIALOG LINKED-PLOTS ADJOIN :SELECTION SEND :DEPTH-CUING :POINT-SYMBOL :REDRAW (DOT1 DOT2 DOT3 DOT4) MEMBER) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-SELECTION-SYMBOL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Open dialog to set color used to plot selected points." :SET-SELECTION-COLOR #K(#(80 2 6 0 1 2 3 4 5 7 39 6 8 38 7 9 23 8 8 2 8 9 20 7 8 8 23 9 8 2 6 8 21 0 1 9 8 0 8 9 37 61 2 3 9 3 0 5 8 1 4 2 45 8 2 10 38 7 11 48 10 11 8 23 10 9 0 23 11 9 2 1 9 38 12 10 23 13 10 2 1 10 0 9 11 16 11 12 21 1 5 8 11 0 8 13 21 0 6 7 13 38 14 14 23 13 0 3 12 14 4 38 15 13 23 13 0 4 12 13 10 8 38 16 13 23 13 0 2 12 13 17 11 11 16 11 12 21 1 5 8 11 11 0 5 11 0 5) #(0 37 46 51 63 93 101 111 142 145) #(1 0 T NIL "Color for selected points" "None" STRING *COLORS* MAPCAR CHOOSE-ITEM-DIALOG LINKED-PLOTS ADJOIN :SELECTION SEND :USE-COLOR :POINT-COLOR :REDRAW) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-SELECTION-COLOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SHOW-ALL-POINTS #K(#(80 2 3 0 1 2 2 38 3 5 38 4 6 23 5 6 2 1 6 2 45 6 4 6 23 6 6 2 3 6 23 5 0 4 1 5 6 2 38 7 5 25 5 0 2 1 5) #(0) #(T 0 1 :POINT-SHOWING :NUM-POINTS SEND ISEQ :ADJUST-TO-DATA) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SHOW-ALL-POINTS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Open dialog to save or set selection." :SELECTION-DIALOG #K(#(80 2 4 0 1 2 3 3 38 4 6 23 5 6 2 1 6 21 0 1 4 6 23 6 6 1 2 21 0 2 3 6 23 7 7 1 6 23 8 6 1 7 38 9 7 23 5 7 2 1 7 23 10 0 2 6 7 38 11 7 23 12 6 2 6 7 49 11 6 0 57 0 11 0 4 23 13 6 1 5 21 0 5 6 6 38 14 7 16 6 8 25 5 0 4 1 7 8 3 11 0 4) #(0 22 32 72 75 85 99) #("Name for the selection:" T NIL "Expression for indices to select:" :ANY-POINTS-SELECTED-P SEND GET-STRING-DIALOG STRING-UPCASE INTERN :SELECTION SET *VARIABLES* ADJOIN GET-VALUE-DIALOG :POINT-SELECTED) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SELECTION-DIALOG) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAG-POINT #K(#(77 3 4 0 0 0 6 5 5 0 1 2 3 4 18 38 7 10 23 8 10 2 1 10 48 9 10 11 48 8 10 12 38 9 13 2 45 2 7 14 2 45 3 7 15 23 8 13 6 1 13 14 15 6 6 21 0 1 2 13 16 13 13 1 3 0 5 13 38 10 14 23 8 14 2 1 14 21 0 4 9 14 21 0 5 8 13 38 11 15 23 8 15 6 1 15 2 3 7 7 48 9 15 16 2 43 16 7 16 48 8 15 17 2 43 17 7 17 38 12 18 23 8 15 4 1 18 16 17 16 15 16 71 2 2 15 17 38 13 18 23 8 18 4 1 18 11 13 38 13 19 23 8 19 4 1 19 12 13 38 14 20 23 8 20 2 1 20 2 45 20 8 20 23 15 20 2 9 20 38 16 21 23 8 21 4 1 21 20 13 38 17 22 23 8 22 3 1 22 20 23 18 23 3 14 11 20 23 19 23 1 23 23 18 24 3 14 12 20 23 19 24 1 24 38 16 25 2 45 16 18 26 2 42 23 26 26 2 45 17 19 27 2 42 24 27 27 2 43 26 27 26 2 42 26 22 26 2 43 21 26 26 23 8 0 5 1 25 20 13 26 21 0 6 7 4 38 20 14 23 8 0 2 1 14 11 0 13 11 0 5 21 0 10 13 13 38 11 14 23 8 14 6 1 14 2 3 7 7 48 9 14 15 2 43 15 7 15 48 8 14 16 2 43 16 7 16 38 21 17 23 8 14 4 1 17 15 16 38 16 15 48 9 14 16 23 8 0 5 1 15 11 13 16 38 16 15 48 8 14 16 23 8 0 5 1 15 12 13 16 21 0 11 12 4 38 20 14 23 8 0 2 1 14 11 0 13 11 0 5) #(0 60 65 68 82 87 276 285 288 291 296 375 384 387) #(NIL 10 5 1 0 (T) (:DRAW) :CONTENT-VARIABLES SEND :POINTS-IN-RECT :TRANSFORMATION :DRAG-GREY-RECT :CANVAS-TO-SCALED :POINT-TRANSFORMED-COORDINATE :NUM-VARIABLES ISEQ :POINT-COORDINATE :SCALE SELECT COMPOUND-DATA-SEQ :REDRAW :CANVAS-TO-REAL) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAG-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional (file \"image.ps\"))
Saves a postscript image of the window to file named FILE by buffering,
sending the window the :REDRAW message, and dumping the buffer to a file." :SAVE-IMAGE #K(#(77 3 2 1 2 0 0 1 0 0 3 38 3 4 38 4 5 23 5 4 3 2 4 5 56 2 1 5 5 57 0 25 6 5 1 4 38 7 6 25 8 5 4 1 6 4 3) #(0 31 36) #((1) (:SCALE) #("image.ps") :DIRECTION :OUTPUT OPEN CLOSE :IMAGE-TO-FILE SEND) 0 NIL) GRAPH-WINDOW-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SAVE-IMAGE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ASK-SAVE-IMAGE #K(#(77 1 2 1 7 7 0 1 2 3 4 5 6 2 38 8 10 23 9 10 3 9 10 2 21 0 1 4 10 23 10 11 1 10 37 61 2 3 11 4 23 11 0 1 3 23 12 0 3 7 6 10 23 13 0 0 38 14 11 23 15 0 3 1 11 10 25 12 0 2 7 5 11 0 8) #(0 29 40 45 72) #("null file name string" 0 "done~%" "; saving postscript image to file ~a..." T NIL "Enter a file name for postscript output" #("image.ps") :INITIAL GET-STRING-DIALOG LENGTH ERROR FORMAT FORCE-OUTPUT :SAVE-IMAGE SEND) 0 NIL) GRAPH-WINDOW-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ASK-SAVE-IMAGE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #("Plot" GRAPH-PROTO :MENU-TITLE SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MENU-TEMPLATE #K(#(77 1 2 1 2 2 0 1 2 64 2 5 21 2 1 2 2 0 2 6 1 3 0 3 6 21 0 4 5 5 63 4 6 0 62 4 0 57 0) #(0 17 22 25 30 34) #(NIL MENU-TEMPLATE #(%NOT-SUPPLIED)) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MENU-TEMPLATE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 2 38 1 2 38 2 3 25 3 0 3 2 3 1) #(0) #((LINK SHOWING-LABELS MOUSE RESIZE-BRUSH DASH ERASE-SELECTION FOCUS-ON-SELECTION SHOW-ALL SYMBOL COLOR SELECTION DASH SLICER RESCALE OPTIONS SAVE-IMAGE) GRAPH-PROTO :MENU-TEMPLATE SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-MENU-ITEM #K(#(80 3 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 5 38 16 19 23 17 19 2 2 19 21 0 1 2 19 11 0 2 60 2 18 25 24 23 22 21 20 19 18 17 16 15 12 9 8 5 4 3 11 0 17 38 18 19 38 19 20 38 20 21 25 21 0 5 19 20 16 1 21 23 22 19 0 21 0 6 7 19 38 18 19 38 19 20 38 23 21 38 24 22 25 21 0 6 19 20 15 1 21 22 11 0 17 38 18 19 38 19 20 38 25 21 38 24 22 25 21 0 6 19 20 14 1 21 22 23 26 19 0 21 0 10 11 19 11 0 17 38 18 19 38 19 20 38 27 21 25 21 0 5 19 20 13 1 21 23 26 19 0 21 0 13 14 19 11 0 17 38 18 19 38 19 20 38 28 21 25 21 0 5 19 20 12 1 21 38 18 19 38 19 20 38 29 21 25 21 0 5 19 20 11 1 21 38 18 19 38 19 20 38 30 21 25 21 0 5 19 20 10 1 21 38 18 19 38 19 20 38 31 21 25 21 0 5 19 20 9 1 21 38 32 19 38 19 20 25 21 0 3 19 20 1 38 18 19 38 19 20 38 33 21 25 21 0 5 19 20 8 1 21 38 18 19 38 19 20 38 34 21 38 35 22 38 36 23 25 21 0 8 19 20 7 1 21 22 23 6 38 18 19 38 19 20 38 37 21 38 37 22 38 38 23 25 21 0 8 19 20 5 1 21 22 23 6 38 18 19 38 19 20 38 39 21 38 24 22 25 21 0 6 19 20 4 1 21 22 38 18 19 38 19 20 38 40 21 38 24 22 25 21 0 6 19 20 3 1 21 22 38 41 19 38 19 20 25 21 0 3 19 20 1 38 42 19 38 19 20 25 21 0 2 19 20) #(0 34 37 57 60 78 87 109 112 134 143 146 164 173 176 194 212 230 248 261 279 306 333 355 377 390) #("Remove Selection" "Focus on Selection" "Show Labels" T "Show All" "Selection ..." "Resize Brush" "Redraw Plot" "Rescale Plot" "Options ..." "Slicer ..." "Selection Symbol" "Selection Color" "Save to File" NIL #(DASH LINK ERASE-SELECTION FOCUS-ON-SELECTION SHOWING-LABELS SHOW-ALL SELECTION MOUSE RESIZE-BRUSH REDRAW RESCALE OPTIONS SLICER SYMBOL COLOR SAVE-IMAGE) MENU-ITEM-PROTO KIND-OF-P GRAPH-ITEM-PROTO :NEW :ASK-SAVE-IMAGE SEND SCREEN-HAS-COLOR :SET-SELECTION-COLOR :ANY-POINTS-SELECTED-P :SET-SELECTION-SYMBOL SMALL-MACHINE-P :MAKE-SLICER-DIALOG :SET-OPTIONS :ADJUST-TO-DATA :REDRAW :RESIZE-BRUSH MOUSE-MODE-ITEM-PROTO :SELECTION-DIALOG :SHOW-ALL-POINTS :ALL-POINTS-SHOWING-P :NEGATE :SHOWING-LABELS :TOGGLE :FOCUS-ON-SELECTION :ERASE-SELECTION LINK-ITEM-PROTO DASH-ITEM-PROTO) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-MENU-ITEM) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :NEW-MENU #K(#(77 3 2 1 5 0 0 4 3 3 0 1 2 6 0 2 7 21 2 1 2 3 0 3 8 1 3 38 6 8 23 7 8 2 1 8 0 7 9 21 0 5 4 9 62 4 7 62 6 9 21 0 6 7 9 62 6 10 38 8 11 23 7 0 2 10 11 38 9 9 38 10 10 23 7 9 3 9 10 7 38 11 10 23 7 0 3 1 10 9 39 7 10 38 12 11 51 8 12 1 1 23 13 12 2 12 8 23 14 12 2 5 12 23 15 0 4 10 9 11 12 11 0 9 80 3 0 1 38 16 3 25 7 0 3 1 3 2) #(0 22 27 36 44 47 55 67 124) #(MENU-TITLE NIL MENU (%NOT-SUPPLIED) (:ITEMS) #(NIL) :MENU-TEMPLATE SEND :DISPOSE MENU-PROTO :NEW :MENU :APPEND-ITEMS MAPCAR REMOVE APPLY :MAKE-MENU-ITEM) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NEW-MENU) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :CLOBBER #K(#(80 2 2 0 1 2 23 2 0 0 62 3 4 21 0 1 2 4 62 3 4 38 3 5 25 4 0 2 4 5 11 0 2) #(0 18 30) #(NIL MENU CALL-NEXT-METHOD :DISPOSE SEND) 0 NIL) GRAPH-WINDOW-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLOBBER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :CLOSE #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(:REMOVE SEND) 0 NIL) GRAPH-WINDOW-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLOSE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REMOVE #K(#(80 2 1 0 2 38 1 3 23 2 3 2 1 3 21 0 1 2 3 38 3 4 23 2 0 3 1 4 2 25 4 0 0) #(0 19 29) #(NIL :ALLOCATED-P SEND :LINKED CALL-NEXT-METHOD) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REMOVE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-DIALOG #K(#(80 3 0 1 38 0 3 25 1 0 3 1 3 2) #(0) #(:ADD-SUBORDINATE SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-DIALOG) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REMOVE-DIALOG #K(#(80 3 0 1 38 0 3 25 1 0 3 1 3 2) #(0) #(:DELETE-SUBORDINATE SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REMOVE-DIALOG) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&key (draw t))
Clears the plot data. If DRAW is nil the plot is redrawn; otherwise its
current screen image remains unchanged." :CLEAR #K(#(77 2 2 0 2 0 1 3 21 0 1 2 2 0 4 5 1 3 0 3 5 38 2 6 38 3 7 23 4 0 4 1 6 7 4 38 5 6 38 3 7 25 4 0 4 1 6 7 5) #(0 13 18 21) #(T NIL :CLEAR-POINTS :DRAW SEND :CLEAR-LINES) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLEAR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
removes all unselected points invisible" :FOCUS-ON-SELECTION #K(#(80 2 3 0 1 2 3 38 3 5 23 4 5 2 1 5 2 45 5 4 5 23 5 5 2 3 5 38 6 6 38 7 7 23 4 7 2 1 7 23 8 7 2 5 7 25 4 0 4 1 6 7 2) #(0) #(NIL 0 1 :NUM-POINTS SEND ISEQ :POINT-SHOWING :SELECTION SET-DIFFERENCE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:FOCUS-ON-SELECTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH UPDATE-MESSAGE TOGGLE NEGATE REDRAW) GRAPH-ITEM-PROTO NIL MENU-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 5 1 8 0 0 7 6 6 0 1 2 3 4 5 0 63 14 3 0 63 13 4 0 63 12 5 0 63 11 6 0 63 10 7 0 63 9 8 0 25 9 0 1 2) #(0) #(REDRAW NEGATE TOGGLE UPDATE-MESSAGE ACTION GRAPH (NIL NIL NIL) (:TOGGLE :NEGATE :REDRAW) #(NIL) CALL-NEXT-METHOD) 0 NIL) GRAPH-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 5 0 1 2 3 4 4 62 6 7 38 5 8 23 6 8 2 1 8 21 0 1 2 8 23 7 9 1 8 1 3 0 4 9 21 0 4 10 9 62 3 10 21 0 5 9 10 38 8 10 23 6 10 2 1 10 21 0 6 7 10 0 4 10 1 8 0 2 10 23 6 0 3 7 8 10 1 12 23 6 0 2 7 8 1 12 21 0 11 12 8 31 8 0 1 7 62 5 8 21 0 13 14 8 38 9 8 25 6 0 2 7 8 11 0 4) #(0 26 33 36 41 49 63 68 71 80 88 93 98 106 115) #(T TOGGLE NIL REDRAW GRAPH :ACTION SEND SYMBOLP :UPDATE-MESSAGE :REDRAW) 0 NIL) GRAPH-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :UPDATE-MESSAGE #K(#(80 2 3 0 1 2 2 62 4 5 62 3 6 21 0 1 4 6 62 3 6 23 3 6 1 6 21 0 2 3 6 62 3 6 25 4 0 2 5 6 62 3 6 33 6 0 1 5 11 0 2) #(0 18 31 40 48) #(NIL UPDATE-MESSAGE GRAPH SYMBOLP SEND) 0 NIL) GRAPH-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:UPDATE-MESSAGE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :UPDATE #K(#(80 2 5 0 1 2 3 4 3 62 6 7 21 0 1 13 7 38 5 7 23 6 7 2 1 7 21 0 2 3 7 0 2 7 1 4 0 5 7 62 4 8 21 0 5 6 8 38 7 8 1 7 38 8 8 62 3 9 21 0 8 11 9 21 0 9 10 7 0 5 9 1 12 0 2 9 1 12 0 7 9 25 6 0 3 1 8 9 11 0 5) #(0 17 31 36 39 47 52 55 63 68 73 78 81 88) #(T NEGATE TOGGLE NIL UPDATE-MESSAGE :UPDATE-MESSAGE SEND :MARK :ENABLED) 0 NIL) GRAPH-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:UPDATE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH) LINK-ITEM-PROTO NIL MENU-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 2 0 1 0 63 4 2 0 25 2 0 1 3) #(0) #("Link View" GRAPH CALL-NEXT-METHOD) 0 NIL) LINK-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 3 0 1 2 4 62 4 5 38 3 6 62 4 7 38 3 8 23 4 7 2 7 8 21 0 1 2 7 0 2 7 1 3 0 3 7 25 4 0 3 5 6 7) #(0 30 35 38) #(NIL T GRAPH :LINKED SEND) 0 NIL) LINK-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :UPDATE #K(#(80 2 3 0 1 2 3 38 3 5 62 4 6 38 4 7 23 5 6 2 6 7 21 0 1 2 6 0 2 6 1 3 0 3 6 25 5 0 3 1 5 6) #(0 27 32 35) #("Unlink View" "Link View" GRAPH :TITLE :LINKED SEND) 0 NIL) LINK-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:UPDATE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 5 0 1 2 3 4 4 38 5 6 39 6 7 23 7 8 1 6 21 0 1 2 8 0 6 8 1 3 23 8 8 1 6 23 9 6 2 7 8 0 5 7 16 7 8 21 1 4 5 7 38 10 9 23 11 0 3 6 9 8 17 7 7 16 7 8 21 1 4 5 7 38 12 9 23 11 0 4 6 9 4 3 38 13 9 23 11 0 4 6 9 2 1 23 14 0 2 4 6 11 0 4) #(0 25 30 35 52 73) #("Menu item for changing the mouse mode" PROTO (GRAPH) MOUSE-MODE-ITEM-PROTO NIL MENU-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE :DOCUMENTATION SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 2 0 1 0 63 4 2 0 25 2 0 1 3) #(0) #("Mouse Mode ..." GRAPH CALL-NEXT-METHOD) 0 NIL) MOUSE-MODE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-ACTION #K(#(80 2 1 0 2 62 2 3 38 1 4 25 2 0 2 3 4) #(0) #(GRAPH :CHOOSE-MOUSE-MODE SEND) 0 NIL) MOUSE-MODE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-ACTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (mode &key (title (string mode)) (cursor 'arrow) click motion)
Adds MODE to the mode list. TITLE is the string used in the menu, CLICK
and MOTION are the selectors for the mouse actions." :ADD-MOUSE-MODE #K(#(77 3 3 0 0 0 2 1 1 0 4 21 2 1 2 3 0 3 8 1 3 23 3 8 1 2 62 7 9 38 4 10 51 4 11 0 23 5 9 4 2 9 10 11 38 6 10 23 7 11 5 2 8 4 5 6 20 11 9 11 23 8 0 4 1 10 7 11 11 0 2 80 3 1 9 1 21 1 5 6 2 16 2 4 41 1 4 0 57 0 11 0 3) #(0 16 21 26 71 81 90) #(MODE-LIST (%NOT-SUPPLIED ARROW NIL NIL) (:TITLE :CURSOR :CLICK :MOTION) STRING :TEST REMOVE :ADD-SLOT LIST SEND NIL) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-MOUSE-MODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (mode)
Deletes MODE to the mode list." :DELETE-MOUSE-MODE #K(#(80 3 3 0 1 2 3 62 5 6 38 3 7 51 7 8 0 23 4 7 4 2 6 7 8 50 2 1 2 6 7 11 0 4 21 0 4 3 7 23 5 0 1 3 38 6 8 23 7 0 4 1 8 5 7 38 8 6 23 7 6 2 1 6 50 0 5 6 2 6 38 8 7 38 9 8 23 7 8 2 1 8 16 8 8 23 7 0 3 1 7 8 11 0 2 80 3 1 1 1 21 1 8 9 2 16 2 4 41 1 4 0 57 0 11 0 3) #(0 31 34 39 44 70 92 95 105 114) #("Need at least one mouse mode" NIL MODE-LIST :TEST REMOVE ERROR :ADD-SLOT SEND :MOUSE-MODE :MOUSE-MODES) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DELETE-MOUSE-MODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Installs appropriate cursor for current mode." :SET-MODE-CURSOR #K(#(80 2 4 0 1 2 3 2 62 5 6 62 4 7 23 4 6 2 6 7 21 0 1 2 6 48 2 6 6 1 3 0 3 6 38 5 7 25 6 0 3 1 7 6) #(0 25 31 34) #(2 ARROW MODE-LIST MOUSE-MODE ASSOC :CURSOR SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-MODE-CURSOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 5 38 2 3 38 3 4 38 4 5 38 5 6 38 6 7 25 7 0 7 3 4 2 5 1 6 7) #(0) #("Selecting Mode" SELECTING GRAPH-PROTO :ADD-MOUSE-MODE :TITLE :CLICK :DO-SELECT-CLICK SEND) 0 NIL)
#K(#(80 1 3 0 1 2 8 38 3 4 38 4 5 38 5 6 38 6 7 38 7 8 38 8 9 38 9 10 38 10 11 25 11 0 11 4 5 3 6 2 7 1 8 9 10 11) #(0) #(BRUSH "Brushing Mode" BRUSHING GRAPH-PROTO :ADD-MOUSE-MODE :TITLE :CURSOR :CLICK :DO-BRUSH-CLICK :MOTION :DO-BRUSH-MOTION SEND) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (mode)
Returns title for menu item for mouse mode MODE." :MOUSE-MODE-TITLE #K(#(80 3 3 0 1 2 1 62 5 6 23 3 6 2 2 6 21 0 1 2 6 48 3 6 0 57 0 11 0 4) #(0 21 27) #(1 NIL MODE-LIST ASSOC) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MOUSE-MODE-TITLE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Returns a list of the current mouse modes." :MOUSE-MODES #K(#(80 2 1 0 2 39 1 3 62 2 4 23 2 3 2 3 4 25 3 0 1 3) #(0) #(MODE-LIST CAR MAPCAR REVERSE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MOUSE-MODES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Presents a dialog to set the mouse mode." :CHOOSE-MOUSE-MODE #K(#(80 2 2 0 1 4 38 2 4 23 3 4 2 1 4 51 3 5 1 1 23 4 5 2 5 4 38 5 6 38 6 7 23 3 7 2 1 7 23 7 7 2 7 4 23 8 5 4 3 5 6 7 21 0 1 2 5 38 6 6 48 5 4 7 25 3 0 3 1 6 7 11 0 2 80 3 0 1 38 9 3 25 3 0 3 1 3 2) #(0 57 71 74) #(NIL "New Mode:" :MOUSE-MODES SEND MAPCAR :INITIAL :MOUSE-MODE POSITION CHOOSE-ITEM-DIALOG :MOUSE-MODE-TITLE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CHOOSE-MOUSE-MODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REDRAW-OVERLAYS #K(#(80 2 2 0 1 3 62 3 4 23 2 4 1 4 16 4 5 21 1 1 2 4 38 3 6 23 4 0 2 5 6 17 4 4 16 4 5 21 1 1 2 4 11 0 2) #(0 22 42) #(NIL OVERLAYS REVERSE :REDRAW SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW-OVERLAYS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :RESIZE-OVERLAYS #K(#(80 2 2 0 1 3 62 3 4 16 4 5 21 1 1 2 4 38 2 6 23 3 0 2 5 6 17 4 4 16 4 5 21 1 1 2 4 11 0 2) #(0 17 37) #(NIL OVERLAYS :RESIZE SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIZE-OVERLAYS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :OVERLAY-CLICK #K(#(80 6 3 0 1 2 3 62 8 9 16 9 10 21 1 1 4 9 38 3 11 23 4 11 6 10 11 2 3 4 5 21 0 2 3 11 11 0 6 17 9 9 16 9 10 21 1 1 4 9 11 0 7) #(0 18 36 39 50) #(T NIL OVERLAYS :DO-CLICK SEND) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:OVERLAY-CLICK) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-OVERLAY #K(#(80 3 4 0 1 2 3 1 38 4 7 23 5 7 2 2 7 21 0 1 2 7 23 6 0 1 3 38 7 7 23 5 0 4 2 7 6 1 62 5 7 20 2 7 7 63 5 7 0 57 0) #(0 22 27) #("Already installed in a graph" NIL OVERLAYS GRAPH :GRAPH SEND ERROR :SLOT-VALUE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-OVERLAY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DELETE-OVERLAY #K(#(80 3 3 0 1 2 1 62 5 6 23 3 6 2 2 6 21 0 1 2 6 38 4 6 23 5 0 4 2 6 3 4 62 5 6 23 6 6 2 2 6 63 5 6 0 57 0 11 0 4) #(0 21 47) #(GRAPH NIL OVERLAYS MEMBER :SLOT-VALUE SEND REMOVE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DELETE-OVERLAY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 4 2 4 5 0 3 5 16 5 6 21 1 4 5 5 38 7 7 23 8 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 9 7 23 8 0 4 4 7 2 1 23 10 0 2 2 4 11 0 2) #(0 20 25 30 47 68) #((GRAPH) GRAPH-OVERLAY-PROTO NIL MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :GRAPH #K(#(80 2 1 0 0 62 2 0 57 0) #(0) #(GRAPH) 0 NIL) GRAPH-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GRAPH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :RESIZE #K(#(80 2 1 0 0 11 0 2) #(0) #(NIL) 0 NIL) GRAPH-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIZE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REDRAW #K(#(80 2 1 0 0 11 0 2) #(0) #(NIL) 0 NIL) GRAPH-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DO-CLICK #K(#(80 6 1 0 0 11 0 6) #(0) #(NIL) 0 NIL) GRAPH-OVERLAY-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DO-CLICK) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graph2" REQUIRE) 0 NIL)
