(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLSCMP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LEAF-NODE-P CPS-LEAF-NODE-P %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LAMBDA-NODE-P CPS-LAMBDA-NODE-P %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(CALL-NODE-P CPS-CALL-NODE-P %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(NODE-CHILDREN CPS-NODE-CHILDREN %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(NODE-PARENT CPS-NODE-PARENT %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(NODE-SIMPLIFIED-P CPS-NODE-SIMPLIFIED-P %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(NODE-NOTE CPS-NODE-NOTE %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-NODE-CHILDREN CPS-SET-NODE-CHILDREN %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-NODE-PARENT CPS-SET-NODE-PARENT %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-NODE-SIMPLIFIED CPS-SET-NODE-SIMPLIFIED %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-NODE-NOTE CPS-SET-NODE-NOTE %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LEAF-NODE-VALUE CPS-LEAF-NODE-VALUE %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LEAF-NODE-COUNT CPS-LEAF-NODE-COUNT %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-LEAF-NODE-VALUE CPS-SET-LEAF-NODE-VALUE %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-LEAF-NODE-COUNT CPS-SET-LEAF-NODE-COUNT %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LAMBDA-NODE-ARGLIST CPS-LAMBDA-NODE-ARGLIST %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LAMBDA-NODE-LAMBDA-LIST CPS-LAMBDA-NODE-LAMBDA-LIST %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LAMBDA-NODE-NAME CPS-LAMBDA-NODE-NAME %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-LAMBDA-NODE-ARGLIST CPS-SET-LAMBDA-NODE-ARGLIST %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-LAMBDA-NODE-LAMBDA-LIST CPS-SET-LAMBDA-NODE-LAMBDA-LIST %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(SET-LAMBDA-NODE-NAME CPS-SET-LAMBDA-NODE-NAME %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(LAMBDA-NODE-BODY CPS-LAMBDA-NODE-BODY %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(CALL-NODE-FUNCTION CPS-CALL-NODE-FUNCTION %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(CALL-NODE-ARGS CPS-CALL-NODE-ARGS %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(ANY-REFERENCES-P CPS-ANY-REFERENCES-P %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 39 1 2 25 2 0 2 1 2) #(0) #(FIND-REFERENCES CPS-FIND-REFERENCES %SET-SYMBOL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-NODE #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(NIL MAKE-CPS-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NODE-EXPRESSION #K(#(80 2 3 0 1 2 3 23 3 5 1 1 21 0 1 2 5 25 4 0 1 1 23 5 5 1 1 21 0 3 7 5 23 6 5 1 1 21 0 4 5 5 0 2 5 1 6 0 3 5 23 7 5 1 5 39 4 6 23 8 7 1 1 23 9 6 2 6 7 23 7 6 1 6 23 10 7 1 1 16 7 7 23 11 7 1 7 23 7 7 1 7 25 12 0 3 5 6 7 23 13 5 1 1 21 0 8 9 5 39 11 5 23 10 6 1 1 25 9 0 2 5 6 11 0 4) #(0 17 22 32 42 47 50 99 109 123) #(CONTINUATION LAMBDA NIL LEAF-NODE-P LEAF-NODE-VALUE LAMBDA-NODE-P CONTINUATION-NODE-P LIST LAMBDA-NODE-ARGLIST MAPCAR NODE-CHILDREN NODE-EXPRESSION APPEND CALL-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-LEAF-NODE #K(#(80 2 2 0 1 1 23 2 4 1 3 23 3 0 2 4 2 23 4 0 2 4 1 11 0 4) #(0) #(T LEAF MAKE-CPS-NODE SET-NODE-SIMPLIFIED SET-LEAF-NODE-VALUE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-LAMBDA-NODE #K(#(77 1 3 1 1 1 0 4 23 2 5 1 4 23 3 0 2 5 1 23 4 6 1 2 23 5 0 2 5 6 0 1 6 16 6 7 21 1 1 2 6 23 6 0 2 7 5 17 6 6 16 6 7 21 1 1 2 6 23 7 0 2 2 5 21 0 3 4 3 0 3 8 1 5 23 8 8 1 1 23 9 0 2 5 8 11 0 5) #(0 41 58 69 74 79) #(LAMBDA #(NIL) MAKE-CPS-NODE SET-LAMBDA-NODE-ARGLIST LIST SET-NODE-CHILDREN SET-SYMBOL-NODE-OWNER SET-NODE-PARENT LAMBDA-LIST-DEFAULT SET-LAMBDA-NODE-LAMBDA-LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-NODE-DELETE-ARG #K(#(80 3 0 1 23 0 3 1 1 23 1 3 2 2 3 23 2 0 2 1 3 23 0 3 1 1 23 3 3 1 3 25 4 0 2 1 3) #(0) #(LAMBDA-NODE-ARGLIST DELETE SET-LAMBDA-NODE-ARGLIST LAMBDA-LIST-DEFAULT SET-LAMBDA-NODE-LAMBDA-LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-LAMBDA-NODE-ARGLIST-FIX #K(#(80 3 0 1 23 0 0 2 1 2 23 1 3 1 2 25 2 0 2 1 3) #(0) #(SET-LAMBDA-NODE-ARGLIST LAMBDA-LIST-DEFAULT SET-LAMBDA-NODE-LAMBDA-LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-CALL-NODE #K(#(77 2 1 0 2 0 1 4 23 2 4 1 3 23 3 0 2 4 1 0 1 5 16 5 6 21 1 1 2 5 23 4 0 2 6 4 17 5 5 16 5 6 21 1 1 2 5 16 1 7 23 5 7 1 7 21 0 3 4 7 23 6 0 1 4 11 0 4) #(0 30 47 60 65) #(NIL CALL MAKE-CPS-NODE SET-NODE-CHILDREN SET-NODE-PARENT LAMBDA-NODE-P FIXUP-LAMBDA-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-NODE-ADD-ARG #K(#(80 3 0 2 23 0 3 1 1 23 1 4 1 2 23 2 3 2 3 4 23 3 0 2 1 3 11 0 1) #(0) #(NODE-CHILDREN LIST APPEND SET-NODE-CHILDREN) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-NODE-ARG #K(#(80 3 0 1 23 0 3 1 1 48 2 3 0 57 0) #(0) #(CALL-NODE-ARGS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-NODE-ARG-COUNT #K(#(80 2 0 1 23 0 2 1 1 25 1 0 1 2) #(0) #(CALL-NODE-ARGS LENGTH) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-NODE-DELETE-ARG #K(#(80 3 1 0 1 23 1 4 1 1 23 2 4 2 2 4 23 3 0 2 1 4 25 4 0 2 2 3) #(0) #(NIL NODE-CHILDREN DELETE SET-NODE-CHILDREN SET-NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-NODE-DELETE-ARG-INDEX #K(#(80 3 2 0 1 4 23 2 5 1 1 2 43 2 4 6 48 6 5 6 20 3 3 7 2 43 2 4 8 47 8 5 7 0 23 3 7 2 7 5 23 4 0 2 1 7 25 5 0 2 6 3) #(0) #(NIL 1 NODE-CHILDREN DELETE SET-NODE-CHILDREN SET-NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CALL-NODE-ARGS #K(#(80 3 1 0 3 0 2 4 16 4 5 21 1 1 4 4 23 1 6 1 5 21 0 3 2 6 23 2 0 2 5 1 17 4 4 16 4 5 21 1 1 4 4 23 3 6 1 1 16 6 6 20 6 2 6 23 4 0 2 1 6 25 5 0 1 1) #(0 16 26 32 43) #(NIL LEAF-NODE-P SET-NODE-PARENT NODE-CHILDREN SET-NODE-CHILDREN FIXUP-LAMBDA-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CALL-NODE-FUNCTION #K(#(80 3 1 0 1 23 1 4 1 2 21 0 2 1 4 23 2 0 2 2 1 23 3 4 1 1 17 4 4 20 2 4 4 23 4 0 2 1 4 25 5 0 1 1) #(0 15 21) #(NIL LEAF-NODE-P SET-NODE-PARENT NODE-CHILDREN SET-NODE-CHILDREN FIXUP-LAMBDA-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CALL-NODE-ARG #K(#(80 4 2 0 1 2 23 2 6 1 3 21 0 2 1 6 23 3 0 2 3 1 2 43 2 5 6 23 4 7 1 1 47 6 7 3 0 25 5 0 1 1) #(0 16 22) #(NIL 1 LEAF-NODE-P SET-NODE-PARENT NODE-CHILDREN FIXUP-LAMBDA-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-NODE-INTERNALS #K(#(80 3 2 0 1 1 23 2 5 1 1 21 0 1 2 5 23 3 0 1 3 23 4 5 1 2 23 5 0 2 2 1 25 6 0 2 2 5) #(0 16 21) #("can't copy a leaf node" NIL LEAF-NODE-P ERROR NODE-PARENT CPS-NODE-TRANSFORM SET-NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MOVE-NODE-TREE #K(#(80 3 1 0 4 23 1 0 2 1 2 23 2 4 1 2 16 4 5 21 1 1 2 4 23 3 0 2 5 2 17 4 4 16 4 5 21 1 1 2 4 23 4 6 1 2 0 6 7 21 0 3 4 7 23 5 7 1 6 1 5 0 3 7 21 0 6 10 7 23 6 0 2 6 3 23 4 6 1 6 0 6 7 21 0 7 8 7 23 5 7 1 6 1 9 0 3 7 21 0 6 10 7 11 0 3) #(0 24 41 54 61 64 69 88 95 98 103) #(NIL COPY-NODE-INTERNALS NODE-CHILDREN SET-NODE-PARENT NODE-PARENT NODE-SIMPLIFIED-P SET-NODE-SIMPLIFIED) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INTERNAL-INSERT-NODE-TREE #K(#(80 4 1 0 1 23 1 5 1 2 47 3 5 1 0 23 2 5 1 1 21 0 1 2 5 11 0 4 25 3 0 2 1 2) #(0 25 28) #(NIL NODE-CHILDREN LEAF-NODE-P SET-NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INSERT-NODE-TREE #K(#(80 4 1 0 2 23 1 0 3 1 2 3 0 2 5 0 5 6 21 0 1 2 6 23 2 6 1 5 1 3 0 4 6 21 0 4 8 6 23 3 0 2 5 4 23 4 5 1 5 0 5 6 21 0 5 6 6 23 2 6 1 5 1 7 0 4 6 21 0 4 8 6 11 0 4) #(0 23 30 33 38 57 64 67 72) #(NIL INTERNAL-INSERT-NODE-TREE NODE-SIMPLIFIED-P SET-NODE-SIMPLIFIED NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COPY-NODE-TREE #K(#(80 2 2 0 1 5 23 2 4 1 1 21 0 1 2 4 11 0 1 23 3 4 0 23 4 0 2 1 4 23 5 5 1 4 21 0 3 5 5 23 6 6 1 4 16 6 7 21 1 4 5 6 23 7 0 2 7 4 17 6 6 16 6 7 21 1 4 5 6 23 8 5 1 4 23 9 5 1 5 23 10 0 2 4 5 23 11 6 1 5 0 3 7 37 60 6 7 7 6 48 7 5 8 23 12 8 1 8 23 13 0 3 8 4 7 61 112 7 7 37 60 6 7 7 6 11 0 4) #(0 16 19 39 52 69 99 125) #(NIL 0 LEAF-NODE-P MAKE-NODE COPY-NODE-INTERNALS LAMBDA-NODE-P LAMBDA-NODE-ARGLIST SET-SYMBOL-NODE-OWNER NODE-CHILDREN COPY-LIST SET-NODE-CHILDREN LENGTH COPY-NODE-TREE INTERNAL-INSERT-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-NODE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 40 4 2 0 57 0 11 0 3) #(0 16 27) #(CONTINUATION NIL LAMBDA-NODE-P NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-CONTINUATION-NODE #K(#(80 3 1 0 1 23 1 4 2 1 2 23 2 0 2 4 3 11 0 4) #(0) #(CONTINUATION MAKE-LAMBDA-NODE SET-NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PP-CPS #K(#(80 2 0 1 23 0 2 1 1 25 1 0 1 2) #(0) #(NODE-EXPRESSION PPRINT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CPS-CONVERTER #K(#(80 3 1 0 0 25 1 0 3 1 3 2) #(0) #(CPS-CONVERTER %SET-GET) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CPS-CONVERTER #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 3 4 38 3 5 23 4 5 2 1 5 21 0 3 2 5 46 1 2 0 57 0 11 0 3) #(0 16 30 36) #(CPS-CONVERTER NIL SYMBOLP *CMP-FENV* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 4 23 7 7 1 6 23 7 8 1 5 23 7 9 1 1 23 8 8 2 8 9 23 7 8 1 8 23 7 9 1 4 23 7 10 1 3 23 8 10 2 10 2 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 25 8 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 95) #(DEFINE-CPS-CONVERTER COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE SET-CPS-CONVERTER LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-ENV* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-ENV* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-ENV*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-FENV* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-FENV* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-FENV*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-DENV* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-DENV* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-DENV*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-TENV* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-TENV* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-TENV*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-SPECIALS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-SPECIALS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-SPECIALS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-MACROS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-MACROS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-MACROS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-SETF* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-SETF* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-SETF*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-STRUCTS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-STRUCTS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-STRUCTS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-GVARS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-GVARS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-GVARS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-GFUNS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-GFUNS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-GFUNS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-CONSTS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CMP-CONSTS* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-CONSTS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CMP-BASE-CONTINUATION-SYMBOL* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 1 2 4 11 0 1 23 4 4 1 2 25 5 0 2 3 4) #(0 17 20) #(NIL "K0-" *CMP-BASE-CONTINUATION-SYMBOL* BOUNDP GENSYM SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CMP-BASE-CONTINUATION-SYMBOL*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LFUN-NODE-P #K(#(80 2 0 1 23 0 2 1 1 25 1 0 1 2) #(0) #(FIND-LAMBDA-BINDING LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GFUN-NODE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 40 4 2 0 57 0 11 0 3) #(0 16 27) #(GFUN NIL LEAF-NODE-P SYMBOL-NODE-OWNER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GVAR-NODE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 40 4 2 0 57 0 11 0 3) #(0 16 27) #(GVAR NIL LEAF-NODE-P SYMBOL-NODE-OWNER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-NODE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 40 4 2 0 57 0 11 0 3) #(0 16 27) #(CONSTANT NIL LEAF-NODE-P NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GFUN-EQ #K(#(80 3 1 0 1 23 1 4 1 1 21 0 1 2 4 23 2 4 1 1 40 4 2 0 57 0 11 0 3) #(0 15 26) #(NIL GFUN-NODE-P GFUN-SYMBOL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GFUN-MEMBER #K(#(80 3 1 0 1 23 1 4 1 1 21 0 1 2 4 23 2 4 1 1 25 3 0 2 4 2 11 0 3) #(0 15 26) #(NIL GFUN-NODE-P GFUN-SYMBOL MEMBER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GFUN-SYMBOL #K(#(80 2 0 0 25 0 0 1 1) #(0) #(LEAF-NODE-VALUE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LOCAL-SYMBOL-NODE-P #K(#(80 2 1 0 1 23 1 3 1 1 21 0 1 2 3 23 2 3 1 1 25 3 0 1 3 11 0 2) #(0 15 25) #(NIL LEAF-NODE-P SYMBOL-NODE-OWNER LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-VARIABLE-NODE #K(#(80 2 0 0 25 0 0 1 1) #(0) #(MAKE-LEAF-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-FUNCTION-NODE #K(#(80 2 0 0 25 0 0 1 1) #(0) #(MAKE-LEAF-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-CONSTANT-NODE #K(#(80 2 1 0 1 23 1 3 1 1 23 2 0 2 3 2 11 0 3) #(0) #(CONSTANT MAKE-LEAF-NODE SET-NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SYMBOL-NODE-OWNER #K(#(80 2 0 0 25 0 0 1 1) #(0) #(NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-SYMBOL-NODE-OWNER #K(#(80 3 0 0 25 0 0 2 1 2) #(0) #(SET-NODE-NOTE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEW-ENV-NODE #K(#(80 2 0 3 23 0 2 1 1 23 1 3 2 1 2 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(MAKE-VARIABLE-NODE LIST *CMP-ENV*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEW-FENV-NODE #K(#(80 2 0 3 23 0 2 1 1 23 1 3 2 1 2 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(MAKE-FUNCTION-NODE LIST *CMP-FENV*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-GVAR-NODE #K(#(80 2 1 0 1 23 1 3 1 1 23 2 0 2 3 2 11 0 3) #(0) #(GVAR MAKE-VARIABLE-NODE SET-SYMBOL-NODE-OWNER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-GFUN-NODE #K(#(80 2 1 0 1 23 1 3 1 1 23 2 0 2 3 2 11 0 3) #(0) #(GFUN MAKE-FUNCTION-NODE SET-SYMBOL-NODE-OWNER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEW-GVAR-NODE #K(#(80 2 0 3 23 0 2 1 1 23 1 3 2 1 2 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(MAKE-GVAR-NODE LIST *CMP-GVARS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEW-GFUN-NODE #K(#(80 2 0 3 23 0 2 1 1 23 1 3 2 1 2 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(MAKE-GFUN-NODE LIST *CMP-GFUNS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEW-CONSTANT-NODE #K(#(80 2 0 3 23 0 2 1 1 23 1 3 2 1 2 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(MAKE-CONSTANT-NODE LIST *CMP-CONSTS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-GVAR-NODE #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 71 2 2 2 2 21 0 1 2 2 11 0 2 25 2 0 1 1) #(0 23 26) #(*CMP-GVARS* ASSOC NEW-GVAR-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-GFUN-NODE #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 71 2 2 2 2 21 0 1 2 2 11 0 2 25 2 0 1 1) #(0 23 26) #(*CMP-GFUNS* ASSOC NEW-GFUN-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-VARIABLE-NODE #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 25 1 0 1 1 38 2 2 23 3 2 2 1 2 71 2 2 2 2 21 0 3 4 2 11 0 2 25 1 0 1 1) #(0 14 19 38 41) #(IS-SPECIAL-VARIABLE GET-GVAR-NODE *CMP-ENV* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-FUNCTION-NODE #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 71 2 2 2 2 21 0 1 2 2 11 0 2 25 2 0 1 1) #(0 23 26) #(*CMP-FENV* ASSOC GET-GFUN-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CONSTANT-NODE #K(#(80 2 0 3 38 0 2 38 1 3 39 2 4 23 3 2 4 1 2 3 4 71 2 2 2 2 21 0 1 2 2 11 0 2 25 4 0 1 1) #(0 31 34) #(*CMP-CONSTS* :TEST EQUAL ASSOC NEW-CONSTANT-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(IS-SPECIAL-VARIABLE #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 11 0 2 38 1 2 25 2 0 2 1 2) #(0 14 17) #(SPECIALP *CMP-SPECIALS* MEMBER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 1 0 8 3 4 5 6 7 8 9 10 8 23 3 10 1 9 23 3 11 1 8 23 3 12 1 7 23 3 13 1 6 23 3 14 1 5 23 3 15 1 4 23 3 16 1 3 23 11 12 5 12 13 14 15 16 23 3 12 1 12 23 11 11 2 11 12 23 3 11 1 11 23 3 12 1 2 23 3 13 1 7 23 3 14 1 6 23 3 15 1 5 23 3 16 1 4 23 3 17 1 3 23 11 12 6 12 13 14 15 16 17 23 3 12 1 12 25 11 0 4 10 11 12 1 80 3 0 2 17 1 3 51 1 4 0 25 12 0 2 4 3) #(0 20 147) #(WITH-SAVED-CMP-ENVIRONMENTS COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LIST *CMP-SPECIALS* *CMP-TENV* *CMP-DENV* *CMP-FENV* *CMP-ENV* QUOTE PROGV APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CVT #K(#(80 2 2 0 1 2 69 3 2 1 2 70 57 0 38 2 5 23 3 5 1 5 23 4 0 2 1 5 1 1) #(0 11 14) #((NIL NIL NIL NIL NIL NIL NIL NIL) (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* *CMP-GVARS* *CMP-GFUNS* *CMP-CONSTS*) *CMP-BASE-CONTINUATION-SYMBOL* GET-FUNCTION-NODE CONVERT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-SYMBOL-P #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #((T NIL) MEMBER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-VALUE-FORM #K(#(80 2 3 0 1 2 3 21 0 1 2 1 23 3 5 1 1 1 3 0 2 5 21 0 4 5 5 0 2 6 1 6 0 3 6 21 0 12 7 6 40 3 5 7 21 0 8 9 7 0 7 6 1 12 23 4 7 1 5 21 0 10 11 7 0 7 6 1 12 23 5 6 1 5 21 0 13 14 6 11 0 5 23 6 6 1 4 23 6 7 1 5 25 7 0 2 6 7) #(0 12 19 22 27 32 35 40 49 54 64 69 74 79 82) #(NIL T QUOTE SYMBOL-VALUE CHARACTERP NUMBERP LIST APPEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-CONTINUATION-CALL-NODE #K(#(77 2 2 0 1 0 2 23 1 4 1 1 21 0 1 2 4 39 2 4 23 3 5 1 3 25 4 0 4 4 5 1 2 39 2 4 25 4 0 3 4 1 2) #(0 17 33) #(VALUES MULTIPLE-VALUE-CONTINUATION-NODE-P MAKE-CALL-NODE GET-GFUN-NODE APPLY) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRE-SIMPLIFY-TREE #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 2 4 23 3 5 1 1 23 4 4 1 5 1 3 0 3 4 21 0 4 7 4 23 5 0 3 1 3 2 23 3 4 1 1 23 6 5 1 4 21 0 5 6 5 11 0 3 23 7 4 1 4 25 8 0 2 4 1 11 0 3) #(0 16 28 31 36 58 61 72) #(T NIL CALL-NODE-P CALL-NODE-FUNCTION LAMBDA-NODE-P LAMBDA-CALL-SUBSTITUTE-VARIABLES LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONVERT #K(#(80 3 6 0 1 2 3 4 5 8 0 1 9 23 6 9 1 9 23 7 10 1 9 21 0 2 1 10 16 9 11 40 11 5 10 21 0 3 13 10 23 8 10 1 9 21 0 4 12 10 23 9 10 1 9 21 0 5 6 10 23 10 10 1 9 23 11 10 1 10 23 12 9 2 2 10 1 18 23 13 10 1 9 23 14 11 1 10 21 0 7 11 11 23 15 10 1 9 21 0 10 8 10 38 16 11 21 0 9 10 11 23 17 0 2 3 9 23 18 10 1 6 23 18 11 1 5 23 18 12 1 9 23 19 11 2 11 12 23 18 11 1 11 23 19 10 2 10 11 23 20 9 2 10 2 1 18 23 12 9 2 2 10 1 18 23 11 10 1 9 23 12 9 2 2 10 1 18 23 21 0 1 9 16 9 10 23 22 10 1 10 21 0 14 15 10 31 10 9 2 9 2 1 18 16 9 10 38 23 11 38 24 12 38 25 13 38 26 14 38 27 15 23 18 11 5 11 12 13 14 15 69 8 11 1 17 70 58 11 23 28 9 2 10 11 1 18 23 29 13 1 7 23 30 13 1 13 23 18 14 1 13 17 9 15 23 31 16 2 13 2 23 32 15 2 15 16 23 33 0 2 14 15 1 16 23 34 0 1 9 11 0 9) #(0 28 35 40 50 60 78 93 103 111 117 157 165 178 196 204 236 247 285) #("variable ~s assumed special" NIL QUOTE %SYMVAL "P" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) CMP-MACROEXPAND ATOM SYMBOLP CONSTANT-SYMBOL-P CONSTANT-VALUE-FORM GET-CONSTANT-NODE MAKE-CONTINUATION-CALL-NODE GET-VARIABLE-NODE GVAR-NODE-P IS-SPECIAL-VARIABLE *COMPILE-WARN-SPECIALS* WARN LIST APPEND CONVERT CHECK-ARG-COUNT GET-CPS-CONVERTER *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* CONVERT-FUNARG GENSYM NEW-ENV-NODE MAKE-CALL-NODE CONVERT-ARGUMENTS MAKE-CONTINUATION-NODE PRE-SIMPLIFY-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONVERT-FUNARG #K(#(80 3 3 0 1 2 1 23 3 6 1 1 21 0 1 2 6 23 4 6 1 1 25 5 0 2 2 6 21 1 3 4 1 16 1 6 40 6 3 6 1 5 0 4 6 21 0 6 7 6 25 6 0 2 1 2 25 7 0 2 5 1) #(0 17 28 33 42 45 50 56) #(LAMBDA NIL "bad function - ~s" SYMBOLP GET-FUNCTION-NODE MAKE-CALL-NODE CONVERT ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONVERT-ARGUMENTS #K(#(80 3 3 0 1 2 6 0 5 6 38 3 7 38 4 8 38 5 9 38 6 10 38 7 11 23 8 7 5 7 8 9 10 11 69 4 7 1 4 70 23 9 7 1 2 23 10 8 1 6 23 11 7 2 7 8 23 12 0 2 2 7 23 10 7 1 1 0 6 8 0 2 9 21 0 2 3 7 16 7 10 16 8 11 23 8 11 1 11 23 13 11 2 11 9 23 14 9 2 10 11 17 7 10 17 8 11 0 10 7 0 11 8 21 0 2 3 7 11 0 9 0 1 9 16 9 10 21 1 5 6 9 23 15 11 1 3 23 16 11 1 11 20 11 6 6 17 9 9 16 9 10 21 1 5 6 9 10 5 1 1) #(0 39 78 118 121 132 157) #("V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) NIL *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST NODE-CHILDREN REVERSE APPEND SET-NODE-CHILDREN MAKE-CONTINUATION-NODE CONVERT GENSYM NEW-ENV-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIXUP-OPTIONAL-ARGUMENT #K(#(80 2 2 0 1 3 23 2 4 1 1 21 0 1 2 4 25 3 0 3 1 2 2 21 1 3 4 1 16 1 4 23 2 4 1 4 1 5 0 2 4 21 0 6 7 4 71 3 4 1 4 23 4 0 1 4 16 1 4 71 2 2 1 5 23 5 5 1 5 71 3 4 1 6 25 3 0 3 4 5 6 25 6 0 2 3 1) #(0 16 23 28 38 41 46 81) #(NIL "bad optional argument entry -- ~s" SYMBOLP LIST CHECK-SUPPLIED-P-ARGUMENT CMP-MACROEXPAND ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-CORRESPONDING-KEYWORD #K(#(80 2 1 0 1 23 1 3 1 1 25 2 0 2 3 2) #(0) #("KEYWORD" SYMBOL-NAME INTERN) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHECK-SUPPLIED-P-ARGUMENT #K(#(80 2 2 0 1 1 21 0 1 4 1 23 2 4 1 1 21 0 2 3 4 11 0 3 25 3 0 2 2 1 11 0 3) #(0 11 21 24 30) #("bad supplied-p argument -- ~s" NIL SYMBOLP ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIXUP-KEYWORD-ARGUMENT #K(#(80 2 2 0 1 4 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 25 4 0 4 4 1 2 2 21 1 3 4 1 16 1 4 23 2 4 1 4 1 5 0 2 4 21 0 6 7 4 71 3 4 1 4 23 5 0 1 4 16 1 4 23 3 4 1 4 16 1 5 71 2 2 1 6 23 6 6 1 6 71 3 4 1 7 25 4 0 4 4 5 6 7 21 1 8 13 1 16 1 4 21 1 9 13 4 71 2 3 1 4 23 2 4 1 4 21 0 10 13 4 16 1 4 71 2 2 4 4 23 2 4 1 4 21 0 11 13 4 16 1 4 71 2 0 4 4 21 0 13 12 4 71 3 4 1 4 23 5 0 1 4 71 2 3 1 4 16 1 5 71 2 2 5 5 71 2 2 1 6 23 6 6 1 6 71 3 4 1 7 25 4 0 4 4 5 6 7 25 7 0 2 3 1) #(0 16 29 34 44 47 52 96 101 109 124 142 155 201) #(NIL "bad keyword argument entry -- ~s" SYMBOLP MAKE-CORRESPONDING-KEYWORD LIST CHECK-SUPPLIED-P-ARGUMENT CMP-MACROEXPAND ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIXUP-AUX-ARGUMENT #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 2 4 25 3 0 2 1 2 21 1 3 4 1 16 1 4 23 2 4 1 4 1 5 0 2 4 21 0 6 7 4 16 1 4 71 2 2 1 5 25 3 0 2 4 5 25 4 0 2 3 1) #(0 16 22 27 37 40 45 59) #(NIL "bad aux argument entry -- ~s" SYMBOLP LIST ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(IS-LAMBDA-KEY #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(LAMBDA-LIST-KEYWORDS MEMBER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPLIT-LAMBDA-LIST #K(#(80 2 9 0 1 2 3 4 5 6 7 8 12 0 1 11 23 9 12 2 10 11 71 2 2 12 12 0 9 13 0 9 14 0 9 15 0 9 16 0 9 17 0 9 18 0 9 19 21 0 1 2 12 23 10 20 2 12 11 23 10 11 2 10 20 0 11 20 21 0 3 5 20 16 11 21 23 11 22 1 21 21 0 5 4 22 20 21 19 19 17 11 11 21 0 3 5 11 16 11 20 50 0 6 14 20 2 17 11 11 16 11 21 0 11 22 21 0 8 9 22 0 9 22 1 10 0 6 22 21 0 12 11 22 23 11 22 1 21 21 0 14 13 22 23 12 21 1 21 20 21 18 18 17 11 11 1 7 16 11 20 50 0 15 16 20 3 17 11 11 16 11 17 17 11 11 16 11 20 50 0 17 25 20 4 17 11 11 0 6 15 16 11 21 0 11 22 21 0 19 20 22 0 9 22 1 21 0 6 22 21 0 23 22 22 23 11 22 1 21 21 0 25 24 22 23 13 21 1 21 20 21 16 16 17 11 11 1 18 16 11 20 50 0 26 27 20 5 17 11 11 0 6 14 16 11 20 50 0 28 36 20 7 17 11 11 16 11 21 0 11 22 21 0 30 31 22 0 9 22 1 32 0 6 22 21 0 34 33 22 23 11 22 1 21 21 0 36 35 22 23 14 21 1 21 20 21 13 13 17 11 11 1 29 0 11 20 21 0 37 38 20 23 15 0 1 8 23 16 19 1 19 23 16 20 1 18 23 16 21 1 16 23 16 22 1 13 25 17 0 8 19 20 17 15 21 22 14 12) #(0 53 65 73 86 98 107 110 121 126 129 134 139 144 158 167 176 185 191 202 207 210 215 220 225 239 248 254 263 266 277 282 285 290 295 300 314 322 327) #(&OPTIONAL &REST &KEY &ALLOW-OTHER-KEYS T &AUX "bad formal argument list" NIL &ENVIRONMENT MEMBER REMOVE IS-LAMBDA-KEY FIXUP-OPTIONAL-ARGUMENT FIXUP-KEYWORD-ARGUMENT FIXUP-AUX-ARGUMENT ERROR REVERSE LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REWRITE-LAMBDA #K(#(80 3 17 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 32 23 17 20 1 1 48 19 20 21 48 18 20 22 48 17 20 23 48 16 20 24 48 15 20 25 48 14 20 26 48 13 20 27 48 12 20 28 23 18 29 1 2 16 29 30 23 19 30 1 30 51 24 31 1 30 23 20 31 2 31 21 16 30 32 23 21 32 2 32 31 71 2 2 29 33 0 11 34 0 11 35 0 11 36 0 26 37 21 0 1 2 28 23 22 38 1 3 23 23 39 1 28 23 23 40 1 38 23 24 39 2 39 40 20 39 37 37 20 38 36 36 23 25 38 1 25 16 38 39 21 1 3 9 38 71 2 2 39 40 23 22 41 1 4 71 3 4 39 42 23 26 43 1 39 20 41 36 36 23 27 44 1 42 21 0 4 6 44 21 0 6 5 43 23 28 45 1 42 20 45 34 34 23 23 45 1 40 23 23 46 1 41 23 24 45 2 45 46 20 45 37 37 1 8 20 8 34 34 23 23 45 1 40 23 23 46 1 7 23 23 47 1 6 23 23 48 1 41 23 24 47 2 47 48 23 23 47 1 47 23 23 48 1 41 23 23 49 1 42 23 24 46 4 46 47 48 49 23 23 46 1 46 23 24 45 2 45 46 20 45 37 37 21 0 7 8 43 23 23 45 1 43 23 23 46 1 6 23 23 47 1 41 23 24 46 2 46 47 23 23 46 1 46 23 24 45 2 45 46 20 45 37 37 17 38 38 16 38 39 21 1 3 9 38 21 0 10 11 23 23 22 40 1 5 23 23 41 1 23 23 23 42 1 40 23 24 41 2 41 42 20 41 37 37 20 40 36 36 23 25 40 1 22 16 40 41 21 1 12 18 40 16 41 42 23 22 43 1 9 71 2 2 41 44 71 3 4 41 45 20 43 36 36 23 27 46 1 44 21 0 13 15 46 21 0 15 14 45 23 28 47 1 44 20 47 35 35 23 23 47 1 42 23 23 48 1 43 23 24 47 2 47 48 20 47 37 37 1 17 20 8 35 35 23 23 47 1 42 23 23 48 1 7 23 23 49 1 6 23 23 50 1 43 23 24 49 2 49 50 23 23 49 1 49 23 23 50 1 43 23 23 51 1 44 23 24 48 4 48 49 50 51 23 23 48 1 48 23 24 47 2 47 48 20 47 37 37 21 0 16 17 45 23 23 47 1 45 23 23 48 1 6 23 23 49 1 43 23 24 48 2 48 49 23 23 48 1 48 23 24 47 2 47 48 20 47 37 37 17 40 40 16 40 41 21 1 12 18 40 23 25 42 1 21 16 42 43 21 1 19 20 42 20 43 36 36 17 42 42 16 42 43 21 1 19 20 42 0 36 44 0 37 45 21 0 21 22 45 39 24 46 39 29 47 23 20 47 2 47 31 23 30 46 2 46 47 23 23 47 1 10 23 23 48 1 37 39 24 49 39 29 50 23 20 50 2 50 32 23 30 49 2 49 50 71 2 2 30 50 23 31 50 1 50 71 3 4 30 51 23 32 51 1 51 23 24 47 6 47 48 49 50 51 33 23 23 47 1 47 23 24 45 2 46 47 1 23 39 24 46 39 29 47 23 20 47 2 47 31 23 30 46 2 46 47 39 24 47 39 29 48 23 20 48 2 48 32 23 30 47 2 47 48 71 2 2 30 48 23 31 48 1 48 71 3 4 30 49 23 32 49 1 49 23 24 45 5 46 47 48 49 33 23 33 46 1 21 23 33 47 1 22 39 34 48 23 20 48 2 48 25 25 23 0 11 44 45 46 47 35 24 34 23 27 48 28 80 3 0 1 16 1 3 25 35 0 2 2 3) #(0 113 142 155 189 194 225 298 334 345 350 379 392 424 429 460 533 569 580 593 608 619 708 773 807) #("E" "K" "R" %SUPPLIED-P IF %NOT-SUPPLIED "O" LET* NIL 7 6 5 4 3 2 1 0 SPLIT-LAMBDA-LIST SPLIT-DECLARATIONS PARSE-DECLARATIONS MAPCAR SET-DIFFERENCE GENSYM LIST APPEND REVERSE FOURTH CONSTANT-EXPRESSION-P STRIP-QUOTE UNPARSE-VARIABLE-DECLARATIONS APPLY UNPARSE-FUNCTION-DECLARATIONS UNPARSE-COMPILER-DECLARATIONS LENGTH FIRST ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-LIST-DEFAULT #K(#(80 2 2 0 1 2 23 2 4 1 1 23 3 4 2 4 3 23 4 5 1 2 25 5 0 2 4 5) #(0) #(6 0 LENGTH LIST MAKE-LIST APPEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-LIST-DATA #K(#(80 2 8 0 1 2 3 4 5 6 7 13 23 8 10 1 1 48 9 10 11 48 8 10 12 48 7 10 13 48 6 10 14 48 5 10 15 48 4 10 0 48 3 10 16 48 2 10 17 23 9 18 1 11 23 9 19 1 12 39 10 20 23 11 20 2 20 12 39 12 21 23 11 21 2 21 15 39 13 22 23 11 22 2 22 15 25 14 0 9 18 19 20 14 21 13 16 22 17) #(0) #(7 6 5 4 3 2 1 0 SPLIT-LAMBDA-LIST LENGTH SECOND MAPCAR THIRD FIRST LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-LAMBDA-LIST-DATA #K(#(80 2 2 0 1 1 21 1 1 2 1 16 1 4 40 4 2 4 1 3 0 3 4 21 0 4 5 4 71 2 2 1 4 25 2 0 1 4 38 3 4 23 4 4 2 1 4 71 2 2 4 4 21 0 6 7 4 11 0 3 25 5 0 1 1) #(0 11 20 23 28 38 57 60) #(LAMBDA NIL LAMBDA-LIST-DATA *CMP-FENV* ASSOC GET-LAMBDA-LIST-DATA) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 5 3 4 5 6 7 5 23 8 8 1 7 23 8 9 1 6 23 8 10 1 5 23 8 11 1 1 23 9 10 2 10 11 23 8 10 1 10 23 8 11 1 5 23 8 12 1 4 23 9 11 2 11 12 23 8 11 1 11 23 9 9 3 9 10 11 23 8 9 1 9 23 8 10 1 3 23 8 11 1 5 23 8 12 1 2 23 9 11 2 11 12 23 8 11 1 11 23 9 10 2 10 11 23 8 10 1 10 25 9 0 3 8 9 10 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 137) #(DEFINE-LAMBDA-LIST COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA-LIST-DATA CMP-LAMBDA-LIST-DATA QUOTE GET SETF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-LAMBDA-LIST-DATA #K(#(80 2 1 0 0 46 1 2 0 57 0) #(0) #(CMP-LAMBDA-LIST-DATA) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA AREF (A I &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-AREF (X Y Z &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA - (X &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA / (X &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA SLOT-VALUE (X &OPTIONAL Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA SETQ (VAR VAL &REST MORE) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA LAMBDA (ARGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA LET (BINDINGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA LET* (BINDINGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA FLET (BINDINGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA LABELS (BINDINGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA MACROLET (BINDINGS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA IF (TEST CONS &OPTIONAL ALT) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA PROGN (&REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA LOCALLY (&REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA THE (A B) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA BLOCK (TAG &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA FUNCTION (FUN) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CATCH (TAG &REST FORMS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA THROW (TAG FORM) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA ERRSET (FORM &OPTIONAL PRINT) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA UNWIND-PROTECT (PFORM &REST CFORMS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA TAGBODY (&REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA GO (TAG) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA RETURN-FROM (TAG &OPTIONAL FORM) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA PROGV (SYMS VALS &REST BODY) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CASE (KEY &REST FORMS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA MULTIPLE-VALUE-CALL (FUNCION &REST FORMS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA NTH-VALUE (N FORM) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA MULTIPLE-VALUE-PROG1 (FORM &REST FORMS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHECK-ARG-COUNT #K(#(80 2 7 0 1 2 3 4 5 6 8 16 1 9 17 1 10 23 7 10 1 10 23 8 11 1 9 21 0 1 9 11 48 7 11 12 48 6 11 13 48 5 11 14 48 4 11 15 37 60 2 3 10 12 23 9 0 2 2 9 21 0 8 4 15 21 0 8 5 14 2 43 12 13 16 37 62 6 7 10 16 25 9 0 2 3 9 11 0 8 11 0 8 11 0 8) #(0 32 54 60 65 70 81 87 90 93) #("too few arguments to ~s" "too many arguments to ~s" 5 3 1 0 NIL LENGTH FIND-LAMBDA-LIST-DATA ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-EXPRESSION-P #K(#(80 2 3 0 1 2 1 23 3 5 1 1 21 0 1 7 5 23 4 5 1 1 21 0 2 3 5 0 3 5 1 4 0 2 5 21 0 5 6 5 11 0 5 25 5 0 1 1 16 1 5 40 5 4 5 21 0 8 9 5 11 0 5 11 0 3) #(0 17 27 32 35 40 43 48 60 63) #(T NIL QUOTE ATOM SYMBOLP CONSTANT-SYMBOL-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(STRIP-QUOTE #K(#(80 2 0 0 21 1 1 2 1 71 2 2 1 0 57 0 11 0 1) #(0 9 16) #() 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIMPLE-LAMBDA-NODE-P #K(#(80 2 2 0 1 7 23 2 4 1 1 14 4 59 7 4 5 6 7 8 9 10 21 0 1 2 7 11 0 2 21 0 3 4 10 11 0 2 21 0 5 6 9 0 2 4 1 7 0 3 4 21 0 8 9 4 11 0 4 23 3 4 1 1 23 4 4 1 4 16 4 4 23 5 5 1 1 23 6 4 2 4 5 21 0 10 11 4 11 0 2 11 0 3) #(0 27 30 35 38 43 48 51 56 59 88 91) #(NIL T LAMBDA-NODE-LAMBDA-LIST LAMBDA-NODE-ARGLIST LAST LAMBDA-NODE-BODY ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIXUP-LAMBDA-CALL-NODE #K(#(80 2 4 0 1 2 3 10 23 4 6 1 1 23 5 7 1 6 21 0 1 17 7 23 6 7 1 6 23 7 8 1 1 16 7 9 71 2 2 7 10 23 8 11 1 7 23 9 12 1 1 21 0 3 2 12 23 10 0 1 2 21 0 4 5 11 0 5 12 1 6 2 43 9 10 12 3 62 8 12 12 21 0 7 8 12 23 10 0 1 3 37 60 9 10 8 9 23 10 0 1 4 2 43 9 10 12 37 60 11 12 8 12 2 45 8 9 13 71 3 4 7 14 23 11 13 2 13 14 23 12 14 1 1 51 18 15 0 23 13 15 2 15 13 23 14 13 2 14 15 23 15 0 2 1 13 2 43 9 10 12 37 60 13 14 12 8 23 12 13 1 1 23 16 14 3 8 9 10 23 17 13 2 13 14 23 15 0 2 1 13 21 0 15 16 11 23 18 7 1 6 23 19 7 1 7 16 7 7 25 20 0 2 6 7 11 0 5 11 0 5 80 2 1 21 2 23 22 3 1 2 23 22 4 1 1 23 14 3 2 3 4 25 23 0 1 3) #(0 23 56 61 66 71 81 86 91 97 102 113 156 167 191 196 215 218 221) #("can't inline a non-simple lambda" "too many arguments" "too few arguments" NIL CALL-NODE-FUNCTION LAMBDA-NODE-P LAMBDA-NODE-LAMBDA-LIST CALL-NODE-ARG-COUNT SIXTH SIMPLE-LAMBDA-NODE-P ERROR NTHCDR NODE-CHILDREN MAPCAR APPEND SET-NODE-CHILDREN - BUTLAST LAMBDA-NODE-ARGLIST LAST LAMBDA-NODE-DELETE-ARG QUOTE LIST GET-CONSTANT-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-LIST-NUM-VARIABLES #K(#(80 2 5 0 1 2 3 4 5 48 6 1 7 48 5 1 8 48 4 1 9 23 5 9 1 9 48 3 1 10 21 0 1 2 10 0 5 10 1 3 0 6 10 48 2 1 11 21 0 4 5 11 0 5 11 1 6 0 6 11 25 6 0 5 7 8 9 10 11) #(0 35 40 43 52 57 60) #(8 5 4 1 0 LENGTH +) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIX-LAMBDA-SPECIALS #K(#(80 2 11 0 1 2 3 4 5 6 7 8 9 4 17 16 1 13 71 2 2 1 14 23 10 14 1 14 39 11 15 23 12 15 2 15 13 21 0 1 9 15 0 12 16 0 12 17 0 12 18 0 13 19 16 19 20 21 1 2 8 19 23 11 21 1 20 21 0 3 6 21 23 13 22 1 3 23 14 23 1 20 21 0 4 5 23 23 15 0 2 2 20 20 20 17 17 20 22 17 17 20 22 16 16 20 20 18 18 1 7 20 20 16 16 17 19 19 16 19 20 21 1 2 8 19 23 16 21 1 16 78 1 21 0 16 14 21 23 17 22 1 11 23 17 23 1 10 23 17 24 1 18 23 18 23 2 23 24 23 17 23 1 23 23 17 24 1 10 23 17 25 1 9 23 18 24 2 24 25 23 17 24 1 24 23 17 25 1 8 23 17 26 1 7 23 17 27 1 6 23 17 28 1 5 23 16 29 1 17 23 18 28 2 28 29 23 17 28 1 28 71 2 2 14 29 23 18 26 4 26 27 28 29 23 17 26 1 26 23 18 25 2 25 26 23 17 25 1 25 23 18 22 4 22 23 24 25 23 17 22 1 22 23 18 21 2 21 22 47 4 1 21 0 11 0 1) #(0 42 62 72 87 93 111 115 126 274) #("can't bind to a constant - ~s" "SV" 1 SETQ NIL LAMBDA FUNCTION T QUOTE %DYNAMIC-BIND SPLIT-DECLARATIONS IS-SPECIAL-VARIABLE SOME GENSYM CONSTANTP ERROR NREVERSE LIST APPEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONVERT-LAMBDA #K(#(80 2 3 0 1 2 8 38 3 5 38 4 6 38 5 7 38 6 8 38 7 9 23 8 5 5 5 6 7 8 9 69 4 5 1 2 70 57 0 23 9 7 1 3 71 2 2 1 8 20 7 8 7 71 2 0 1 8 23 10 7 2 7 8 23 11 7 1 7 39 12 8 16 7 9 23 13 8 2 8 9 16 8 9 71 2 2 7 10 23 14 10 1 10 23 8 11 1 2 71 2 2 10 12 23 15 10 2 11 12 23 16 9 2 10 9 71 2 0 7 10 23 17 0 3 8 9 10 1 1) #(0 36 39) #(PROGN "K" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM REWRITE-LAMBDA FIX-LAMBDA-SPECIALS NEW-ENV-NODE MAPCAR SPLIT-DECLARATIONS APPEND CONVERT MAKE-LAMBDA-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA #K(#(80 3 0 1 23 0 3 1 1 25 1 0 2 2 3) #(0) #(CONVERT-LAMBDA MAKE-CONTINUATION-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LET #K(#(80 3 1 0 6 71 2 2 1 4 71 2 0 1 5 51 4 6 0 23 1 6 2 6 4 51 1 7 0 23 1 7 2 7 4 23 2 8 1 3 23 2 9 1 6 23 3 8 3 8 9 5 23 2 8 1 8 23 3 4 2 8 7 25 4 0 2 4 2 80 2 1 5 0 21 1 2 3 1 71 2 2 1 0 57 0 11 0 2 80 2 0 0 21 1 5 6 1 16 1 0 57 0 11 0 1) #(0 69 79 86 89 98 103) #(LAMBDA MAPCAR LIST APPEND CONVERT NIL) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(IF #K(#(80 3 5 0 1 2 3 4 14 71 2 2 1 8 71 3 4 1 9 23 5 10 1 1 38 6 11 38 7 12 38 8 13 38 9 14 38 10 15 23 11 11 5 11 12 13 14 15 69 7 11 1 2 70 58 9 25 12 0 2 8 9 23 13 13 1 6 23 14 13 1 13 23 11 14 1 13 38 6 15 38 7 16 38 8 17 38 9 18 38 10 19 23 11 15 5 15 16 17 18 19 69 7 15 1 4 70 58 15 23 15 15 2 15 2 23 16 0 2 14 15 1 1 23 13 17 1 5 23 14 17 1 17 23 11 18 1 17 23 17 19 1 4 23 12 20 2 9 17 23 16 20 2 3 20 23 12 21 2 10 17 23 16 21 2 3 21 23 15 19 4 19 20 21 13 23 18 0 2 18 19 1 3) #(0 53 62 106 123) #(NIL %TEST "J" "V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) FOURTH *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST CONVERT GENSYM NEW-ENV-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE GET-GFUN-NODE MAKE-LAMBDA-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROGN #K(#(80 3 2 0 1 12 17 1 5 23 2 5 1 5 16 5 6 17 5 7 23 3 8 2 6 2 0 7 9 16 9 10 21 1 1 4 9 0 10 11 38 4 12 38 5 13 38 6 14 38 7 15 38 8 16 23 9 12 5 12 13 14 15 16 69 4 12 1 3 70 58 12 23 3 8 2 11 12 17 9 9 16 9 10 21 1 1 4 9 23 10 14 1 3 23 11 14 1 14 23 9 14 1 14 23 12 0 2 14 8 1 2 11 0 8) #(0 37 69 89 112) #("V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) REVERSE CONVERT *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM NEW-ENV-NODE MAKE-CONTINUATION-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LOCALLY #K(#(80 3 1 0 1 17 1 4 20 3 4 4 25 1 0 2 4 2) #(0) #(PROGN CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(THE #K(#(80 3 0 1 71 3 4 1 3 25 0 0 2 3 2) #(0) #(CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REWRITE-LET* #K(#(80 2 0 7 71 2 2 1 2 23 0 2 1 2 71 2 0 1 3 23 1 3 1 3 71 2 2 3 4 16 3 5 23 2 5 1 5 16 5 6 71 2 2 5 7 71 3 4 5 8 29 1 0 5 7 8 4 2 6 80 6 1 3 7 17 4 7 21 1 2 3 7 16 4 7 16 7 8 23 4 8 2 8 5 23 5 9 1 6 23 5 10 1 7 23 6 10 1 10 23 5 10 1 10 23 7 11 1 8 17 4 12 23 8 13 2 8 5 27 1 12 5 1 2 3 12 13 23 5 12 1 12 25 6 0 4 9 10 11 12 23 5 7 1 6 23 5 8 1 4 39 6 9 39 7 10 23 9 10 2 10 5 23 10 9 2 9 10 23 11 10 1 1 23 12 11 1 2 25 6 0 6 7 8 9 10 11 3) #(0 59 72 140) #(FIXUP-LET-VARIABLES SPLIT-DECLARATIONS PARSE-DECLARATIONS LET ASSOC LIST APPEND UNPARSE-VARIABLE-DECLARATIONS REMOVE MAPCAR APPLY UNPARSE-FUNCTION-DECLARATIONS UNPARSE-COMPILER-DECLARATIONS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LET* #K(#(80 3 0 1 23 0 3 1 1 25 1 0 2 3 2) #(0) #(REWRITE-LET* CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONVERT-NAMED-LAMBDA #K(#(80 2 2 0 1 9 16 1 4 71 2 2 1 5 71 2 0 1 6 23 2 6 1 6 16 6 7 71 2 2 6 8 23 3 9 1 3 23 3 10 1 5 23 3 11 1 2 23 3 12 1 4 23 4 11 3 11 12 8 23 3 11 1 11 23 4 4 4 9 10 7 11 25 5 0 1 4) #(0) #(BLOCK LAMBDA SPLIT-DECLARATIONS LIST APPEND CONVERT-LAMBDA) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FLET #K(#(80 3 2 0 1 8 71 2 2 1 5 71 2 0 1 6 23 2 6 1 6 23 3 7 1 4 71 2 2 6 8 23 4 6 2 7 8 51 4 7 0 23 5 7 2 7 5 38 6 8 38 7 9 38 8 10 38 9 11 38 10 12 23 3 8 5 8 9 10 11 12 69 3 8 1 2 70 57 0 51 3 10 0 23 5 10 2 10 5 23 11 11 2 6 2 23 12 10 2 10 11 39 13 11 23 14 0 3 11 10 7 1 1 80 2 0 1 16 1 2 25 15 0 1 2 80 2 0 0 25 16 0 1 1) #(0 76 79 113 125) #((*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) PROGN SPLIT-DECLARATIONS LIST APPEND MAPCAR *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* CONVERT MAKE-LAMBDA-NODE MAKE-CALL-NODE APPLY NEW-FENV-NODE CONVERT-NAMED-LAMBDA) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LABELS #K(#(80 3 5 0 1 2 3 4 11 71 2 2 1 8 71 2 0 1 9 23 5 9 1 9 23 6 10 1 7 71 2 2 9 11 23 7 9 2 10 11 38 8 10 38 9 11 38 10 12 38 11 13 38 12 14 23 6 10 5 10 11 12 13 14 69 6 10 1 2 70 57 0 51 4 12 0 23 13 12 2 12 8 51 3 13 0 23 13 13 2 13 8 23 14 14 2 9 2 23 15 15 1 5 39 16 16 23 15 17 1 4 23 17 18 2 3 14 23 18 16 4 16 17 18 13 23 17 16 2 12 16 23 16 0 2 15 16 1 1 80 2 0 0 25 19 0 1 1 80 2 0 1 16 1 2 25 20 0 1 2) #(0 69 72 139 148) #(NIL %Y-LIST %Y (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) PROGN SPLIT-DECLARATIONS LIST APPEND *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* MAPCAR CONVERT GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE APPLY CONVERT-NAMED-LAMBDA NEW-FENV-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(BLOCK #K(#(80 3 7 0 1 2 3 4 5 6 10 71 2 2 1 10 71 2 0 1 11 38 7 12 38 8 13 38 9 14 38 10 15 38 11 16 23 12 12 5 12 13 14 15 16 69 9 12 1 2 70 57 0 23 13 14 1 8 23 14 14 1 14 23 13 15 1 7 23 14 15 1 15 23 12 16 3 6 10 14 38 10 17 20 16 17 16 49 10 16 0 23 15 16 1 5 23 12 17 1 4 23 12 18 1 10 23 16 17 2 17 18 23 17 17 1 17 23 12 18 2 15 14 23 12 19 1 3 23 16 19 2 19 11 23 18 19 2 19 15 23 19 18 2 18 19 23 20 0 4 16 2 17 18 1 1) #(0 50 53) #(PROGN QUOTE %CATCH-BLOCK BLOCK "K" "T" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM NEW-ENV-NODE GET-GFUN-NODE APPEND GET-CONSTANT-NODE CONVERT MAKE-LAMBDA-NODE MAKE-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-BLOCK-TAG #K(#(80 2 2 0 1 4 38 2 4 16 4 5 21 1 1 7 4 16 5 6 50 0 2 3 2 6 71 2 2 5 7 40 1 7 6 1 4 0 3 6 21 0 5 6 6 71 3 4 5 0 57 0 17 4 4 16 4 5 21 1 1 7 4 11 0 3) #(0 17 26 37 40 45 52 63) #(BLOCK NIL *CMP-TENV*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SETQ #K(#(80 3 9 0 1 2 3 4 5 6 7 8 10 71 2 2 1 12 71 3 4 1 13 71 3 0 1 14 21 0 1 2 14 23 9 15 1 4 23 9 16 1 3 23 9 17 1 12 23 9 18 1 13 23 10 16 3 16 17 18 23 9 16 1 16 23 9 17 1 3 23 10 17 2 17 14 23 9 17 1 17 23 10 12 3 15 16 17 25 11 0 2 12 2 38 12 14 38 13 15 38 14 16 38 15 17 38 16 18 23 9 14 5 14 15 16 17 18 69 11 14 1 4 70 58 14 25 11 0 2 13 14 23 17 16 1 10 23 18 16 1 16 23 19 17 1 12 23 20 18 1 17 21 0 5 8 18 23 21 18 1 12 21 0 6 7 18 23 22 0 2 5 12 23 9 18 1 16 23 23 19 1 8 23 9 20 1 7 23 24 21 1 17 23 9 21 1 21 23 10 20 2 20 21 23 25 20 1 20 23 26 19 4 19 2 20 16 23 27 0 2 18 19 1 3 23 9 18 1 16 23 23 19 1 9 23 26 19 4 19 2 17 16 23 27 0 2 18 19 1 3) #(0 33 94 123 132 157 167 173 225) #(SETQ PROGN "can't change the value of a constant - ~s" NIL QUOTE %SET-SYMVAL %SETQ "V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) LIST APPEND CONVERT *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* GENSYM NEW-ENV-NODE GET-VARIABLE-NODE GVAR-NODE-P CONSTANTP ERROR GET-GFUN-NODE LEAF-NODE-VALUE GET-CONSTANT-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FUNCTION #K(#(80 3 4 0 1 2 3 2 71 2 2 1 7 23 4 8 1 7 21 0 1 4 8 23 5 7 1 7 23 6 8 1 7 21 0 2 3 8 23 7 8 1 3 25 8 0 3 8 2 7 25 9 0 2 2 7 21 1 5 6 7 16 7 8 40 8 4 8 1 7 0 5 8 21 0 8 9 8 25 10 0 2 7 2 25 11 0 2 6 7) #(0 23 38 50 56 61 70 73 78 84) #(%SYMFUN LAMBDA NIL "bad argument for FUNCTION -- ~s" SYMBOLP GET-FUNCTION-NODE GFUN-NODE-P GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-CALL-NODE CONVERT ERROR) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CATCH #K(#(80 3 3 0 1 2 5 23 3 6 1 5 71 2 2 1 7 23 3 7 1 7 23 3 8 1 4 23 3 9 1 3 71 2 0 1 10 23 4 8 3 8 9 10 23 3 8 1 8 23 4 6 3 6 7 8 25 5 0 2 6 2) #(0) #(NIL LAMBDA %CATCH LIST APPEND CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ERRSET #K(#(80 3 5 0 1 2 3 4 6 71 2 2 1 8 23 5 9 1 1 37 61 1 2 9 4 71 3 4 1 9 1 3 0 3 9 23 6 10 1 7 23 6 11 1 6 23 6 12 1 5 23 6 13 1 8 23 7 11 3 11 12 13 23 6 11 1 11 23 6 12 1 9 23 7 8 3 10 11 12 25 8 0 2 8 2) #(0 25 32 35) #(T 3 NIL LAMBDA %ERRSET LENGTH LIST APPEND CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNWIND-PROTECT #K(#(80 3 4 0 1 2 3 6 23 4 7 1 6 23 4 8 1 5 23 4 9 1 4 23 4 10 1 3 71 2 2 1 11 23 4 11 1 11 23 5 9 3 9 10 11 23 4 9 1 9 23 5 8 2 8 9 23 4 8 1 8 23 4 9 1 5 23 4 10 1 4 23 4 11 1 3 71 2 0 1 12 23 5 10 3 10 11 12 23 4 10 1 10 23 5 9 2 9 10 23 4 9 1 9 23 5 7 3 7 8 9 25 6 0 2 7 2) #(0) #(NIL LAMBDA FUNCTION %UNWIND-PROTECT LIST APPEND CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROGV #K(#(80 3 4 0 1 2 3 9 71 2 2 1 7 71 3 4 1 8 71 3 0 1 9 23 4 10 1 6 23 4 11 1 7 23 4 12 1 8 23 4 13 1 5 23 4 14 1 4 23 4 15 1 3 23 5 14 3 14 15 9 23 4 14 1 14 23 5 13 2 13 14 23 4 13 1 13 23 5 7 4 10 11 12 13 25 6 0 2 7 2) #(0) #(NIL LAMBDA FUNCTION %PROGV LIST APPEND CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CASE #K(#(80 3 8 0 1 2 3 4 5 6 7 16 71 2 2 1 11 39 8 12 71 2 0 1 13 23 9 12 2 12 13 39 10 13 71 2 0 1 14 23 9 13 2 13 14 0 12 14 23 11 15 1 14 16 15 15 23 12 15 2 15 10 21 0 1 2 15 23 13 14 1 14 1 3 23 14 16 1 3 23 15 13 2 13 16 38 16 15 38 17 16 38 18 17 38 19 18 38 20 19 23 14 15 5 15 16 17 18 19 69 9 15 1 5 70 58 12 25 21 0 2 11 12 23 22 17 1 8 23 23 17 1 17 23 14 18 1 17 38 16 19 38 17 20 38 18 21 38 19 22 38 20 23 23 14 19 5 19 20 21 22 23 69 9 19 1 7 70 58 19 23 24 19 2 19 2 23 25 0 2 18 19 1 4 23 22 21 1 7 23 23 21 1 21 23 14 22 1 21 39 24 23 23 26 24 1 6 23 14 25 1 5 23 27 26 2 14 4 23 14 26 1 26 23 15 25 2 25 26 23 28 25 1 25 51 8 26 1 21 23 9 26 2 26 13 23 29 23 5 23 24 17 25 26 23 25 0 2 22 23 1 6 80 3 2 0 30 1 23 14 5 1 4 23 15 5 2 5 2 23 21 5 2 5 1 25 25 0 2 3 5) #(0 67 74 85 114 123 167 184 262) #(NIL VECTOR QUOTE %CASE "K" "V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) (T OTHERWISE) FIRST MAPCAR REST LAST MEMBER BUTLAST LIST APPEND *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* CONVERT GENSYM NEW-ENV-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE GET-GFUN-NODE COERCE GET-CONSTANT-NODE APPLY PROGN) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SPLIT-TAGBODY-BODY #K(#(80 2 2 0 1 9 0 1 4 16 4 5 23 2 5 1 5 21 0 2 1 5 23 3 6 1 2 20 6 4 4 16 4 5 0 3 6 0 5 7 0 3 8 17 4 9 16 9 10 21 1 3 7 9 0 10 11 21 1 4 5 11 20 10 8 8 1 6 23 4 12 1 8 23 5 12 2 7 12 20 12 6 6 0 10 7 0 3 8 17 9 9 16 9 10 21 1 3 7 9 23 4 11 1 8 23 5 11 2 7 11 20 11 6 6 23 4 6 1 6 39 6 11 23 7 11 2 11 6 39 8 12 23 7 12 2 12 6 25 5 0 2 11 12) #(0 22 31 54 62 68 89 100) #("S" NIL SYMBOLP GENSYM REVERSE LIST FIRST MAPCAR SECOND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(TAGBODY #K(#(80 3 12 0 1 2 3 4 5 6 7 8 9 10 0 16 17 1 15 21 0 1 8 15 39 11 16 23 12 16 2 16 15 21 0 2 3 16 23 13 16 1 9 23 13 17 1 3 23 14 15 3 16 15 17 25 15 0 2 15 2 23 16 15 1 15 16 15 16 71 2 2 15 17 23 17 17 1 17 38 18 18 38 19 19 38 20 20 38 21 21 38 22 22 23 13 18 5 18 19 20 21 22 69 13 18 1 5 70 57 0 51 12 20 0 23 23 20 2 20 16 23 24 21 1 12 23 25 21 1 21 23 24 22 1 11 23 25 22 1 22 34 14 23 38 18 24 38 19 25 38 20 26 38 21 27 38 22 28 23 13 24 5 24 25 26 27 28 69 13 24 1 7 70 17 17 24 17 20 25 23 17 25 1 25 51 9 26 4 23 22 20 16 23 26 0 3 26 24 25 23 27 24 1 7 23 13 25 2 21 22 23 27 26 1 6 39 28 27 23 27 28 1 5 23 27 29 1 4 16 20 30 23 28 29 5 29 2 30 21 22 23 29 29 2 14 29 35 23 30 23 30 27 4 27 28 29 30 23 29 27 2 20 27 23 28 26 2 26 27 23 31 25 2 25 26 23 28 0 3 24 2 25 1 4 23 13 26 4 10 16 20 22 38 21 27 20 26 27 26 49 21 26 0 23 13 26 1 9 16 17 27 23 14 26 2 26 27 23 24 27 1 8 23 25 27 1 27 23 13 27 1 27 23 32 28 1 14 23 33 28 2 21 28 23 29 27 2 27 28 23 15 26 2 26 27 23 29 26 2 14 26 35 23 27 20 26 27 26 36 23 26 0 1 6 25 15 0 2 14 2 80 7 5 0 5 6 7 10 5 38 18 12 38 19 13 38 20 14 38 21 15 38 22 16 23 13 12 5 12 13 14 15 16 69 11 12 1 11 70 57 0 23 13 14 4 10 4 3 2 38 21 15 20 14 15 14 49 21 14 0 23 13 14 1 9 23 14 14 2 14 5 23 24 15 1 8 23 25 15 1 15 23 13 15 1 15 23 28 16 1 6 23 29 15 2 15 16 23 15 14 2 14 15 23 29 14 2 7 14 35 1 15 20 14 15 14 36 1 14 0 1 10 80 2 0 1 23 24 2 1 1 25 34 0 1 2) #(0 24 38 61 108 111 173 285 375 381 419 422 503) #(NIL %DO-CATCH-TAGBODY %Y-LIST %Y %CATCH-TAGBODY "V" PROGN TAGBODY "T" "K" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) CONSP EVERY LIST APPEND CONVERT SPLIT-TAGBODY-BODY REVERSE *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* MAPCAR GENSYM NEW-ENV-NODE MAPC GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE APPLY MAKE-LAMBDA-NODE GET-CONSTANT-NODE MAKE-CONTINUATION-CALL-NODE NEW-FENV-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-GO-TAG #K(#(80 2 2 0 1 5 38 2 4 16 4 5 21 1 1 7 4 16 5 6 50 0 2 3 2 6 71 2 2 5 7 23 3 6 2 1 7 1 4 0 3 6 21 0 5 6 6 23 4 6 1 5 71 2 2 5 7 23 5 7 2 1 7 71 3 4 5 8 48 7 8 7 25 6 0 2 6 7 17 4 4 16 4 5 21 1 1 7 4 11 0 3) #(0 17 26 39 42 47 78 89) #(TAGBODY NIL *CMP-TENV* MEMBER FOURTH POSITION LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GO #K(#(80 3 2 0 1 5 71 2 2 1 5 23 2 6 1 5 16 6 7 71 2 2 6 8 21 0 1 2 7 23 3 9 1 3 25 4 0 3 9 7 8 25 5 0 2 4 5) #(0 29 41) #(%THROW-GO "no tag named ~s in current lexical context" FIND-GO-TAG GET-GFUN-NODE MAKE-CALL-NODE ERROR) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MULTIPLE-VALUE-CALL #K(#(80 3 10 0 1 2 3 4 5 6 7 8 9 11 23 10 13 1 1 60 13 12 5 2 1 23 11 13 1 11 71 2 2 1 14 23 11 14 1 14 23 11 15 1 10 71 2 0 1 16 51 6 17 0 23 12 16 2 17 16 23 13 15 2 15 16 23 11 15 1 15 23 13 13 3 13 14 15 25 14 0 2 13 2 71 2 2 1 13 71 3 4 1 14 38 15 15 38 16 16 38 17 17 38 18 18 38 19 19 23 11 15 5 15 16 17 18 19 69 9 15 1 4 70 58 14 25 14 0 2 13 14 23 20 17 1 8 23 21 17 1 17 23 20 18 1 7 23 21 18 1 18 23 11 19 1 17 23 11 20 1 18 23 22 21 1 6 23 20 22 1 5 23 21 22 1 22 23 11 22 1 22 23 22 23 1 4 23 23 23 3 23 2 17 23 24 22 2 22 23 23 23 21 3 21 22 18 23 24 20 2 20 21 23 14 20 2 14 20 23 24 0 2 19 20 1 3 23 11 13 1 3 71 2 2 1 14 23 11 14 1 14 23 13 13 2 13 14 25 14 0 2 13 2 80 2 1 25 2 23 11 3 1 2 23 11 4 1 1 25 13 0 2 3 4) #(0 25 84 123 132 227 254) #(FUNCALL %MVC "D" %MV-COLLECT "V" "F" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) NCONC APPLY #(2 3) LENGTH LIST MAPCAR APPEND CONVERT *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* GENSYM NEW-ENV-NODE GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE MULTIPLE-VALUE-LIST) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NTH-VALUE #K(#(80 3 6 0 1 2 3 4 5 11 71 2 2 1 9 71 3 4 1 10 38 6 11 38 7 12 38 8 13 38 9 14 38 10 15 23 11 11 5 11 12 13 14 15 69 8 11 1 2 70 58 10 25 12 0 2 9 10 23 13 13 1 7 23 14 13 1 13 23 13 14 1 6 23 14 14 1 14 23 11 15 1 13 23 11 16 1 14 23 15 17 1 5 23 13 18 1 4 23 14 18 1 18 23 11 18 1 18 23 15 19 1 3 23 16 19 3 19 2 13 23 17 18 2 18 19 23 16 17 3 17 18 14 23 17 16 2 16 17 23 12 16 2 10 16 23 17 0 2 15 16 1 1) #(0 49 58) #(%NTH-VALUE "D" %MV-COLLECT "V" "C" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST CONVERT GENSYM NEW-ENV-NODE GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(THROW #K(#(80 3 6 0 1 2 3 4 5 11 71 2 2 1 9 71 3 4 1 10 38 6 11 38 7 12 38 8 13 38 9 14 38 10 15 23 11 11 5 11 12 13 14 15 69 8 11 1 2 70 58 10 25 12 0 2 9 10 23 13 13 1 7 23 14 13 1 13 23 13 14 1 6 23 14 14 1 14 23 11 15 1 13 23 11 16 1 14 23 15 17 1 5 23 13 18 1 4 23 14 18 1 18 23 11 18 1 18 23 15 19 1 3 23 16 19 2 19 13 23 17 18 2 18 19 23 16 17 3 17 18 14 23 17 16 2 16 17 23 12 16 2 10 16 23 17 0 2 15 16 1 1) #(0 49 58) #(%THROW "D" %MV-COLLECT "V" "C" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST CONVERT GENSYM NEW-ENV-NODE GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RETURN-FROM #K(#(80 3 6 0 1 2 3 4 5 10 71 2 2 1 9 71 3 4 1 10 23 6 11 1 9 21 0 1 4 11 38 7 12 38 8 13 38 9 14 38 10 15 38 11 16 23 12 12 5 12 13 14 15 16 69 7 12 1 3 70 57 0 23 13 14 1 6 23 14 14 1 14 23 12 15 1 14 23 15 16 1 5 23 13 17 1 4 23 14 17 1 17 23 12 17 1 17 23 15 18 1 3 23 16 18 2 18 11 23 17 17 2 17 18 23 16 16 3 16 17 14 23 17 14 2 15 16 23 18 0 2 10 14 1 2 25 19 0 2 8 9) #(0 30 59 62 135) #(%THROW-RETURN-FROM "D" %MV-COLLECT "V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) "no block named ~s in current lexical context" FIND-BLOCK-TAG *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM NEW-ENV-NODE GET-GFUN-NODE MAKE-CALL-NODE MAKE-CONTINUATION-NODE CONVERT ERROR) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MULTIPLE-VALUE-PROG1 #K(#(80 3 8 0 1 2 3 4 5 6 7 14 71 2 2 1 11 71 2 0 1 12 38 8 13 38 9 14 38 10 15 38 11 16 38 12 17 23 13 13 5 13 14 15 16 17 69 10 13 1 2 70 57 0 23 14 15 1 9 23 15 15 1 15 23 14 16 1 8 23 15 16 1 16 23 13 17 1 15 23 16 18 1 7 23 14 19 1 6 23 15 19 1 19 23 13 19 1 19 23 16 20 1 5 23 13 21 1 16 23 13 22 1 4 23 17 22 2 22 12 23 14 23 1 6 23 15 23 1 23 23 13 23 1 23 23 16 24 1 3 23 18 24 3 24 2 16 23 19 23 2 23 24 23 20 22 2 22 23 23 19 21 2 21 22 23 18 20 2 20 21 23 19 19 2 19 20 23 18 18 3 18 19 15 23 19 15 2 17 18 23 20 0 2 11 15 1 1) #(0 51 54) #(%POP-VALUES PROGN %PUSH-VALUES "D" %MV-COLLECT "N" "V" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM NEW-ENV-NODE GET-GFUN-NODE APPEND MAKE-CALL-NODE MAKE-CONTINUATION-NODE CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MACROLET #K(#(80 3 3 0 1 2 12 71 2 2 1 6 38 3 7 38 4 8 38 5 9 23 6 7 4 5 7 8 9 71 2 0 1 8 0 5 9 38 7 10 38 3 11 38 8 12 38 9 13 38 10 14 23 6 10 5 10 11 12 13 14 69 4 10 1 2 70 57 0 0 6 12 16 12 13 21 1 3 4 12 16 13 14 16 13 15 71 2 2 13 16 71 2 0 13 17 23 11 15 4 15 16 17 7 23 12 15 1 15 20 14 15 14 20 14 9 9 17 12 12 16 12 13 21 1 3 4 12 0 9 14 16 14 15 21 1 5 6 14 38 3 16 20 15 16 16 49 3 16 0 17 14 14 16 14 15 21 1 5 6 14 23 6 16 1 3 23 13 16 2 16 8 23 14 0 2 16 2 1 1) #(0 66 69 80 128 139 161) #(PROGN (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) NIL *CMP-FENV* *CMP-MACROS* *CMP-GLOBAL-MACROS* LIST *CMP-ENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* PARSE-MACRO COERCE-TO-MACRO APPEND CONVERT) 0 NIL) BYTE-CODE-CLOSE SET-CPS-CONVERTER) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SUBSTITUTE-ALL-VARIABLES #K(#(80 2 1 0 2 27 5 3 1 1 21 0 1 2 3 27 5 3 1 1 21 0 1 2 3 23 1 3 1 1 16 3 4 21 1 3 4 3 23 2 0 1 4 17 3 3 16 3 4 21 1 3 4 3 11 0 2 80 2 1 0 1 23 3 3 1 1 21 0 6 9 3 23 4 3 1 1 23 5 3 1 3 21 0 7 8 3 25 6 0 1 1 11 0 2 11 0 2) #(0 15 25 38 54 57 72 87 92 95) #(NIL NODE-CHILDREN SUBSTITUTE-ALL-VARIABLES CALL-NODE-P CALL-NODE-FUNCTION LAMBDA-NODE-P LAMBDA-CALL-SUBSTITUTE-VARIABLES) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COLLAPSE-NULL-LAMBDA-CALLS #K(#(80 2 1 0 2 27 5 3 1 1 21 0 1 2 3 27 5 3 1 1 21 0 1 2 3 23 1 3 1 1 16 3 4 21 1 3 4 3 23 2 0 1 4 17 3 3 16 3 4 21 1 3 4 3 11 0 2 80 2 2 3 0 3 23 4 4 1 1 21 0 6 10 4 23 5 4 1 1 23 6 5 1 4 21 0 7 9 5 23 7 6 1 4 21 0 9 8 6 23 8 6 1 4 23 9 0 2 6 1 11 0 2 11 0 3 11 0 3) #(0 15 25 38 54 57 73 88 98 112 115) #(NIL NODE-CHILDREN COLLAPSE-NULL-LAMBDA-CALLS T CALL-NODE-P CALL-NODE-FUNCTION LAMBDA-NODE-P LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
