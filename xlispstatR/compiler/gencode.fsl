(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLSCMP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CODE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CODE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*LITERALS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*LITERALS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*FUNCTIONS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*FUNCTIONS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*LABELS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*LABELS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*REGISTERS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*REGISTERS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CONSTANTS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CONSTANTS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*PROTECTED-CONTINUATIONS* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*PROTECTED-CONTINUATIONS*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-CODE #K(#(80 2 3 0 1 2 8 69 4 3 1 2 70 57 0 49 3 2 0 49 4 2 0 49 5 2 0 49 6 2 0 23 7 0 1 1 0 1 6 16 6 7 21 1 3 4 6 16 7 8 23 8 8 1 8 71 2 2 7 9 16 7 10 23 9 0 1 10 23 10 0 2 8 9 17 6 6 16 6 7 21 1 3 4 6 38 3 8 23 11 8 1 8 38 4 9 23 11 9 1 9 71 2 3 1 10 23 12 10 1 10 39 13 11 38 5 12 23 14 11 2 11 12 23 15 11 1 11 23 16 8 5 8 9 10 2 11 23 17 9 0 23 18 0 2 8 9 1 1) #(0 12 15 47 85) #(NIL T (*LABELS* *FUNCTIONS* *LITERALS* *CODE*) *CODE* *LITERALS* *FUNCTIONS* *LABELS* INITIALIZE-FUNCTIONS MAKE-LABEL PUSH-LABEL GENERATE-LAMBDA-CODE REVERSE GET-FUNCTION-LABEL SECOND MAPCAR NREVERSE LIST GET-FUNCTION-LABELS PEEPHOLE-OPTIMIZE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-LAMBDA-CODE #K(#(80 3 12 0 1 1 2 3 4 5 6 7 8 9 10 30 69 14 13 1 2 70 57 0 49 11 12 0 49 12 12 0 49 13 12 0 23 14 0 1 2 38 12 16 23 15 16 1 16 23 16 17 1 2 23 17 18 1 16 23 18 19 1 17 23 19 20 0 16 17 21 71 2 2 17 22 71 3 4 17 23 23 20 23 2 23 11 23 21 24 1 17 23 22 25 1 17 37 61 3 6 22 10 21 0 6 4 24 21 0 6 5 25 23 23 26 1 3 23 23 27 1 21 23 23 28 1 18 23 24 29 3 20 19 18 23 23 29 1 29 23 25 26 5 26 27 28 16 29 23 26 0 1 26 1 22 21 0 9 7 24 21 0 9 8 25 23 23 26 1 7 23 23 27 1 23 23 25 26 2 26 27 23 27 26 1 26 23 28 26 1 26 23 23 27 1 9 23 23 28 1 4 23 23 29 1 21 23 23 30 1 22 23 23 31 1 26 23 23 32 1 18 23 24 33 3 20 19 18 23 23 33 1 33 23 25 26 8 27 28 29 30 31 32 16 33 23 26 0 1 26 1 22 21 0 10 19 24 23 29 26 1 17 23 30 27 1 17 23 31 28 1 17 23 23 29 1 7 23 23 30 1 26 23 25 29 2 29 30 23 27 29 1 29 23 28 29 1 29 23 23 30 1 7 23 23 31 1 28 23 25 30 2 30 31 23 27 30 1 30 23 28 30 1 30 21 0 11 12 27 0 5 31 1 13 0 10 31 21 0 14 15 25 0 5 32 1 16 0 10 32 37 60 17 18 10 22 23 23 33 1 7 23 23 34 1 23 23 25 33 2 33 34 23 27 33 1 33 23 28 33 1 33 23 23 34 1 9 23 23 35 1 6 23 23 36 1 21 23 23 37 1 22 23 23 38 1 33 23 23 39 1 32 23 23 40 1 31 23 23 41 1 30 23 23 42 1 29 23 23 43 1 18 23 24 44 3 20 19 18 23 23 44 1 44 23 25 26 12 34 35 36 37 38 39 40 41 42 43 16 44 23 26 0 1 26 1 22 23 23 33 1 9 23 23 34 1 6 23 23 35 1 21 23 23 36 1 22 23 23 37 1 32 23 23 38 1 31 23 23 39 1 30 23 23 40 1 29 23 23 41 1 18 23 24 42 3 20 19 18 23 23 42 1 42 23 25 26 11 33 34 35 36 37 38 39 40 41 16 42 23 26 0 1 26 1 22 37 60 20 21 10 22 23 23 26 1 7 23 23 27 1 23 23 25 26 2 26 27 23 27 26 1 26 23 28 26 1 26 23 23 27 1 9 23 23 28 1 8 23 23 29 1 21 23 23 30 1 22 23 23 31 1 26 23 23 32 1 18 23 24 33 3 20 19 18 23 23 33 1 33 23 25 26 8 27 28 29 30 31 32 16 33 23 26 0 1 26 1 22 23 23 26 1 9 23 23 27 1 8 23 23 28 1 21 23 23 29 1 22 23 23 30 1 18 23 24 31 3 20 19 18 23 23 31 1 31 23 25 26 7 26 27 28 29 30 16 31 23 26 0 1 26 23 32 16 1 1 23 33 17 0 23 34 0 2 16 17 23 35 16 1 2 23 36 0 1 16 1 1) #(0 21 24 103 108 113 156 161 166 253 258 330 335 338 343 348 351 357 468 547 553 640 693) #(%INITIALIZE-0 1 3 QUOTE 2 %INITIALIZE 0 VECTOR NIL T (*PROTECTED-CONTINUATIONS* *CONSTANTS* *REGISTERS*) *REGISTERS* *CONSTANTS* *PROTECTED-CONTINUATIONS* ASSIGN-REGISTERS NREVERSE LAMBDA-NODE-LAMBDA-LIST LENGTH LAMBDA-LIST-NUM-VARIABLES COUNT-REGISTERS COERCE FOURTH SIXTH LIST - APPEND PUSH-INSTRUCTION MAKE-CONSTANT-NODE ADD-LITERAL FIFTH SEVENTH EIGHTH GET-FUNCTION-DATA REGISTER-MAP SET-FUNCTION-DATA-REGISTERS LAMBDA-NODE-BODY GENERATE-BODY-CODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-BODY-CODE #K(#(80 2 1 0 4 23 1 3 1 1 21 0 1 7 3 16 3 4 23 2 5 1 4 21 0 2 3 5 23 3 0 1 4 17 3 3 1 6 23 4 6 1 4 23 2 6 1 6 21 0 4 5 6 17 3 6 23 5 3 2 4 6 1 6 17 3 6 23 6 3 2 4 6 21 0 1 7 3 11 0 2) #(0 15 28 38 53 64 73 78) #(NIL LIST LEAF-NODE-P PUSH-LABEL CALL-NODE-FUNCTION GENERATE-SYMBOL-CALL-CODE GENERATE-LAMBDA-CALL-CODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LIFTED-LFUN-NODE-P #K(#(80 2 1 0 1 23 1 3 1 1 21 0 1 2 3 25 2 0 1 1 11 0 2) #(0 15 20) #(NIL LEAF-NODE-P GET-FUNCTION-LABEL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-SYMBOL-CALL-CODE #K(#(80 3 0 2 23 0 3 1 1 23 1 4 1 3 21 0 1 2 4 25 2 0 2 1 2 23 3 3 1 3 21 0 3 4 3 25 4 0 2 1 2 25 5 0 2 1 2) #(0 19 25 35 41) #(CALL-NODE-FUNCTION GFUN-NODE-P GENERATE-GFUN-CALL-CODE LIFTED-LFUN-NODE-P GENERATE-LFUN-CALL-CODE GENERATE-CONTINUATION-CALL-CODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-LAMBDA-CALL-CODE #K(#(80 3 0 6 34 2 3 23 0 4 1 1 23 1 5 1 4 23 2 6 1 4 23 3 7 1 1 51 1 8 1 3 23 4 0 3 8 5 7 35 3 7 20 6 7 4 36 3 4 0 35 3 3 11 0 3 80 4 1 5 2 23 6 5 1 3 21 0 2 3 5 11 0 4 23 2 5 1 3 35 1 6 20 5 6 5 36 1 5 0 35 1 5 20 2 5 5 36 1 5 0 57 0) #(0 56 71 74) #(CALL-NODE-FUNCTION LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY CALL-NODE-ARGS MAPC NIL LEAF-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-GFUN-CALL-CODE #K(#(80 3 4 0 1 2 3 11 23 4 7 1 1 23 5 8 1 7 23 6 8 2 8 1 21 0 1 2 8 33 8 0 2 1 2 23 7 8 2 1 6 23 8 8 1 8 39 9 9 23 10 10 1 1 17 10 10 23 11 9 2 9 10 23 12 10 1 9 23 13 11 1 7 23 14 12 1 8 21 0 3 4 12 23 15 13 1 8 23 16 14 1 3 23 16 15 1 11 23 16 16 1 13 23 16 17 1 10 23 17 13 5 14 15 16 17 9 23 18 0 1 13 1 5 23 19 13 1 8 23 16 14 1 4 23 16 15 1 11 23 16 16 1 13 23 16 17 1 10 23 17 13 5 14 15 16 17 9 23 18 0 1 13 25 20 0 3 8 2 5) #(0 29 35 83 124 163) #(%CALL %SAVE-CALL NIL 0 CALL-NODE-FUNCTION GFUN-SYMBOL GET-CODE-GENERATOR CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CALL-NODE-ARGS MAPCAR LENGTH ADD-LITERAL FINAL-VALUE-CONTINUATION-P CONTINUATION-REGISTER LIST APPEND PUSH-INSTRUCTION CONTINUATION-VALUE-REGISTER CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-LFUN-CALL-CODE #K(#(80 3 4 0 1 2 3 11 23 4 7 1 1 23 5 8 2 1 6 23 6 8 1 8 39 7 9 23 8 10 1 1 17 10 10 23 9 9 2 9 10 23 10 10 1 9 23 11 11 1 7 23 12 12 1 8 21 0 1 2 12 23 13 13 1 8 23 14 14 1 3 23 14 15 1 11 23 14 16 1 13 23 14 17 1 10 23 15 13 5 14 15 16 17 9 23 16 0 1 13 1 3 23 17 13 1 8 23 14 14 1 4 23 14 15 1 11 23 14 16 1 13 23 14 17 1 10 23 15 13 5 14 15 16 17 9 23 16 0 1 13 25 18 0 3 8 2 5) #(0 61 102 141) #(%LCALL %SAVE-LCALL NIL 0 CALL-NODE-FUNCTION CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CALL-NODE-ARGS MAPCAR LENGTH GET-FUNCTION-LABEL FINAL-VALUE-CONTINUATION-P CONTINUATION-REGISTER LIST APPEND PUSH-INSTRUCTION CONTINUATION-VALUE-REGISTER CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-CONTINUATION-CALL-CODE #K(#(80 3 9 0 1 2 3 4 5 6 7 8 8 23 9 12 1 1 23 10 12 1 12 23 11 13 1 12 60 13 10 5 2 1 23 12 14 1 12 23 13 15 1 12 23 14 16 1 15 23 15 17 1 15 23 16 18 1 1 51 7 19 1 16 23 17 0 3 19 18 17 23 18 15 1 9 23 19 16 1 14 23 18 16 1 16 23 20 14 2 15 16 23 21 0 1 14 1 6 39 22 14 23 16 15 1 1 23 23 14 2 14 15 23 24 15 1 14 37 61 3 4 15 8 23 18 15 1 5 23 20 14 2 15 14 23 21 0 1 14 1 6 23 25 0 1 7 23 18 15 1 6 23 24 16 1 14 23 18 16 1 16 23 20 14 3 15 16 14 23 21 0 1 14 1 6 23 26 14 1 12 23 27 15 2 1 4 23 22 15 1 15 23 18 16 1 5 23 18 17 1 15 23 20 15 2 16 17 23 21 0 1 15 23 18 15 1 3 23 18 16 1 14 23 20 14 2 15 16 23 21 0 1 14 25 28 0 3 12 2 11 80 4 2 29 8 5 23 30 6 2 3 1 21 0 8 9 6 23 22 6 1 2 23 22 7 1 3 23 18 8 1 4 23 18 9 1 6 23 18 10 1 7 23 20 6 3 8 9 10 25 21 0 1 6 11 0 5) #(0 34 99 124 142 176 234 241 258 295) #(%RETURN 0 %SET-ONE-VALUE %SET-VALUES "multiple value continuation in callposition ~
                   with more than one argument" 1 %GOTO #(FINAL-VALUE (PROTECTED MULTIPLE-VALUE)) NIL CALL-NODE-FUNCTION GET-CONTINUATION CONTINUATION-TYPE CONTINUATION-NAME CONTINUATION-FUNCTION LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST CALL-NODE-ARGS MAPC LIST MAKE-LABEL APPEND PUSH-INSTRUCTION FIND-REGISTER MAPCAR LENGTH WARN CONTINUATION-REGISTER CALL-NODE-ARG CLEANUP-CONTINUATION %COPY ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INITIALIZE-FUNCTIONS #K(#(80 2 1 0 4 0 1 3 16 3 4 21 1 1 2 3 16 4 5 23 1 5 1 5 16 4 6 23 2 6 1 6 23 3 6 2 5 6 23 4 5 2 5 6 38 5 6 20 5 6 5 49 5 5 0 17 3 3 16 3 4 21 1 1 2 3 11 0 2) #(0 16 66) #(NIL MAKE-LABEL LEAF-NODE-VALUE MAKE-FUNCTION-DATA LIST *FUNCTIONS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-FUNCTION-DATA #K(#(80 3 1 0 0 25 1 0 3 1 2 3) #(0) #(NIL LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-FUNCTION-DATA #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 71 2 2 2 0 57 0) #(0) #(*FUNCTIONS* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-FUNCTION-LABEL #K(#(80 2 0 2 23 0 2 1 1 38 1 3 23 2 2 2 2 3 16 2 0 57 0) #(0) #(MAKE-LABEL *FUNCTIONS* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-FUNCTION-LABELS #K(#(80 1 0 2 39 0 1 38 1 2 25 2 0 2 1 2) #(0) #(FIRST *FUNCTIONS* MAPCAR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-FUNCTION-DATA-REGISTERS #K(#(80 3 1 0 0 47 3 1 2 0 57 0) #(0) #(2) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CONTINUATION #K(#(80 2 3 0 1 2 2 23 3 5 1 1 21 0 1 2 5 20 2 1 0 57 0 23 4 5 1 1 21 0 6 3 5 38 5 6 23 6 6 2 1 6 21 0 4 5 6 0 3 5 1 6 0 4 5 20 1 5 0 57 0) #(0 17 23 33 47 52 55) #(NIL PROTECTED FINAL LAMBDA-NODE-P FIND-LAMBDA-BINDING *PROTECTED-CONTINUATIONS* MEMBER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REGISTER-PROTECTED-CONTINUATION #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 49 0 2 0 57 0) #(0) #(*PROTECTED-CONTINUATIONS* ADJOIN) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(IMMEDIATE-CONTINUATION-P #K(#(80 2 2 0 1 1 17 1 4 23 2 4 1 4 21 0 1 4 4 23 3 4 1 1 21 0 2 3 4 11 0 3 11 0 2 11 0 3) #(0 19 29 32 35) #(T NIL LAMBDA-NODE-P CONTINUATION-NAME) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-VALUE-IGNORED-P #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 2 4 11 0 2 17 1 4 23 3 4 1 4 21 0 3 4 4 0 2 4 1 5 0 3 4 21 0 6 7 4 11 0 4 17 1 4 23 3 4 1 4 16 4 4 17 1 5 23 4 4 2 4 5 21 0 8 9 4 11 0 2 11 0 3) #(0 16 19 32 37 40 45 48 73 76) #(NIL T MULTIPLE-VALUE-CONTINUATION-P LAMBDA-NODE-ARGLIST ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FINAL-VALUE-CONTINUATION-P #K(#(80 2 1 0 1 17 1 3 40 3 2 0 57 0) #(0) #(FINAL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PROTECTED-CONTINUATION-P #K(#(80 2 1 0 1 17 1 3 40 3 2 0 57 0) #(0) #(PROTECTED) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-REGISTER #K(#(80 2 1 0 1 16 1 3 21 0 1 2 3 16 1 3 25 1 0 1 3 11 0 2) #(0 13 21) #(NIL FIND-REGISTER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MULTIPLE-VALUE-CONTINUATION-P #K(#(80 2 0 1 17 1 2 25 0 0 1 2) #(0) #(MULTIPLE-VALUE-CONTINUATION-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-VALUE-REGISTER #K(#(80 2 1 0 2 17 1 3 23 1 3 1 3 21 0 1 4 3 23 2 4 1 1 21 0 4 2 4 23 3 4 1 1 21 0 4 3 4 17 1 4 23 4 4 1 4 16 4 4 25 5 0 1 4 11 0 2) #(0 18 28 38 54) #(0 LAMBDA-NODE-P CONTINUATION-VALUE-IGNORED-P MULTIPLE-VALUE-CONTINUATION-P LAMBDA-NODE-ARGLIST FIND-REGISTER) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-NAME #K(#(80 2 0 0 16 1 0 57 0) #(0) #() 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-FUNCTION #K(#(80 2 1 0 1 17 1 3 23 1 3 1 3 21 0 1 2 3 17 1 0 57 0 11 0 2) #(0 18 23) #(NIL LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONTINUATION-TYPE #K(#(80 2 5 0 1 2 3 4 1 23 5 7 1 1 21 0 1 2 7 11 0 2 23 6 7 1 1 21 0 3 4 7 11 0 3 23 7 7 1 1 21 0 5 6 7 11 0 4 23 8 7 1 1 21 0 7 8 7 11 0 5 11 0 6) #(0 19 22 32 35 45 48 58 61) #(FINAL-VALUE PROTECTED MULTIPLE-VALUE VALUE-IGNORED ONE-VALUE FINAL-VALUE-CONTINUATION-P PROTECTED-CONTINUATION-P MULTIPLE-VALUE-CONTINUATION-P CONTINUATION-VALUE-IGNORED-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CLEANUP-CONTINUATION #K(#(80 4 3 0 1 2 5 0 2 7 23 3 8 1 1 21 0 1 3 8 21 0 2 6 3 23 4 9 1 1 23 5 10 1 4 23 5 11 1 9 23 6 9 2 10 11 23 7 0 1 9 1 6 23 8 9 1 1 21 0 4 5 9 17 1 9 23 9 9 1 9 20 9 7 7 1 6 23 5 9 1 6 23 10 10 1 1 23 11 10 1 10 23 5 10 1 10 23 6 9 2 9 10 23 7 0 1 9 11 0 7) #(0 20 25 53 63 77 108) #(%RETURN NIL %GOTO FINAL-VALUE-CONTINUATION-P CONTINUATION-REGISTER LIST APPEND PUSH-INSTRUCTION IMMEDIATE-CONTINUATION-P LAMBDA-NODE-BODY CONTINUATION-NAME MAKE-LABEL) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-REGISTER #K(#(80 2 1 0 1 38 1 3 23 2 3 2 1 3 21 0 1 2 3 17 3 0 57 0 25 3 0 1 2) #(0 19 24) #("register not found" *REGISTERS* ASSOC ERROR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ASSIGN-REGISTERS #K(#(80 2 1 0 2 23 1 3 1 1 23 2 4 1 1 23 3 4 2 4 2 25 4 0 2 3 4) #(0) #(NIL LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST ADD-LAMBDA-FRAME ASSIGN-REGISTERS-1) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(POP-UNUSED-FRAMES #K(#(80 3 2 0 1 3 16 1 5 21 0 1 4 5 17 5 6 50 0 2 3 6 3 16 5 6 51 8 7 1 2 23 2 5 2 7 6 1 5 0 4 5 1 5 0 4 5 21 0 6 7 5 17 1 5 25 3 0 2 5 2 11 0 1 80 3 2 1 4 1 23 5 5 2 2 1 21 0 9 10 5 11 0 3 11 0 4) #(0 14 23 39 44 47 52 61 64 81 84) #(CONTINUATION NIL EVERY POP-UNUSED-FRAMES T ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SETQ-CONTINUATION-P #K(#(80 2 6 0 1 2 3 4 5 5 23 6 8 1 1 21 0 1 13 8 23 7 8 1 1 23 8 9 1 8 23 9 9 2 9 6 21 0 2 3 9 23 10 10 1 1 23 11 10 1 10 3 61 10 3 9 1 4 0 7 9 21 0 5 12 9 23 10 9 1 1 16 9 9 23 12 10 2 8 5 23 12 11 2 8 4 50 0 6 11 9 11 23 12 11 2 8 3 38 13 12 23 14 11 2 11 12 21 0 7 10 11 23 15 8 2 9 10 21 0 8 9 8 11 0 7 11 0 2 11 0 7 11 0 7 11 0 7 11 0 7) #(0 20 41 58 61 66 92 112 123 126 129 132 135 138) #(T 1 2 0 %SETQ NIL CONTINUATION-NODE-P LAMBDA-NODE-BODY CALL-NODE-FUNCTION GFUN-EQ LAMBDA-NODE-ARGLIST LENGTH CALL-NODE-ARG *REGISTERS* ASSOC ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-REGISTER-FRAME #K(#(80 4 2 0 1 7 0 5 6 0 3 7 16 7 8 21 1 1 2 7 16 8 9 23 2 9 1 9 2 43 6 9 6 17 7 7 16 7 8 21 1 1 2 7 0 1 9 16 9 10 21 1 3 4 9 20 10 6 11 38 3 12 20 11 12 11 49 3 11 0 2 43 6 4 6 17 9 9 16 9 10 21 1 3 4 9 20 1 2 11 20 11 3 0 57 0) #(0 20 44 55 86) #(1 0 LENGTH *REGISTERS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-LAMBDA-FRAME #K(#(80 3 1 0 0 25 1 0 3 1 3 2) #(0) #(LAMBDA ADD-REGISTER-FRAME) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-CONTINUATION-FRAME #K(#(80 3 3 0 1 2 4 23 3 6 1 1 21 0 1 2 6 23 4 6 1 1 16 6 6 23 5 7 1 1 23 6 7 2 7 3 38 7 8 23 8 7 2 7 8 17 7 7 20 6 7 6 38 7 7 20 6 7 6 49 7 6 0 25 9 0 2 2 1 23 4 6 1 1 23 5 7 1 1 23 10 8 1 1 21 0 3 4 8 0 4 7 1 5 51 8 9 1 7 23 11 7 2 9 6 21 0 6 7 7 23 9 7 2 2 1 25 12 0 3 6 5 7 25 9 0 2 2 1 80 3 0 0 25 13 0 2 2 1) #(0 17 69 89 94 105 110 123 129) #(1 NIL CONTINUATION SETQ-CONTINUATION-P LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY CALL-NODE-ARG *REGISTERS* ASSOC POP-UNUSED-FRAMES MULTIPLE-VALUE-CONTINUATION-NODE-P SOME ADD-REGISTER-FRAME ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ASSIGN-REGISTERS-1 #K(#(80 3 4 0 1 2 3 9 0 2 7 23 4 8 1 1 23 5 9 1 1 23 6 7 2 7 1 23 7 10 1 8 21 0 1 2 10 34 4 11 23 8 12 1 8 51 13 13 1 11 23 9 0 3 13 12 9 23 10 12 1 8 35 11 13 23 11 13 1 13 23 12 13 2 13 7 23 13 0 2 12 13 23 14 10 2 8 6 21 0 3 4 10 23 15 8 2 1 3 23 10 8 1 8 25 13 0 2 8 7 23 14 10 2 8 5 0 9 11 16 11 12 21 1 5 12 11 23 7 13 1 12 21 0 6 11 13 23 16 14 1 12 21 0 7 9 14 21 0 9 8 10 23 17 14 2 12 7 1 10 23 8 15 1 12 23 12 14 2 15 7 23 10 15 1 12 23 13 0 2 15 14 17 11 11 16 11 12 21 1 5 12 11 11 0 4 80 4 1 1 2 23 7 5 1 3 21 0 14 15 5 11 0 4 35 1 5 20 2 5 5 36 1 5 0 23 18 5 1 3 38 19 6 20 5 6 5 49 19 5 0 57 0) #(0 37 82 93 110 127 137 147 152 160 171 182 193 196 211 214) #(0 NIL %Y-LIST %Y CALL-NODE-FUNCTION CALL-NODE-ARGS POP-UNUSED-FRAMES LAMBDA-NODE-P LAMBDA-NODE-ARGLIST MAPC LAMBDA-NODE-BODY NREVERSE ADD-LAMBDA-FRAME ASSIGN-REGISTERS-1 GFUN-EQ CALL-NODE-ARG CONTINUATION-NODE-P ADD-CONTINUATION-FRAME ADD-LITERAL *CONSTANTS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(COUNT-REGISTERS #K(#(80 1 2 0 1 4 0 2 3 38 2 4 16 4 5 21 1 1 2 4 17 5 6 2 43 6 1 6 2 77 3 6 3 17 4 4 16 4 5 21 1 1 2 4 11 0 3) #(0 20 44) #(1 0 *REGISTERS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(REGISTER-MAP #K(#(80 1 1 0 7 0 1 2 38 1 3 16 3 4 21 1 1 7 3 16 4 5 23 2 6 1 5 21 0 3 2 6 23 3 5 1 5 17 4 6 23 4 7 2 6 2 21 0 4 5 7 17 7 8 23 5 8 2 5 8 79 7 8 0 1 6 23 6 8 2 6 5 20 8 2 2 17 3 3 16 3 4 21 1 1 7 3 51 8 5 0 25 7 0 2 2 5 80 3 0 2 16 1 3 16 2 4 3 60 3 4 0 57 0) #(0 19 32 37 51 66 76 87 97) #(NIL *REGISTERS* SYMBOLP LEAF-NODE-VALUE ASSOC ADJOIN LIST SORT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-LABEL #K(#(80 2 0 3 38 0 2 23 1 2 2 1 2 21 0 1 2 2 17 2 0 57 0 23 2 2 1 1 23 3 2 1 2 23 4 2 1 2 20 1 2 3 38 0 4 20 3 4 3 49 0 3 0 11 0 2) #(0 18 23) #(*LABELS* ASSOC LEAF-NODE-VALUE STRING GENSYM) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-LABEL-NODE #K(#(77 1 1 1 0 0 1 23 1 2 1 1 23 2 2 1 2 25 3 0 1 2) #(0) #(#("LABEL") STRING GENSYM MAKE-LEAF-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PUSH-LABEL #K(#(80 2 0 2 23 0 2 1 1 38 1 3 20 2 3 2 49 1 2 0 57 0) #(0) #(MAKE-LABEL *CODE*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PUSH-INSTRUCTION #K(#(80 2 0 1 38 0 2 20 1 2 2 49 0 2 0 57 0) #(0) #(*CODE*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEXT-LITERAL-INDEX #K(#(80 1 0 1 38 0 1 25 1 0 1 1) #(0) #(*LITERALS* LENGTH) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LITERAL-VALUE #K(#(80 2 2 0 1 2 23 2 4 1 1 21 1 1 2 4 16 4 5 40 5 2 5 1 3 0 3 5 21 0 4 5 5 71 2 2 4 0 57 0 11 0 4) #(0 16 25 28 33 40) #(QUOTE NIL LEAF-NODE-VALUE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PUSH-LITERAL #K(#(80 2 0 3 23 0 2 0 23 1 3 1 1 38 2 4 20 3 4 3 49 2 3 0 11 0 2) #(0) #(NEXT-LITERAL-INDEX LITERAL-VALUE *LITERALS*) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-LITERAL #K(#(80 2 0 1 23 0 2 1 1 25 1 0 1 2) #(0) #(LITERAL-VALUE ADD-LITERAL-VALUE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-LITERAL-VALUE #K(#(80 2 1 0 2 38 1 3 23 2 3 2 1 3 21 0 1 2 3 38 1 4 23 3 4 1 4 25 4 0 3 4 3 2 38 1 3 23 3 3 1 3 38 1 4 20 1 4 4 49 1 4 0 11 0 3) #(0 19 34) #(1 *LITERALS* POSITION LENGTH -) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET-CODE-GENERATOR #K(#(80 3 2 0 1 4 46 1 4 5 16 5 6 71 2 2 5 7 21 0 1 4 6 31 6 8 1 2 21 0 2 3 8 11 0 7 11 0 3 11 0 7) #(0 23 33 36 39) #(NIL CMP-CODE-GENERATOR) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CODE-GENERATOR #K(#(80 3 3 0 1 2 1 46 1 5 6 21 0 1 2 6 47 3 6 2 0 57 0 23 3 6 2 4 2 25 4 0 3 1 5 6) #(0 16 23) #(1 NIL CMP-CODE-GENERATOR LIST %SET-GET) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SET-CODE-GENERATOR-TEST #K(#(80 3 2 0 1 1 46 1 4 5 21 0 1 2 5 78 5 2 0 57 0 23 2 5 2 2 3 25 3 0 3 1 4 5) #(0 15 21) #(NIL CMP-CODE-GENERATOR LIST %SET-GET) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 4 23 7 7 1 6 23 7 8 1 5 23 7 9 1 1 23 8 8 2 8 9 23 7 8 1 8 23 7 9 1 4 23 7 10 1 3 23 8 10 2 10 2 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 25 8 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 95) #(DEFINE-CODE-GENERATOR COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE SET-CODE-GENERATOR LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 4 23 7 7 1 6 23 7 8 1 5 23 7 9 1 1 23 8 8 2 8 9 23 7 8 1 8 23 7 9 1 4 23 7 10 1 3 23 8 10 2 10 2 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 25 8 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 95) #(DEFINE-CODE-GENERATOR-TEST COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE SET-CODE-GENERATOR-TEST LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GENERATE-INLINE-FUNCTION-CODE #K(#(80 4 2 0 1 3 23 2 6 2 2 5 23 3 6 1 6 23 4 7 1 6 23 5 8 1 2 17 8 8 31 1 0 2 8 7 25 6 0 3 6 3 4) #(0) #(T 0 CALL-NODE-ARG GET-CONTINUATION CONTINUATION-VALUE-REGISTER CALL-NODE-ARGS CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 6 3 4 5 6 7 8 7 23 9 9 1 8 23 9 10 1 1 23 9 11 1 7 23 9 12 1 6 23 10 11 2 11 12 23 9 11 1 11 23 9 12 1 5 23 9 13 1 4 23 9 14 1 3 23 10 14 2 14 2 23 9 14 1 14 23 10 13 2 13 14 23 9 13 1 13 23 9 14 1 7 23 9 15 1 6 23 10 12 4 12 13 14 15 23 9 12 1 12 25 10 0 4 9 10 11 12 80 3 0 2 17 1 3 51 1 4 0 25 11 0 2 4 3) #(0 20 131) #(DEFINE-INLINE-FUNCTION-GENERATOR COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION GENERATE-INLINE-FUNCTION-CODE REST N DEFINE-CODE-GENERATOR LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 11 2 0 23 1 2 1 2 25 2 0 2 1 2 77 1 2 2 17 14 3 4 5 6 7 8 9 10 11 12 13 14 15 16 15 21 2 2 3 2 0 2 18 1 4 0 1 18 64 3 19 21 2 5 6 3 0 3 20 1 7 0 5 20 23 5 21 1 17 21 0 8 9 19 23 5 22 1 4 23 5 23 1 1 23 5 24 1 20 23 9 22 3 22 23 24 23 5 22 1 22 23 9 22 1 22 1 10 0 5 22 23 5 23 1 16 23 5 24 1 1 23 5 25 1 15 23 5 26 1 14 23 9 25 2 25 26 23 5 25 1 25 23 5 26 1 13 23 5 27 1 12 23 5 28 1 11 23 5 29 1 18 23 9 28 2 28 29 23 5 28 1 28 23 5 29 1 10 23 5 30 1 9 23 5 31 1 8 23 5 32 1 7 23 9 31 2 31 32 23 5 31 1 31 23 5 32 1 15 23 9 30 3 30 31 32 23 5 30 1 30 23 5 31 1 6 23 5 32 1 14 23 9 31 2 31 32 23 5 31 1 31 23 9 29 3 29 30 31 23 5 29 1 29 23 9 27 3 27 28 29 23 5 27 1 27 23 9 26 2 26 27 23 5 26 1 26 23 9 23 4 23 24 25 26 23 5 23 1 23 25 9 0 3 21 22 23 80 3 0 2 17 1 3 51 1 4 0 25 18 0 2 4 3) #(0 20 46 51 54 62 67 70 80 114 117 303) #(DEFINE-STANDARD-INLINE-GENERATOR COERCE-TO-MACRO XLISP::INSTALL-FUNCTION DEFINE-LAMBDA-LIST NIL LIST FIND-REGISTER FUNCTION MAPCAR APPEND QUOTE CONS PUSH-INSTRUCTION R ARGS DEFINE-INLINE-FUNCTION-GENERATOR PROGN #(%NOT-SUPPLIED %NOT-SUPPLIED) APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 7 3 4 5 6 7 8 9 8 23 10 10 1 9 23 10 11 1 8 23 10 12 1 1 23 11 11 3 11 12 2 23 10 11 1 11 23 10 12 1 7 23 10 13 1 1 23 10 14 1 6 23 11 14 1 14 23 10 14 1 14 23 10 15 1 5 23 10 16 1 4 23 10 17 1 6 23 11 16 2 16 17 23 10 16 1 16 23 10 17 1 3 23 11 15 3 15 16 17 23 10 15 1 15 23 11 12 4 12 13 14 15 23 10 12 1 12 25 11 0 3 10 11 12 80 3 0 2 17 1 3 51 1 4 0 25 12 0 2 4 3) #(0 20 148) #(DEFINE-STANDARD-INLINE-GENERATOR-2 COERCE-TO-MACRO XLISP::INSTALL-FUNCTION 3 CALL-NODE-ARG-COUNT = N DEFINE-CODE-GENERATOR-TEST DEFINE-STANDARD-INLINE-GENERATOR PROGN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 27 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 13 23 9 30 1 29 23 9 31 1 1 23 9 32 1 28 23 9 33 1 27 23 30 32 2 32 33 23 9 32 1 32 23 9 33 1 26 23 9 34 1 25 23 9 35 1 24 23 9 36 1 28 23 9 37 1 23 23 30 35 3 35 36 37 23 9 35 1 35 23 30 34 2 34 35 23 9 34 1 34 23 9 35 1 22 23 9 36 1 24 23 9 37 1 28 23 9 38 1 21 23 30 36 3 36 37 38 23 9 36 1 36 23 30 35 2 35 36 23 9 35 1 35 23 9 36 1 20 23 9 37 1 19 23 9 38 1 24 23 9 39 1 28 23 9 40 1 18 23 30 38 3 38 39 40 23 9 38 1 38 23 30 37 2 37 38 23 9 37 1 37 23 30 36 2 36 37 23 9 36 1 36 23 9 37 1 17 23 9 38 1 16 23 9 39 1 15 23 9 40 1 25 23 30 39 2 39 40 23 9 39 1 39 23 9 40 1 14 23 9 41 1 13 23 30 40 2 40 41 23 9 40 1 40 23 9 41 1 25 23 30 38 4 38 39 40 41 23 9 38 1 38 23 30 37 2 37 38 23 9 37 1 37 23 9 38 1 12 23 9 39 1 16 23 9 40 1 15 23 9 41 1 22 23 30 40 2 40 41 23 9 40 1 40 23 9 41 1 14 23 9 42 1 11 23 30 41 2 41 42 23 9 41 1 41 23 9 42 1 22 23 30 39 4 39 40 41 42 23 9 39 1 39 23 30 38 2 38 39 23 9 38 1 38 23 30 34 5 34 35 36 37 38 23 9 34 1 34 23 9 35 1 10 23 9 36 1 9 23 9 37 1 8 23 9 38 1 7 23 30 37 2 37 38 23 9 37 1 37 23 9 38 1 2 23 9 39 1 6 23 9 40 1 17 23 30 39 2 39 40 23 9 39 1 39 23 9 40 1 6 23 9 41 1 12 23 30 40 2 40 41 23 9 40 1 40 23 9 41 1 20 23 30 36 6 36 37 38 39 40 41 23 9 36 1 36 23 30 35 2 35 36 23 9 35 1 35 23 9 36 1 5 23 9 37 1 15 23 9 38 1 22 23 30 37 2 37 38 23 9 37 1 37 23 9 38 1 4 23 9 39 1 3 23 9 40 1 22 23 30 39 2 39 40 23 9 39 1 39 23 9 40 1 27 23 30 38 3 38 39 40 23 9 38 1 38 23 9 39 1 4 23 9 40 1 12 23 9 41 1 27 23 30 39 3 39 40 41 23 9 39 1 39 23 30 36 4 36 37 38 39 23 9 36 1 36 23 9 37 1 5 23 9 38 1 15 23 9 39 1 25 23 30 38 2 38 39 23 9 38 1 38 23 9 39 1 4 23 9 40 1 3 23 9 41 1 25 23 30 40 2 40 41 23 9 40 1 40 23 9 41 1 27 23 30 39 3 39 40 41 23 9 39 1 39 23 9 40 1 4 23 9 41 1 17 23 9 42 1 27 23 30 40 3 40 41 42 23 9 40 1 40 23 30 37 4 37 38 39 40 23 9 37 1 37 23 9 38 1 27 23 30 33 6 33 34 35 36 37 38 23 9 33 1 33 25 30 0 4 30 31 32 33 80 3 0 2 17 1 3 51 1 4 0 25 31 0 2 4 3) #(0 20 763) #(DEFINE-TEST-CODE-GENERATOR-1 COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA-NODE-BODY PUSH WHEN MAKE-LABEL %TEST-1 QUOTE LIST PUSH-INSTRUCTION "ELSE" ALAB "THEN" MAKE-LABEL-NODE LAMBDA-NODE-P IF CLAB 2 FIND-REGISTER VR 1 ALT 0 CALL-NODE-ARG CONS LET* REST N DEFINE-CODE-GENERATOR APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 29 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 14 23 9 32 1 31 23 9 33 1 1 23 9 34 1 30 23 9 35 1 29 23 32 34 2 34 35 23 9 34 1 34 23 9 35 1 28 23 9 36 1 27 23 9 37 1 26 23 9 38 1 30 23 9 39 1 25 23 32 37 3 37 38 39 23 9 37 1 37 23 32 36 2 36 37 23 9 36 1 36 23 9 37 1 24 23 9 38 1 26 23 9 39 1 30 23 9 40 1 23 23 32 38 3 38 39 40 23 9 38 1 38 23 32 37 2 37 38 23 9 37 1 37 23 9 38 1 22 23 9 39 1 21 23 9 40 1 26 23 9 41 1 30 23 9 42 1 20 23 32 40 3 40 41 42 23 9 40 1 40 23 32 39 2 39 40 23 9 39 1 39 23 32 38 2 38 39 23 9 38 1 38 23 9 39 1 19 23 9 40 1 21 23 9 41 1 26 23 9 42 1 30 23 9 43 1 18 23 32 41 3 41 42 43 23 9 41 1 41 23 32 40 2 40 41 23 9 40 1 40 23 32 39 2 39 40 23 9 39 1 39 23 9 40 1 17 23 9 41 1 16 23 9 42 1 15 23 9 43 1 27 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 14 23 9 44 1 13 23 32 43 2 43 44 23 9 43 1 43 23 9 44 1 27 23 32 41 4 41 42 43 44 23 9 41 1 41 23 32 40 2 40 41 23 9 40 1 40 23 9 41 1 12 23 9 42 1 16 23 9 43 1 15 23 9 44 1 24 23 32 43 2 43 44 23 9 43 1 43 23 9 44 1 14 23 9 45 1 11 23 32 44 2 44 45 23 9 44 1 44 23 9 45 1 24 23 32 42 4 42 43 44 45 23 9 42 1 42 23 32 41 2 41 42 23 9 41 1 41 23 32 36 6 36 37 38 39 40 41 23 9 36 1 36 23 9 37 1 10 23 9 38 1 9 23 9 39 1 8 23 9 40 1 7 23 32 39 2 39 40 23 9 39 1 39 23 9 40 1 2 23 9 41 1 6 23 9 42 1 17 23 32 41 2 41 42 23 9 41 1 41 23 9 42 1 6 23 9 43 1 12 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 22 23 9 44 1 19 23 32 38 7 38 39 40 41 42 43 44 23 9 38 1 38 23 32 37 2 37 38 23 9 37 1 37 23 9 38 1 5 23 9 39 1 15 23 9 40 1 24 23 32 39 2 39 40 23 9 39 1 39 23 9 40 1 4 23 9 41 1 3 23 9 42 1 24 23 32 41 2 41 42 23 9 41 1 41 23 9 42 1 29 23 32 40 3 40 41 42 23 9 40 1 40 23 9 41 1 4 23 9 42 1 12 23 9 43 1 29 23 32 41 3 41 42 43 23 9 41 1 41 23 32 38 4 38 39 40 41 23 9 38 1 38 23 9 39 1 5 23 9 40 1 15 23 9 41 1 27 23 32 40 2 40 41 23 9 40 1 40 23 9 41 1 4 23 9 42 1 3 23 9 43 1 27 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 29 23 32 41 3 41 42 43 23 9 41 1 41 23 9 42 1 4 23 9 43 1 17 23 9 44 1 29 23 32 42 3 42 43 44 23 9 42 1 42 23 32 39 4 39 40 41 42 23 9 39 1 39 23 9 40 1 29 23 32 35 6 35 36 37 38 39 40 23 9 35 1 35 25 32 0 4 32 33 34 35 80 3 0 2 17 1 3 51 1 4 0 25 33 0 2 4 3) #(0 20 831) #(DEFINE-TEST-CODE-GENERATOR-2 COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA-NODE-BODY PUSH WHEN MAKE-LABEL %TEST-2 QUOTE LIST PUSH-INSTRUCTION "ELSE" ALAB "THEN" MAKE-LABEL-NODE LAMBDA-NODE-P IF CLAB 3 VR2 2 FIND-REGISTER VR1 1 ALT 0 CALL-NODE-ARG CONS LET* REST N DEFINE-CODE-GENERATOR APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 29 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 14 23 9 32 1 31 23 9 33 1 1 23 9 34 1 30 23 9 35 1 29 23 32 34 2 34 35 23 9 34 1 34 23 9 35 1 28 23 9 36 1 27 23 9 37 1 26 23 9 38 1 30 23 9 39 1 25 23 32 37 3 37 38 39 23 9 37 1 37 23 32 36 2 36 37 23 9 36 1 36 23 9 37 1 24 23 9 38 1 26 23 9 39 1 30 23 9 40 1 23 23 32 38 3 38 39 40 23 9 38 1 38 23 32 37 2 37 38 23 9 37 1 37 23 9 38 1 22 23 9 39 1 21 23 9 40 1 26 23 9 41 1 30 23 9 42 1 20 23 32 40 3 40 41 42 23 9 40 1 40 23 32 39 2 39 40 23 9 39 1 39 23 32 38 2 38 39 23 9 38 1 38 23 9 39 1 19 23 9 40 1 21 23 9 41 1 26 23 9 42 1 30 23 9 43 1 18 23 32 41 3 41 42 43 23 9 41 1 41 23 32 40 2 40 41 23 9 40 1 40 23 32 39 2 39 40 23 9 39 1 39 23 9 40 1 17 23 9 41 1 16 23 9 42 1 15 23 9 43 1 27 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 14 23 9 44 1 13 23 32 43 2 43 44 23 9 43 1 43 23 9 44 1 27 23 32 41 4 41 42 43 44 23 9 41 1 41 23 32 40 2 40 41 23 9 40 1 40 23 9 41 1 12 23 9 42 1 16 23 9 43 1 15 23 9 44 1 24 23 32 43 2 43 44 23 9 43 1 43 23 9 44 1 14 23 9 45 1 11 23 32 44 2 44 45 23 9 44 1 44 23 9 45 1 24 23 32 42 4 42 43 44 45 23 9 42 1 42 23 32 41 2 41 42 23 9 41 1 41 23 32 36 6 36 37 38 39 40 41 23 9 36 1 36 23 9 37 1 10 23 9 38 1 9 23 9 39 1 8 23 9 40 1 7 23 32 39 2 39 40 23 9 39 1 39 23 33 40 1 2 23 9 40 1 40 23 9 41 1 6 23 9 42 1 17 23 32 41 2 41 42 23 9 41 1 41 23 9 42 1 6 23 9 43 1 12 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 22 23 9 44 1 19 23 32 38 7 38 39 40 41 42 43 44 23 9 38 1 38 23 32 37 2 37 38 23 9 37 1 37 23 9 38 1 5 23 9 39 1 15 23 9 40 1 24 23 32 39 2 39 40 23 9 39 1 39 23 9 40 1 4 23 9 41 1 3 23 9 42 1 24 23 32 41 2 41 42 23 9 41 1 41 23 9 42 1 29 23 32 40 3 40 41 42 23 9 40 1 40 23 9 41 1 4 23 9 42 1 12 23 9 43 1 29 23 32 41 3 41 42 43 23 9 41 1 41 23 32 38 4 38 39 40 41 23 9 38 1 38 23 9 39 1 5 23 9 40 1 15 23 9 41 1 27 23 32 40 2 40 41 23 9 40 1 40 23 9 41 1 4 23 9 42 1 3 23 9 43 1 27 23 32 42 2 42 43 23 9 42 1 42 23 9 43 1 29 23 32 41 3 41 42 43 23 9 41 1 41 23 9 42 1 4 23 9 43 1 17 23 9 44 1 29 23 32 42 3 42 43 44 23 9 42 1 42 23 32 39 4 39 40 41 42 23 9 39 1 39 23 9 40 1 29 23 32 35 6 35 36 37 38 39 40 23 9 35 1 35 25 32 0 4 32 33 34 35 80 3 0 2 17 1 3 51 1 4 0 25 34 0 2 4 3) #(0 20 836) #(DEFINE-TEST-ARITH-CODE-GENERATOR-2 COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA-NODE-BODY PUSH WHEN MAKE-LABEL %TEST-ARITH-2 QUOTE LIST PUSH-INSTRUCTION "ELSE" ALAB "THEN" MAKE-LABEL-NODE LAMBDA-NODE-P IF CLAB 3 VR2 2 FIND-REGISTER VR1 1 ALT 0 CALL-NODE-ARG CONS LET* REST N DEFINE-CODE-GENERATOR APPEND CHAR-INT APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST #K(#(80 3 7 0 1 2 3 4 5 6 8 0 2 10 23 7 11 2 1 9 23 7 12 2 1 8 23 7 13 2 1 7 23 8 13 1 13 23 9 14 1 11 21 0 1 2 14 23 10 14 1 3 1 3 0 11 14 23 9 15 1 12 21 0 4 5 15 23 10 15 1 4 1 6 0 12 15 23 11 16 1 14 23 11 17 1 15 23 12 16 5 6 9 16 17 13 23 13 0 1 16 23 9 16 1 12 21 0 7 8 16 23 14 17 1 12 20 17 10 10 20 15 10 10 23 9 15 1 11 21 0 9 10 15 23 14 16 1 11 20 16 10 10 20 14 10 10 11 0 10) #(0 47 54 57 67 74 77 111 124 134 147) #("THEN" "ELSE" NIL %TEST-1 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-CONSP #K(#(80 3 7 0 1 2 3 4 5 6 8 0 2 10 23 7 11 2 1 9 23 7 12 2 1 8 23 7 13 2 1 7 23 8 13 1 13 23 9 14 1 11 21 0 1 2 14 23 10 14 1 3 1 3 0 11 14 23 9 15 1 12 21 0 4 5 15 23 10 15 1 4 1 6 0 12 15 23 11 16 1 14 23 11 17 1 15 23 12 16 5 6 8 16 17 13 23 13 0 1 16 23 9 16 1 12 21 0 7 8 16 23 14 17 1 12 20 17 10 10 20 15 10 10 23 9 15 1 11 21 0 9 10 15 23 14 16 1 11 20 16 10 10 20 14 10 10 11 0 10) #(0 47 54 57 67 74 77 111 124 134 147) #("THEN" "ELSE" NIL %TEST-1 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-SUPPLIED-P #K(#(80 3 7 0 1 2 3 4 5 6 8 0 2 10 23 7 11 2 1 9 23 7 12 2 1 8 23 7 13 2 1 7 23 8 13 1 13 23 9 14 1 11 21 0 1 2 14 23 10 14 1 3 1 3 0 11 14 23 9 15 1 12 21 0 4 5 15 23 10 15 1 4 1 6 0 12 15 23 11 16 1 14 23 11 17 1 15 23 12 16 5 6 7 16 17 13 23 13 0 1 16 23 9 16 1 12 21 0 7 8 16 23 14 17 1 12 20 17 10 10 20 15 10 10 23 9 15 1 11 21 0 9 10 15 23 14 16 1 11 20 16 10 10 20 14 10 10 11 0 10) #(0 47 54 57 67 74 77 111 124 134 147) #("THEN" "ELSE" NIL %TEST-1 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-ENDP #K(#(80 3 8 0 1 2 3 4 5 6 7 8 0 2 11 23 8 12 2 1 10 23 8 13 2 1 9 23 8 14 2 1 8 23 9 14 1 14 23 10 15 1 12 21 0 1 2 15 23 11 15 1 3 1 3 0 12 15 23 10 16 1 13 21 0 4 5 16 23 11 16 1 4 1 6 0 13 16 23 12 17 1 15 23 12 18 1 16 23 13 17 5 7 6 17 18 14 23 14 0 1 17 23 10 17 1 13 21 0 7 8 17 23 15 18 1 13 20 18 11 11 20 16 11 11 23 10 16 1 12 21 0 9 10 16 23 15 17 1 12 20 17 11 11 20 15 11 11 11 0 11) #(0 48 55 58 68 75 78 112 125 135 148) #("THEN" "ELSE" NIL 3 %TEST-1 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-EQ #K(#(80 3 8 0 1 2 3 4 5 6 7 9 0 2 11 23 8 12 2 1 10 23 8 13 2 1 9 23 8 14 2 1 8 23 9 14 1 14 23 8 15 2 1 7 23 9 15 1 15 23 10 16 1 12 21 0 1 2 16 23 11 16 1 3 1 3 0 12 16 23 10 17 1 13 21 0 4 5 17 23 11 17 1 4 1 6 0 13 17 23 12 18 1 16 23 12 19 1 17 23 13 18 6 6 10 18 19 14 15 23 14 0 1 18 23 10 18 1 13 21 0 7 8 18 23 15 19 1 13 20 19 11 11 20 17 11 11 23 10 17 1 12 21 0 9 10 17 23 15 18 1 12 20 18 11 11 20 16 11 11 11 0 11) #(0 59 66 69 79 86 89 124 137 147 160) #("THEN" "ELSE" NIL %TEST-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-EQL #K(#(80 3 8 0 1 2 3 4 5 6 7 9 0 2 11 23 8 12 2 1 10 23 8 13 2 1 9 23 8 14 2 1 8 23 9 14 1 14 23 8 15 2 1 7 23 9 15 1 15 23 10 16 1 12 21 0 1 2 16 23 11 16 1 3 1 3 0 12 16 23 10 17 1 13 21 0 4 5 17 23 11 17 1 4 1 6 0 13 17 23 12 18 1 16 23 12 19 1 17 23 13 18 6 6 9 18 19 14 15 23 14 0 1 18 23 10 18 1 13 21 0 7 8 18 23 15 19 1 13 20 19 11 11 20 17 11 11 23 10 17 1 12 21 0 9 10 17 23 15 18 1 12 20 18 11 11 20 16 11 11 11 0 11) #(0 59 66 69 79 86 89 124 137 147 160) #("THEN" "ELSE" NIL %TEST-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST-EQUAL #K(#(80 3 8 0 1 2 3 4 5 6 7 9 0 2 11 23 8 12 2 1 10 23 8 13 2 1 9 23 8 14 2 1 8 23 9 14 1 14 23 8 15 2 1 7 23 9 15 1 15 23 10 16 1 12 21 0 1 2 16 23 11 16 1 3 1 3 0 12 16 23 10 17 1 13 21 0 4 5 17 23 11 17 1 4 1 6 0 13 17 23 12 18 1 16 23 12 19 1 17 23 13 18 6 6 8 18 19 14 15 23 14 0 1 18 23 10 18 1 13 21 0 7 8 18 23 15 19 1 13 20 19 11 11 20 17 11 11 23 10 17 1 12 21 0 9 10 17 23 15 18 1 12 20 18 11 11 20 16 11 11 11 0 11) #(0 59 66 69 79 86 89 124 137 147 160) #("THEN" "ELSE" NIL %TEST-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST= #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 61 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST/= #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 35 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST< #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 60 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST> #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 62 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST<= #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 76 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%TEST>= #K(#(80 3 9 0 1 2 3 4 5 6 7 8 9 0 2 12 23 9 13 2 1 11 23 9 14 2 1 10 23 9 15 2 1 9 23 10 15 1 15 23 9 16 2 1 8 23 10 16 1 16 23 11 17 1 13 21 0 1 2 17 23 12 17 1 3 1 3 0 13 17 23 11 18 1 14 21 0 4 5 18 23 12 18 1 4 1 6 0 14 18 23 13 19 1 17 23 13 20 1 18 23 14 19 6 7 6 19 20 15 16 23 15 0 1 19 23 11 19 1 14 21 0 7 8 19 23 16 20 1 14 20 20 12 12 20 18 12 12 23 11 18 1 13 21 0 9 10 18 23 16 19 1 13 20 19 12 12 20 17 12 12 11 0 12) #(0 60 67 70 80 87 90 125 138 148 161) #("THEN" "ELSE" NIL 71 %TEST-ARITH-2 3 2 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE MAKE-LABEL LIST PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%CASE #K(#(80 3 5 0 1 2 3 4 11 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 6 10 1 10 23 7 11 1 1 71 2 0 11 11 0 5 12 0 11 13 16 13 14 21 1 1 5 13 23 8 15 1 14 21 0 2 3 15 23 9 16 1 3 23 10 17 1 14 20 17 8 8 20 16 8 8 23 11 16 1 16 20 16 12 12 1 4 23 11 16 1 14 20 16 12 12 17 13 13 16 13 14 21 1 1 5 13 23 12 15 1 4 23 12 16 1 9 23 12 17 1 10 23 13 18 1 12 23 14 15 4 15 16 17 18 23 15 0 1 15 11 0 8) #(0 58 68 97 106 117) #("CASE" %CASE NIL 1 0 CALL-NODE-ARG FIND-REGISTER CALL-NODE-ARGS LAMBDA-NODE-P MAKE-LABEL-NODE LAMBDA-NODE-BODY MAKE-LABEL LIST REVERSE APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%MVC #K(#(80 3 9 0 1 2 3 4 5 6 7 8 7 23 9 12 2 1 11 23 10 12 1 12 23 9 13 2 1 10 23 11 14 1 12 21 0 1 6 14 23 12 15 1 12 23 13 16 1 13 21 0 2 3 16 23 14 16 1 3 23 15 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 1 11 23 18 16 1 13 21 0 4 5 16 23 14 16 1 4 23 19 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 1 11 23 14 16 1 5 23 20 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 1 11 23 21 15 1 12 23 13 16 1 13 21 0 7 8 16 23 14 16 1 6 23 15 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 1 11 23 18 16 1 13 21 0 9 10 16 23 14 16 1 7 23 19 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 1 11 23 14 16 1 8 23 20 17 1 13 23 14 17 1 17 23 14 18 1 15 23 16 15 3 16 17 18 23 17 0 1 15 25 22 0 3 12 2 9) #(0 40 55 89 99 133 167 182 216 226 260 292) #(%MVCALL %MVLCALL %MVVCALL %SAVE-MVCALL %SAVE-MVLCALL %SAVE-MVVCALL NIL 1 0 CALL-NODE-ARG GET-CONTINUATION FINAL-VALUE-CONTINUATION-P CONTINUATION-REGISTER GFUN-NODE-P LIST ADD-LITERAL APPEND PUSH-INSTRUCTION LIFTED-LFUN-NODE-P GET-FUNCTION-LABEL FIND-REGISTER CONTINUATION-VALUE-REGISTER CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%MVCC #K(#(80 3 3 0 1 2 7 23 3 6 2 1 5 23 4 7 1 6 23 5 8 1 6 51 3 9 1 8 23 6 9 2 9 7 21 0 1 2 9 39 7 10 23 8 10 2 10 7 23 9 11 1 3 23 10 12 1 10 23 9 12 1 12 23 11 10 3 11 12 10 23 12 0 1 10 20 8 2 0 57 0 80 3 0 0 25 13 0 2 2 1) #(0 39 75 81) #(%GET-VALUES NIL 0 CALL-NODE-ARG LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY SOME FIND-REGISTER MAPCAR LIST LENGTH APPEND PUSH-INSTRUCTION ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VALUES #K(#(80 3 6 0 1 2 3 4 5 5 23 6 9 2 1 8 23 7 9 1 9 39 8 10 23 9 11 1 1 17 11 11 23 10 10 2 10 11 23 11 11 1 9 23 12 12 1 7 23 13 13 1 10 23 12 13 1 13 23 14 12 3 12 13 10 23 15 0 1 12 37 61 2 1 11 8 23 16 0 1 5 23 12 12 1 4 23 12 13 1 11 23 14 12 2 12 13 23 15 0 1 12 25 17 0 3 9 2 6) #(0 76 102) #(NIL %GET-ONE-VALUE "VALUES occurred in non-multiple value continuations" T %SET-VALUES 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CALL-NODE-ARGS MAPCAR CONTINUATION-VALUE-REGISTER LIST LENGTH APPEND PUSH-INSTRUCTION WARN CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VALUES-LIST #K(#(80 3 7 0 1 2 3 4 5 6 5 23 7 10 2 1 9 23 8 10 1 10 23 7 11 2 1 8 23 9 11 1 11 23 10 12 1 10 23 11 13 1 7 23 11 14 1 11 23 12 13 2 13 14 23 13 0 1 13 37 61 2 1 12 9 23 14 0 1 5 23 11 13 1 4 23 11 14 1 12 23 12 13 2 13 14 23 13 0 1 13 25 15 0 3 10 2 6) #(0 65 91) #(NIL %GET-ONE-VALUE "VALUES-LIST occurred in non-multiple value continuations" T %SET-VALUES-LIST 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CONTINUATION-VALUE-REGISTER LIST APPEND PUSH-INSTRUCTION WARN CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CLEANUP-PROTECTED-CONTINUATION #K(#(80 4 4 0 1 2 3 4 0 3 8 20 1 8 8 23 4 9 1 2 37 61 2 1 9 6 23 5 10 1 5 23 5 11 1 9 23 6 10 2 10 11 23 7 0 1 10 25 8 0 3 2 8 7) #(0 26 47) #(NIL %GET-ONE-VALUE 0 T CONTINUATION-VALUE-REGISTER LIST APPEND PUSH-INSTRUCTION CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%CATCH #K(#(80 3 5 0 1 2 3 4 11 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 7 10 1 10 23 5 11 2 1 5 23 8 12 1 11 23 9 13 1 11 16 13 13 23 7 13 1 13 23 10 14 1 4 23 11 15 1 3 23 11 16 1 10 23 12 17 1 14 23 11 17 1 17 23 11 18 1 13 23 13 15 4 15 16 17 18 23 14 0 1 15 20 12 8 8 25 15 0 3 14 9 8) #(0) #(%CATCH "C" 2 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST MAKE-LABEL-NODE LIST MAKE-LABEL APPEND PUSH-INSTRUCTION CLEANUP-PROTECTED-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%THROW #K(#(80 3 2 0 1 3 23 2 5 2 1 4 23 3 5 1 5 23 4 6 1 3 23 4 7 1 5 23 5 5 2 6 7 23 6 0 1 5 11 0 2) #(0) #(%THROW 0 CALL-NODE-ARG FIND-REGISTER LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%CATCH-BLOCK #K(#(80 3 5 0 1 2 3 4 13 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 7 10 1 10 23 5 11 2 1 5 23 8 12 1 11 23 9 13 1 11 16 13 13 23 7 13 1 13 23 9 14 1 11 71 2 2 14 14 23 7 14 1 14 23 10 15 1 4 23 11 16 1 3 23 11 17 1 10 23 12 18 1 15 23 11 18 1 18 23 11 19 1 13 23 11 20 1 14 23 13 16 5 16 17 18 19 20 23 14 0 1 16 20 12 8 8 25 15 0 3 15 9 8) #(0) #(%CATCH-BLOCK "C" 2 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST MAKE-LABEL-NODE LIST MAKE-LABEL APPEND PUSH-INSTRUCTION CLEANUP-PROTECTED-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%THROW-RETURN-FROM #K(#(80 3 2 0 1 3 23 2 5 2 1 4 23 3 5 1 5 23 4 6 1 3 23 4 7 1 5 23 5 5 2 6 7 23 6 0 1 5 11 0 2) #(0) #(%THROW-RETURN-FROM 0 CALL-NODE-ARG FIND-REGISTER LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%CATCH-TAGBODY #K(#(80 3 1 0 1 23 1 4 2 1 3 23 2 4 1 4 20 4 2 0 57 0) #(0) #(1 CALL-NODE-ARG LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%DO-CATCH-TAGBODY #K(#(80 3 8 0 1 2 3 4 5 6 7 12 0 2 11 23 8 12 2 1 10 23 9 12 1 12 23 10 13 1 12 23 8 14 2 1 9 23 11 15 1 14 21 0 1 2 15 23 12 15 1 3 1 3 0 14 15 23 8 16 2 1 8 23 13 16 1 16 23 8 17 2 1 7 23 13 17 1 17 23 14 18 1 6 23 15 19 1 15 23 14 19 1 19 23 14 20 1 16 23 14 21 1 17 23 14 22 1 13 23 16 16 5 18 19 20 21 22 23 17 0 1 16 23 11 16 1 14 21 0 4 5 16 23 18 17 1 14 20 17 11 11 20 15 11 11 25 19 0 3 12 11 5) #(0 47 54 57 133 146) #("TAGBODY" NIL T %CATCH-TAGBODY 3 2 1 0 CALL-NODE-ARG GET-CONTINUATION CONTINUATION-VALUE-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE FIND-REGISTER LIST MAKE-LABEL APPEND PUSH-INSTRUCTION LAMBDA-NODE-BODY CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%THROW-GO #K(#(80 3 5 0 1 2 3 4 7 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 7 11 1 10 21 0 1 2 11 23 8 11 1 3 1 3 0 10 11 23 9 12 1 5 23 9 13 1 9 23 10 14 1 11 23 9 14 1 14 23 11 12 3 12 13 14 23 12 0 1 12 23 7 12 1 10 21 0 4 5 12 23 13 13 1 10 20 13 8 8 20 11 8 8 11 0 8) #(0 39 46 49 91 104) #("TARGET" NIL %THROW-GO 1 0 CALL-NODE-ARG FIND-REGISTER LAMBDA-NODE-P MAKE-LABEL-NODE LIST MAKE-LABEL APPEND PUSH-INSTRUCTION LAMBDA-NODE-BODY) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%ERRSET #K(#(80 3 5 0 1 2 3 4 11 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 5 11 2 1 5 23 7 11 1 11 23 8 12 1 10 23 9 13 1 10 16 13 13 23 7 13 1 13 23 10 14 1 4 23 11 15 1 3 23 12 16 1 14 23 11 16 1 16 23 11 17 1 13 23 11 18 1 11 23 13 15 4 15 16 17 18 23 14 0 1 15 20 12 8 8 25 15 0 3 14 9 8) #(0) #(%ERRSET "C" 2 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST MAKE-LABEL-NODE LIST MAKE-LABEL APPEND PUSH-INSTRUCTION CLEANUP-PROTECTED-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%UNWIND-PROTECT #K(#(80 3 5 0 1 2 3 4 15 0 2 8 23 5 9 2 1 7 23 6 9 1 9 23 5 10 2 1 6 23 7 11 1 10 23 8 12 1 10 16 12 12 23 9 12 1 12 23 5 13 2 1 5 23 7 14 1 13 23 8 15 1 13 16 15 15 23 9 15 1 15 23 10 16 1 4 23 10 17 1 4 23 11 18 1 3 23 12 19 1 16 23 11 19 1 19 23 12 20 1 17 23 11 20 1 20 23 11 21 1 12 23 11 22 1 15 23 13 18 5 18 19 20 21 22 23 14 0 1 18 20 11 8 8 20 16 8 8 20 14 8 8 25 15 0 3 17 9 8) #(0) #(%UNWIND-PROTECT "U" 2 1 0 CALL-NODE-ARG GET-CONTINUATION LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST FIND-REGISTER MAKE-LABEL-NODE LIST MAKE-LABEL APPEND PUSH-INSTRUCTION CLEANUP-PROTECTED-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%DYNAMIC-BIND #K(#(80 3 8 0 1 2 3 4 5 6 7 11 0 2 11 23 8 12 2 1 10 23 9 12 1 12 23 8 13 2 1 9 23 10 13 1 13 23 8 14 2 1 8 23 10 14 1 14 23 8 15 2 1 7 23 11 16 1 15 23 12 17 1 15 16 17 17 23 13 0 1 17 23 14 18 1 6 23 15 0 1 17 23 16 19 1 5 23 16 20 1 13 23 16 21 1 14 23 17 19 3 19 20 21 23 18 0 1 19 23 16 19 1 4 23 13 20 1 18 23 16 20 1 20 23 17 19 2 19 20 23 18 0 1 19 23 13 19 1 17 23 18 0 1 19 23 18 0 1 3 20 16 11 11 25 19 0 3 18 12 11) #(0) #((%DYNAMIC-UNBIND) %GOTO %DYNAMIC-BIND "D" 3 2 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST MAKE-LABEL MAKE-LABEL-NODE REGISTER-PROTECTED-CONTINUATION LIST APPEND PUSH-INSTRUCTION CLEANUP-PROTECTED-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%Y #K(#(80 3 3 0 1 2 17 34 2 6 23 3 7 2 1 5 23 4 8 1 7 23 5 8 1 8 23 6 9 1 7 23 7 10 1 9 23 8 10 2 10 4 21 0 1 2 10 23 3 11 2 9 5 39 9 12 23 4 13 1 11 23 10 12 2 12 13 23 11 13 1 12 23 12 14 1 9 17 14 14 51 4 15 0 23 10 15 3 15 14 12 39 9 16 23 13 17 2 13 14 23 10 16 2 16 17 23 11 17 1 16 34 3 18 51 3 19 1 18 23 14 0 3 19 15 12 35 18 19 23 15 19 1 19 36 18 19 0 23 16 19 1 4 23 16 20 1 13 23 16 21 1 17 35 18 22 23 17 12 5 19 20 21 22 16 23 18 0 1 12 23 6 9 1 11 23 12 9 1 9 16 9 10 17 9 11 23 5 11 1 11 51 5 12 1 6 23 14 0 3 12 8 11 23 6 7 1 10 35 6 8 20 7 8 7 36 6 7 0 35 6 6 11 0 6 80 4 0 1 35 1 4 20 2 4 4 36 1 4 0 35 1 4 20 3 4 4 36 1 4 0 57 0 80 3 0 0 25 19 0 1 1 80 4 0 2 23 6 4 1 3 35 1 5 20 4 5 4 36 1 4 0 35 1 4 20 2 4 4 36 1 4 0 57 0) #(0 47 175 225 253 262) #(NIL %MAKE-Y-CLOSURES 0 CALL-NODE-ARG LAMBDA-NODE-ARGLIST REVERSE LAMBDA-NODE-BODY CALL-NODE-FUNCTION GFUN-EQ FIND-REGISTER MAPCAR LENGTH CALL-NODE-ARGS NTHCDR MAPC NREVERSE LIST APPEND PUSH-INSTRUCTION GET-FUNCTION-LABEL) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%MAKE-CLOSURE #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 7 16 1 4 23 2 4 1 4 17 1 5 23 3 5 1 5 39 4 6 17 1 7 23 5 6 2 6 7 23 6 7 1 3 23 6 8 1 4 23 6 9 1 2 23 6 10 1 5 23 7 4 5 7 8 9 10 6 25 8 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %MAKE-CLOSURE GET-FUNCTION-LABEL LENGTH FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FUNCALL #K(#(80 3 5 0 1 2 3 4 10 23 5 8 2 1 7 23 6 8 1 8 23 5 9 2 1 6 23 7 9 1 9 39 7 10 23 8 11 1 1 71 2 0 11 11 23 9 10 2 10 11 23 10 11 1 10 23 11 12 1 8 21 0 1 2 12 23 12 13 1 8 23 13 14 1 3 23 13 15 1 9 23 13 16 1 13 23 13 17 1 11 23 14 13 5 14 15 16 17 10 23 15 0 1 13 1 3 23 16 13 1 8 23 13 14 1 4 23 13 15 1 9 23 13 16 1 13 23 13 17 1 11 23 14 13 5 14 15 16 17 10 23 15 0 1 13 25 17 0 3 8 2 5) #(0 65 106 145) #(%VCALL %SAVE-VCALL NIL 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CALL-NODE-ARGS MAPCAR LENGTH FINAL-VALUE-CONTINUATION-P CONTINUATION-REGISTER LIST APPEND PUSH-INSTRUCTION CONTINUATION-VALUE-REGISTER CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SYMVAL #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 3 23 2 4 1 3 16 1 5 23 3 5 1 5 23 2 5 1 5 23 2 6 1 2 23 4 4 3 4 5 6 25 5 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SYMVAL LIST ADD-LITERAL APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SYMFUN #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 3 23 2 4 1 3 16 1 5 23 3 5 1 5 23 2 5 1 5 23 2 6 1 2 23 4 4 3 4 5 6 25 5 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SYMFUN LIST ADD-LITERAL APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-SYMVAL #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 4 23 2 4 1 3 16 1 5 23 3 5 1 5 23 2 5 1 5 71 2 2 1 6 23 4 6 1 6 23 2 6 1 6 23 2 7 1 2 23 5 4 4 4 5 6 7 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-SYMVAL LIST ADD-LITERAL FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%COPY #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %COPY FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SETQ #K(#(80 3 8 0 1 2 3 4 5 6 7 7 23 8 11 2 1 10 23 9 11 1 11 23 8 12 2 1 9 23 10 12 1 12 23 8 13 2 1 8 23 10 13 1 13 23 11 14 1 11 23 12 15 1 7 23 12 16 1 13 23 12 17 1 12 23 13 15 3 15 16 17 23 14 0 1 15 37 35 1 2 14 10 23 12 15 1 7 23 12 16 1 13 23 12 17 1 14 23 13 15 3 15 16 17 23 14 0 1 15 1 4 23 15 15 1 11 50 0 4 3 15 5 23 12 15 1 4 23 12 16 1 13 23 13 15 2 15 16 23 14 0 1 15 25 16 0 3 11 2 6) #(0 83 112 123 144) #(NIL %SET-ONE-VALUE VALUE-IGNORED T %COPY 2 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CONTINUATION-VALUE-REGISTER LIST APPEND PUSH-INSTRUCTION CONTINUATION-TYPE CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SUPPLIED-P #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SUPPLIED-P FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%MAKE-CELL #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %MAKE-CELL FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%CELL-VALUE #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %CELL-VALUE FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-CELL-VALUE #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-CELL-VALUE FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%MV-COLLECT #K(#(80 3 2 0 1 1 23 2 5 2 1 4 23 3 5 1 5 25 4 0 3 5 2 3) #(0) #(NIL 0 CALL-NODE-ARG GET-CONTINUATION CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %NTH-VALUE (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%NTH-VALUE #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %NTH-VALUE FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%PUSH-VALUES #K(#(80 3 3 0 1 2 4 23 3 6 2 1 5 23 4 6 1 6 23 5 7 1 6 37 61 2 1 7 5 23 6 8 1 3 23 6 9 1 7 23 7 8 2 8 9 23 8 0 1 8 25 9 0 3 6 2 4) #(0 29 50) #(%PUSH-VALUES NIL 0 CALL-NODE-ARG GET-CONTINUATION CONTINUATION-VALUE-REGISTER LIST APPEND PUSH-INSTRUCTION CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%POP-VALUES #K(#(80 3 6 0 1 2 3 4 5 5 23 6 9 2 1 8 23 7 9 1 9 23 6 10 2 1 7 23 8 10 1 10 23 9 11 1 9 23 10 12 1 6 23 10 13 1 10 23 11 12 2 12 13 23 12 0 1 12 37 61 2 1 11 8 23 10 12 1 4 23 10 13 1 11 23 11 12 2 12 13 23 12 0 1 12 25 13 0 3 9 2 5) #(0 64 85) #(NIL %GET-ONE-VALUE T %POP-VALUES 1 0 CALL-NODE-ARG GET-CONTINUATION FIND-REGISTER CONTINUATION-VALUE-REGISTER LIST APPEND PUSH-INSTRUCTION CLEANUP-CONTINUATION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA + (&REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(+ #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 5 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 71 2 2 1 8 23 5 8 1 8 23 3 8 1 8 23 3 9 1 2 23 6 5 5 5 6 7 8 9 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\+ %ARITH2 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(+ #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA * (&REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(* #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 5 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 71 2 2 1 8 23 5 8 1 8 23 3 8 1 8 23 3 9 1 2 23 6 5 5 5 6 7 8 9 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\* %ARITH2 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(* #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA - (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(- #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 5 1 2 3 4 5 5 23 6 8 1 1 60 8 7 4 3 2 11 0 6 23 7 8 1 5 23 8 9 1 4 23 7 9 1 9 16 1 10 23 9 10 1 10 23 7 10 1 10 71 2 2 1 11 23 9 11 1 11 23 7 11 1 11 23 7 12 1 2 23 10 8 5 8 9 10 11 12 25 11 0 1 8 23 7 8 1 3 23 8 9 1 4 23 7 9 1 9 16 1 10 23 9 10 1 10 23 7 10 1 10 23 7 11 1 2 23 10 8 4 8 9 10 11 25 11 0 1 8) #(0 15 35 38 100) #(GENERATE-INLINE-FUNCTION-CODE %ARITH1 #\- %ARITH2 NIL #(1 2) LENGTH LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(- #K(#(80 2 1 0 1 23 1 3 1 1 3 76 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA / (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(/ #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 5 1 2 3 4 5 5 23 6 8 1 1 60 8 7 4 3 2 11 0 6 23 7 8 1 5 23 8 9 1 4 23 7 9 1 9 16 1 10 23 9 10 1 10 23 7 10 1 10 71 2 2 1 11 23 9 11 1 11 23 7 11 1 11 23 7 12 1 2 23 10 8 5 8 9 10 11 12 25 11 0 1 8 23 7 8 1 3 23 8 9 1 4 23 7 9 1 9 16 1 10 23 9 10 1 10 23 7 10 1 10 23 7 11 1 2 23 10 8 4 8 9 10 11 25 11 0 1 8) #(0 15 35 38 100) #(GENERATE-INLINE-FUNCTION-CODE %ARITH1 #\/ %ARITH2 NIL #(1 2) LENGTH LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(/ #K(#(80 2 1 0 1 23 1 3 1 1 3 76 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA MIN (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MIN #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 5 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 71 2 2 1 8 23 5 8 1 8 23 3 8 1 8 23 3 9 1 2 23 6 5 5 5 6 7 8 9 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\m %ARITH2 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MIN #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA MAX (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAX #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 5 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 71 2 2 1 8 23 5 8 1 8 23 3 8 1 8 23 3 9 1 2 23 6 5 5 5 6 7 8 9 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\M %ARITH2 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAX #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 3 21 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 13 23 14 24 1 23 23 14 25 1 22 23 14 26 1 1 23 14 27 1 21 23 14 28 1 20 23 14 29 1 19 23 24 27 3 27 28 29 23 14 27 1 27 23 24 25 3 25 26 27 23 14 25 1 25 23 14 26 1 18 23 14 27 1 1 23 14 28 1 17 23 14 29 1 16 23 24 28 2 28 29 23 14 28 1 28 23 14 29 1 15 23 14 30 1 14 23 14 31 1 13 23 14 32 1 12 23 24 31 2 31 32 23 14 31 1 31 23 14 32 1 11 23 14 33 1 2 23 24 32 2 32 33 23 14 32 1 32 23 14 33 1 10 23 14 34 1 9 23 14 35 1 17 23 24 34 2 34 35 23 14 34 1 34 23 24 33 2 33 34 23 14 33 1 33 23 14 34 1 10 23 14 35 1 8 23 14 36 1 17 23 24 35 2 35 36 23 14 35 1 35 23 24 34 2 34 35 23 14 34 1 34 23 14 35 1 16 23 24 30 6 30 31 32 33 34 35 23 14 30 1 30 23 24 29 2 29 30 23 14 29 1 29 23 24 26 4 26 27 28 29 23 14 26 1 26 23 14 27 1 7 23 14 28 1 1 23 14 29 1 6 23 24 29 1 29 23 14 29 1 29 23 14 30 1 5 23 14 31 1 4 23 14 32 1 6 23 24 31 2 31 32 23 14 31 1 31 23 14 32 1 3 23 24 30 3 30 31 32 23 14 30 1 30 23 24 27 4 27 28 29 30 23 14 27 1 27 25 24 0 4 24 25 26 27 80 3 0 2 17 1 3 51 1 4 0 25 25 0 2 4 3) #(0 20 389) #(DEFINE-ARITH-PRED-GENERATOR-2 COERCE-TO-MACRO XLISP::INSTALL-FUNCTION 3 CALL-NODE-ARG-COUNT = N DEFINE-CODE-GENERATOR-TEST SECOND FIRST FIND-REGISTER CHAR-INT %ARITH-PRED2 QUOTE LIST PUSH-INSTRUCTION R ARGS DEFINE-INLINE-FUNCTION-GENERATOR A &REST X DEFINE-LAMBDA-LIST PROGN APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA < (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(< #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\< CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(< #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA <= (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(<= #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\L CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(<= #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA = (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(= #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\= CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(= #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA /= (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(/= #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\# CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(/= #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA >= (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(>= #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\G CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(>= #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA > (X &REST A) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(> #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 3 23 3 5 1 4 16 1 6 23 4 6 1 6 71 2 2 1 7 23 4 7 1 7 23 5 5 5 3 5 6 7 2 25 6 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ARITH-PRED2 #\> CHAR-INT FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(> #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %GET FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GET #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-GET #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-GET FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-GET #K(#(80 2 1 0 1 23 1 3 1 1 3 61 3 2 0 57 0) #(0) #(3 CALL-NODE-ARG-COUNT) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CONSP (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSP #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %CONSP FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA ENDP (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ENDP #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ENDP FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA EQ (X Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EQ #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %EQ FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA EQL (X Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EQL #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %EQL FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA EQUAL (X Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EQUAL #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %EQUAL FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(AREF #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 4 1 2 3 4 5 23 5 7 1 1 60 7 6 4 3 2 11 0 5 23 6 7 1 4 16 1 8 23 7 8 1 8 23 6 8 1 8 71 2 2 1 9 23 7 9 1 9 23 6 9 1 9 71 3 4 1 10 23 7 10 1 10 23 6 10 1 10 23 6 11 1 2 23 8 7 5 7 8 9 10 11 25 9 0 1 7 23 6 7 1 3 16 1 8 23 7 8 1 8 23 6 8 1 8 71 2 2 1 9 23 7 9 1 9 23 6 9 1 9 23 6 10 1 2 23 8 7 4 7 8 9 10 25 9 0 1 7) #(0 15 34 37 104) #(GENERATE-INLINE-FUNCTION-CODE %AREF1 %AREF2 NIL #(2 3) LENGTH LIST FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(AREF #K(#(80 2 2 0 1 1 23 2 4 1 1 25 3 0 3 3 4 2) #(0) #(4 3 CALL-NODE-ARG-COUNT <=) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA AREF (X &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-AREF #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 4 1 2 3 4 6 23 5 7 1 1 60 7 6 4 3 2 11 0 5 23 6 7 1 4 16 1 8 23 7 8 1 8 23 6 8 1 8 71 2 2 1 9 23 7 9 1 9 23 6 9 1 9 71 3 4 1 10 23 7 10 1 10 23 6 10 1 10 23 8 11 1 1 23 7 11 1 11 23 6 11 1 11 23 6 12 1 2 23 9 7 6 7 8 9 10 11 12 25 10 0 1 7 23 6 7 1 3 16 1 8 23 7 8 1 8 23 6 8 1 8 71 2 2 1 9 23 7 9 1 9 23 6 9 1 9 71 3 4 1 10 23 7 10 1 10 23 6 10 1 10 23 6 11 1 2 23 9 7 5 7 8 9 10 11 25 10 0 1 7) #(0 15 34 37 120) #(GENERATE-INLINE-FUNCTION-CODE %SET-AREF1 %SET-AREF2 NIL #(3 4) LENGTH LIST FIND-REGISTER FOURTH APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-AREF #K(#(80 2 2 0 1 1 23 2 4 1 1 25 3 0 3 3 4 2) #(0) #(5 4 CALL-NODE-ARG-COUNT <=) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR-TEST) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-AREF (X V &REST ARGS) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-NTH (I X V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-NTH #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-NTH FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA RPLACA (X V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RPLACA #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %RPLACA FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA RPLACD (X V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(RPLACD #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %RPLACD FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-SVREF (X I V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-SVREF #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-SVREF FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-ELT (X I V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-ELT #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-ELT FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA NTH (I X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NTH #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %NTH FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA SVREF (X I) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SVREF #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SVREF FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA ELT (X I) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ELT #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %ELT FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CONS (X Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONS #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %CONS FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA 1+ (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(1+ #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 4 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 23 3 8 1 2 23 6 5 4 5 6 7 8 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\p %ARITH1 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA 1- (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(1- #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 4 23 3 5 1 4 23 4 6 1 3 23 3 6 1 6 16 1 7 23 5 7 1 7 23 3 7 1 7 23 3 8 1 2 23 6 5 4 5 6 7 8 25 7 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE #\m %ARITH1 LIST CHAR-INT FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA SLOT-VALUE (X &OPTIONAL Y) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SLOT-VALUE #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 4 1 2 3 4 4 23 5 7 1 1 60 7 6 4 3 2 11 0 5 23 6 7 1 4 16 1 8 23 7 8 1 8 23 6 8 1 8 71 2 2 1 9 23 7 9 1 9 23 6 9 1 9 23 6 10 1 2 23 8 7 4 7 8 9 10 25 9 0 1 7 23 6 7 1 3 16 1 8 23 7 8 1 8 23 6 8 1 8 23 6 9 1 2 23 8 7 3 7 8 9 25 9 0 1 7) #(0 15 34 37 88) #(GENERATE-INLINE-FUNCTION-CODE %SLOT-VALUE %SET-SLOT-VALUE NIL #(1 2) LENGTH LIST FIND-REGISTER APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %CAR FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %CDR FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 4 12 3 4 5 6 7 8 9 10 11 12 13 14 13 23 7 16 1 15 23 7 17 1 14 23 7 18 1 1 23 7 19 1 13 23 15 19 1 19 23 7 19 1 19 23 15 17 3 17 18 19 23 7 17 1 17 23 7 18 1 12 23 7 19 1 1 23 7 20 1 11 23 7 21 1 10 23 15 20 2 20 21 23 7 20 1 20 23 7 21 1 9 23 7 22 1 8 23 7 23 1 7 23 7 24 1 6 23 15 23 2 23 24 23 7 23 1 23 23 7 24 1 2 23 7 25 1 3 23 7 26 1 5 23 7 27 1 4 23 7 28 1 11 23 15 27 2 27 28 23 7 27 1 27 23 15 26 2 26 27 23 7 26 1 26 23 7 27 1 10 23 15 22 6 22 23 24 25 26 27 23 7 22 1 22 23 15 21 2 21 22 23 7 21 1 21 23 15 18 4 18 19 20 21 23 7 18 1 18 25 15 0 3 16 17 18 80 3 0 2 17 1 3 51 1 4 0 25 16 0 2 4 3) #(0 20 238) #(DEFINE-CXR-GENERATOR COERCE-TO-MACRO XLISP::INSTALL-FUNCTION FIRST FIND-REGISTER %CXR QUOTE LIST PUSH-INSTRUCTION R ARGS DEFINE-INLINE-FUNCTION-GENERATOR X DEFINE-LAMBDA-LIST PROGN APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CAAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CAAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 3 2 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CADR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CADR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 1 16 1 5 23 3 5 1 5 23 4 5 5 4 3 3 5 2 25 5 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 2 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 1 2 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDDR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDDR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 0 2 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CAAAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CAAAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 7 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CAADR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CAADR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 6 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CADAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CADAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 5 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CADDR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CADDR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 4 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDAAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDAAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 2 1 2 1 16 1 5 23 3 5 1 5 23 4 5 5 4 3 3 5 2 25 5 0 1 5) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDADR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDADR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 2 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDDAR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDDAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 1 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA CDDDR (X) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CDDDR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 3 1 2 3 1 16 1 6 23 4 6 1 6 23 5 6 5 5 4 3 6 2 25 6 0 1 6) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE 0 3 %CXR FIND-REGISTER LIST PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-CAR (X V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-CAR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-CAR FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CMP-LAMBDA-LIST-DATA %SET-CDR (X V) LAMBDA-LIST-DATA %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(%SET-CDR #K(#(80 3 0 1 51 1 3 0 25 0 0 3 3 1 2 80 3 1 1 2 39 2 4 23 3 4 2 4 1 23 4 5 1 2 23 5 4 2 4 5 20 3 4 4 25 6 0 1 4) #(0 15) #(GENERATE-INLINE-FUNCTION-CODE %SET-CDR FIND-REGISTER MAPCAR LIST APPEND PUSH-INSTRUCTION) 0 NIL) BYTE-CODE-CLOSE SET-CODE-GENERATOR) 0 NIL)) EVAL) 0 NIL)
