(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLSCMP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CALL-RULES* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *CALL-RULES* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CALL-RULES*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*LAMBDA-CALL-RULES* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *LAMBDA-CALL-RULES* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*LAMBDA-CALL-RULES*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*SIMPLIFY-DEBUG* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 21 0 1 2 3 11 0 1 25 3 0 2 2 1) #(0 16 19) #(NIL *SIMPLIFY-DEBUG* BOUNDP SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*SIMPLIFY-DEBUG*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-CALL-RULE #K(#(80 3 0 2 38 0 3 23 1 3 2 1 3 21 0 1 2 3 79 3 2 0 57 0 20 1 2 3 38 0 4 20 3 4 3 49 0 3 0 57 0) #(0 18 24) #(*CALL-RULES* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-LAMBDA-CALL-RULE #K(#(80 3 0 2 38 0 3 23 1 3 2 1 3 21 0 1 2 3 79 3 2 0 57 0 20 1 2 3 38 0 4 20 3 4 3 49 0 3 0 57 0) #(0 18 24) #(*LAMBDA-CALL-RULES* ASSOC) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ADD-SYMBOL-CALL-RULE #K(#(80 4 1 0 2 46 1 4 5 23 1 5 2 2 5 21 0 1 2 5 79 5 3 0 57 0 20 2 3 5 46 1 4 6 20 5 6 5 25 2 0 3 1 4 5) #(0 20 26) #(CALL-SIMPLIFICATION-RULES ASSOC %SET-GET) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 4 23 7 7 1 6 23 7 8 1 5 23 7 9 1 1 23 8 8 2 8 9 23 7 8 1 8 23 7 9 1 4 23 7 10 1 3 23 8 10 2 10 2 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 25 8 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 95) #(DEFINE-CALL-RULE COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE ADD-CALL-RULE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 2 0 4 3 4 5 6 4 23 7 7 1 6 23 7 8 1 5 23 7 9 1 1 23 8 8 2 8 9 23 7 8 1 8 23 7 9 1 4 23 7 10 1 3 23 8 10 2 10 2 23 7 10 1 10 23 8 9 2 9 10 23 7 9 1 9 25 8 0 3 7 8 9 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 95) #(DEFINE-LAMBDA-CALL-RULE COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE ADD-LAMBDA-CALL-RULE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 77 2 3 0 4 3 4 5 6 5 23 7 8 1 7 23 7 9 1 6 23 7 10 1 1 23 8 9 2 9 10 23 7 9 1 9 23 7 10 1 6 23 7 11 1 2 23 8 10 2 10 11 23 7 10 1 10 23 7 11 1 5 23 7 12 1 4 23 8 12 2 12 3 23 7 12 1 12 23 8 11 2 11 12 23 7 11 1 11 25 8 0 4 8 9 10 11 80 3 0 2 17 1 3 51 1 4 0 25 9 0 2 4 3) #(0 20 117) #(DEFINE-SYMBOL-CALL-RULE COERCE-TO-MACRO XLISP::INSTALL-FUNCTION LAMBDA FUNCTION QUOTE ADD-SYMBOL-CALL-RULE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(APPLY-SIMPLIFICATION-RULES #K(#(80 2 6 0 1 2 3 4 5 10 0 7 8 23 6 9 1 1 21 0 1 34 9 38 7 10 16 10 11 21 1 2 11 10 38 8 12 21 0 3 4 12 23 9 12 1 1 1 5 0 7 12 17 11 13 31 13 13 1 1 21 0 6 10 13 0 5 8 38 8 14 21 0 7 8 14 23 10 0 1 12 23 10 0 1 1 38 11 14 21 0 9 10 14 16 11 14 23 12 0 3 5 2 14 17 10 10 16 10 11 21 1 2 11 10 23 13 12 1 1 23 14 13 1 12 21 0 12 23 13 38 15 12 16 12 13 21 1 13 34 12 23 13 14 1 1 23 14 14 1 14 21 0 14 34 14 38 8 14 21 0 15 16 14 23 9 14 1 1 1 17 0 7 14 17 13 15 31 15 15 1 1 21 0 18 22 15 0 5 8 38 8 16 21 0 19 20 16 23 10 0 1 14 23 10 0 1 1 38 11 16 21 0 21 22 16 16 13 16 23 12 0 3 5 3 16 17 12 12 16 12 13 21 1 13 34 12 23 16 12 1 12 46 12 6 13 16 13 14 21 1 24 34 13 23 13 15 1 1 23 17 15 2 15 12 21 0 25 34 15 38 8 15 21 0 26 27 15 23 9 15 1 1 1 28 0 7 15 17 14 16 31 16 16 1 1 21 0 29 33 16 0 5 8 38 8 17 21 0 30 31 17 23 10 0 1 15 23 10 0 1 1 38 11 17 21 0 32 33 17 16 14 17 23 12 0 4 5 4 12 17 17 13 13 16 13 14 21 1 24 34 13 11 0 8) #(0 23 34 42 49 52 65 76 86 94 104 115 130 141 156 164 171 174 187 198 208 216 226 237 254 270 278 285 288 301 312 322 330 341 352) #("call rule ~a~%" "lambda rule ~a~%" "symbol rule ~a ~a~%" T CALL-SIMPLIFICATION-RULES NIL CALL-NODE-P *CALL-RULES* *SIMPLIFY-DEBUG* COPY-NODE-TREE PP-CPS *BREAKENABLE* FORMAT CALL-NODE-FUNCTION LAMBDA-NODE-P *LAMBDA-CALL-RULES* LEAF-NODE-VALUE GFUN-EQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIMPLIFY-NODE #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 2 4 23 2 4 1 1 21 0 1 2 4 39 3 4 23 4 5 1 1 23 5 4 2 4 5 21 0 3 4 4 25 6 0 2 1 2 11 0 3) #(0 16 26 45 51) #(T NIL APPLY-SIMPLIFICATION-RULES NODE-SIMPLIFIED-P NODE-CHILDREN EVERY SET-NODE-SIMPLIFIED) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEXT-UNSIMPLIFIED-NODE #K(#(80 2 1 0 1 21 0 1 4 1 27 5 3 1 1 21 0 2 3 3 11 0 3 23 1 3 1 1 25 2 0 1 3 11 0 2 80 2 2 3 0 3 21 0 6 7 1 0 3 4 1 8 0 2 4 21 0 10 9 4 23 4 4 1 1 21 0 11 12 4 11 0 3 23 5 4 1 1 16 4 5 21 1 13 16 4 27 5 6 1 5 21 0 14 15 6 11 0 6 17 4 4 16 4 5 21 1 13 16 4 11 0 1) #(0 10 20 23 33 36 47 52 55 60 65 70 73 86 96 99 110) #(NIL NODE-PARENT NEXT-UNSIMPLIFIED-NODE T NODE-SIMPLIFIED-P NODE-CHILDREN) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIRST-UNSIMPLIFIED-CHILD #K(#(80 2 1 0 3 23 1 3 1 1 16 3 4 21 1 1 4 3 23 2 5 1 4 21 0 2 3 5 17 3 3 16 3 4 21 1 1 4 3 11 0 4 11 0 2) #(0 18 28 39 42) #(NIL NODE-CHILDREN NODE-SIMPLIFIED-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEXT-LOWER-OR-EQUAL #K(#(80 2 2 0 1 2 0 1 4 0 4 5 21 0 2 3 5 0 3 5 1 4 0 2 5 21 0 6 5 5 23 2 5 1 4 21 0 7 8 5 11 0 3 23 3 5 1 4 21 0 9 10 5 0 5 4 1 1 11 0 4) #(0 9 17 22 25 30 35 40 43 53 58) #(T NIL NODE-SIMPLIFIED-P FIRST-UNSIMPLIFIED-CHILD) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEXT-UNSIMPLIFIED-NODE #K(#(80 2 1 0 2 0 1 3 21 0 2 5 3 23 1 4 1 3 21 0 3 4 4 11 0 4 23 2 4 1 3 23 3 3 1 4 1 1 11 0 2) #(0 8 13 23 26 38) #(NIL NEXT-LOWER-OR-EQUAL NODE-PARENT NEXT-UNSIMPLIFIED-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIMPLIFY-TREE #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 23 1 0 1 2 23 0 2 1 2 21 0 1 2 2 11 0 1) #(0 14 29) #(NEXT-UNSIMPLIFIED-NODE SIMPLIFY-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(VAR-EQ #K(#(80 3 0 0 40 1 2 0 57 0) #(0) #() 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SIMPLE-VALUE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 0 2 4 1 3 0 3 4 21 0 4 5 4 11 0 4 25 3 0 1 1) #(0 16 21 24 29 32) #(NIL T LAMBDA-NODE-P SIMPLE-LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CALL-REFERENCE-P #K(#(80 2 1 0 1 17 1 3 3 61 3 2 0 57 0) #(0) #(0) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ANY-CALL-REFERENCES-P #K(#(80 2 2 0 1 3 0 1 4 16 4 5 21 1 1 4 4 23 2 6 1 5 21 0 2 3 6 11 0 2 17 4 4 16 4 5 21 1 1 4 4 11 0 3) #(0 17 27 30 41) #(T NIL CALL-REFERENCE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SUBSTITUTE-VALUE #K(#(80 4 2 0 1 4 16 2 6 17 2 7 23 2 8 1 1 21 0 3 1 8 23 3 9 1 2 21 0 2 3 9 23 4 0 1 4 21 0 4 5 3 23 5 8 1 1 1 6 0 1 8 23 6 0 3 8 6 7 23 7 7 1 1 21 0 7 8 7 23 3 7 1 2 1 9 0 5 7 21 0 10 11 7 23 8 0 1 6 0 6 7 21 0 12 13 7 23 9 7 1 6 1 14 0 5 7 21 0 15 19 7 23 10 0 2 6 5 23 11 6 1 6 0 6 7 21 0 16 17 7 23 9 7 1 6 1 18 0 5 7 21 0 15 19 7 11 0 5) #(0 22 32 37 42 49 52 69 76 79 84 89 97 104 107 112 131 138 141 146) #("can't substitute a non-simple function in call position" NIL SIMPLE-VALUE-P CALL-REFERENCE-P ERROR COPY-NODE-TREE INSERT-NODE-TREE LAMBDA-NODE-P FIXUP-LAMBDA-CALL-NODE NODE-SIMPLIFIED-P SET-NODE-SIMPLIFIED NODE-PARENT) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SUBSTITUTE-VARIABLES #K(#(80 2 0 0 25 0 0 1 1) #(0) #(LAMBDA-CALL-SUBSTITUTE-VARIABLES) 0 NIL) BYTE-CODE-CLOSE ADD-LAMBDA-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ANY-SET-REFERENCES-P #K(#(80 2 4 0 1 2 3 4 0 1 6 16 6 7 21 1 1 7 6 16 7 8 23 4 8 1 8 23 5 8 2 8 4 21 0 2 3 8 17 7 9 3 61 9 2 8 1 4 0 5 8 21 0 5 6 8 11 0 3 17 6 6 16 6 7 21 1 1 7 6 11 0 5) #(0 19 38 48 51 56 59 70) #(2 T %SETQ NIL CALL-NODE-FUNCTION GFUN-EQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAFE-SET-SUBSTITUTE-VALUE-P #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 11 0 2 23 1 2 1 1 21 0 3 4 2 11 0 2 23 2 2 1 1 21 0 5 6 2 11 0 2 25 3 0 1 1) #(0 14 17 27 30 40 43) #(CONSTANT-NODE-P LAMBDA-NODE-P GFUN-NODE-P GVAR-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-CALL-SUBSTITUTE-VARIABLES #K(#(77 1 2 2 3 3 0 1 2 12 23 4 7 1 1 23 5 8 1 7 23 6 8 1 8 0 6 9 0 8 10 16 10 11 21 1 1 34 10 23 7 12 1 7 23 8 12 2 11 12 23 5 13 1 7 23 9 13 2 11 13 23 10 14 2 1 13 21 0 2 7 3 23 11 15 1 14 21 0 3 4 15 0 6 15 1 5 0 5 15 21 0 8 6 15 23 12 15 1 12 1 8 0 6 15 21 0 10 9 15 23 13 15 1 14 21 0 33 11 15 21 0 12 32 12 23 14 16 1 12 37 61 13 16 16 4 23 15 16 1 14 21 0 15 14 16 23 16 17 1 12 21 0 33 15 17 23 17 0 2 7 11 23 18 0 2 1 13 16 12 16 23 19 0 3 14 16 6 0 5 9 1 33 23 20 16 1 14 21 0 20 17 16 21 0 18 19 2 39 20 17 23 7 18 1 14 23 21 18 1 18 23 22 16 2 17 18 1 20 0 6 16 21 0 21 33 16 23 20 16 1 14 21 0 23 22 16 39 23 17 23 22 16 2 17 12 21 0 24 25 16 23 17 0 2 7 11 23 18 0 2 1 13 0 12 16 16 16 17 21 1 26 31 16 23 20 18 1 14 21 0 28 27 18 23 23 18 1 17 21 0 29 30 18 23 19 0 3 14 17 5 17 16 16 16 16 17 21 1 26 31 16 0 5 9 1 33 23 17 0 2 7 11 23 18 0 2 1 13 0 5 9 17 10 10 16 10 11 21 1 1 34 10 23 5 12 1 7 21 0 36 35 12 23 7 13 1 7 23 24 0 2 13 1 0 5 9 11 0 9) #(0 39 72 82 87 90 95 102 105 110 115 120 125 136 146 156 183 193 198 219 222 227 237 246 251 263 274 284 289 294 301 312 317 332 343 353 367) #(1 T NIL #(NIL NIL) CALL-NODE-FUNCTION LAMBDA-NODE-ARGLIST COPY-LIST LAMBDA-NODE-BODY FIND-REFERENCES POSITION CALL-NODE-ARG SAFE-SET-SUBSTITUTE-VALUE-P ANY-SET-REFERENCES-P MULTIPLE-VALUE-CONTINUATION-NODE-P LENGTH SIMPLE-VALUE-P ANY-CALL-REFERENCES-P LAMBDA-NODE-DELETE-ARG CALL-NODE-DELETE-ARG-INDEX SUBSTITUTE-VALUE LEAF-NODE-P NODE-CHILDREN EVERY CALL-REFERENCE-P MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NO-VARIABLES #K(#(80 2 2 0 1 2 23 2 4 1 1 23 3 5 1 4 21 0 1 2 5 11 0 2 23 4 4 1 4 23 5 0 2 4 1 11 0 3) #(0 21 24) #(NIL T CALL-NODE-FUNCTION LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-LAMBDA-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(TEST-CALL-P #K(#(80 2 1 0 1 23 1 3 1 1 25 2 0 2 3 2) #(0) #(%TEST CALL-NODE-FUNCTION GFUN-EQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LAMBDA-NODE-REAL-BODY #K(#(80 2 0 3 23 0 2 1 1 23 1 3 1 2 23 2 4 1 3 21 0 1 2 4 23 0 2 1 3 23 1 3 1 2 23 2 4 1 3 21 0 1 2 4 11 0 2) #(0 24 44) #(LAMBDA-NODE-BODY CALL-NODE-FUNCTION LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SHALLOW-COPY-NODE-TREE #K(#(80 2 0 1 23 0 2 0 23 1 0 2 1 2 11 0 2) #(0) #(MAKE-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(HOIST-INTERVENING-LAMBDAS #K(#(80 4 2 0 1 2 23 2 6 2 1 5 23 3 6 1 6 23 4 7 1 6 23 5 7 1 7 21 0 1 2 7 23 6 7 1 1 23 7 0 2 6 1 23 7 0 2 2 6 25 7 0 2 7 2 11 0 4) #(0 32 55) #(NIL 0 CALL-NODE-ARG LAMBDA-NODE-BODY CALL-NODE-FUNCTION LAMBDA-NODE-P SHALLOW-COPY-NODE-TREE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(HOIST-TEST-CONTINUATIONS #K(#(80 2 6 0 1 2 3 4 5 8 23 6 8 1 1 23 7 8 1 8 23 8 8 1 8 23 8 8 1 8 23 9 9 2 8 7 23 10 9 1 9 23 11 10 1 6 23 12 10 1 10 23 11 11 1 5 23 12 11 1 11 23 9 12 2 9 7 23 13 12 1 12 23 9 13 2 9 4 23 13 13 1 13 23 14 14 0 23 15 0 3 10 9 4 23 15 0 3 11 9 3 23 16 0 2 8 14 23 17 0 2 14 2 23 18 15 2 10 11 23 19 14 2 15 14 23 20 9 3 14 12 13 25 16 0 2 9 8) #(0) #(T 2 1 "Y" "X" 0 CALL-NODE-FUNCTION LAMBDA-NODE-REAL-BODY NODE-PARENT CALL-NODE-ARG LAMBDA-NODE-BODY GENSYM MAKE-LEAF-NODE COPY-NODE-TREE MAKE-NODE INSERT-NODE-TREE MOVE-NODE-TREE LAMBDA-CALL-SUBSTITUTE-VARIABLES LIST MAKE-LAMBDA-NODE MAKE-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(IF-IF #K(#(80 2 5 0 1 2 3 4 10 23 5 7 1 1 37 61 1 18 7 6 23 6 7 1 1 23 7 8 2 1 4 23 8 9 1 8 21 0 2 17 9 23 9 9 1 7 23 9 10 1 8 23 10 11 1 8 23 11 12 1 9 21 0 3 6 12 23 11 13 1 11 21 0 4 5 13 39 12 13 23 13 14 1 7 16 14 14 23 14 14 2 14 7 23 15 12 2 13 14 1 7 0 5 12 1 7 0 5 12 21 0 8 16 12 23 13 12 1 8 16 12 13 23 7 14 2 11 3 23 16 15 1 12 37 61 9 12 15 6 23 17 16 2 13 14 21 0 10 11 16 23 14 16 2 13 10 23 16 16 1 16 3 61 16 6 12 1 13 0 5 12 1 13 0 5 12 21 0 14 15 12 23 18 0 3 1 11 9 23 19 0 1 1 11 0 2 11 0 5 11 0 5 11 0 5 11 0 5) #(0 20 41 66 76 101 106 109 114 139 150 168 173 176 181 196 199 202 205) #(T 2 0 NIL 1 CALL-NODE-ARG-COUNT CALL-NODE-FUNCTION CALL-NODE-ARG LAMBDA-NODE-P LAMBDA-NODE-BODY LAMBDA-NODE-REAL-BODY TEST-CALL-P CALL-REFERENCE-P LAMBDA-NODE-ARGLIST FIND-REFERENCES EVERY LENGTH VAR-EQ HOIST-INTERVENING-LAMBDAS HOIST-TEST-CONTINUATIONS) 0 NIL) BYTE-CODE-CLOSE ADD-LAMBDA-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LEAF-NODE-CONSTANT-P #K(#(80 2 2 0 1 2 23 2 4 1 1 21 0 1 11 4 23 3 4 1 1 21 0 2 3 4 0 3 5 1 4 0 2 5 21 0 5 6 5 11 0 5 40 4 2 5 21 0 7 8 5 11 0 5 23 4 4 1 4 21 0 9 10 4 11 0 3 11 0 2 11 0 3) #(0 16 26 31 34 39 42 51 54 64 67 70) #(T NIL LEAF-NODE-P LEAF-NODE-VALUE SYMBOLP) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-FOLD-NUMBERS #K(#(77 1 2 1 3 3 0 1 2 3 39 4 6 23 5 7 1 1 17 7 7 23 6 6 2 6 7 39 7 7 23 8 7 2 7 6 21 0 1 5 7 21 0 2 3 2 0 2 7 1 4 23 9 7 1 1 23 4 7 1 7 23 10 7 1 7 23 11 6 2 7 6 23 12 7 2 1 4 23 13 8 1 6 23 14 6 2 7 8 23 15 0 2 6 1 11 0 3 11 0 5) #(0 41 46 51 61 98) #(T 0 NIL #(NIL) LEAF-NODE-VALUE CALL-NODE-ARGS MAPCAR NUMBERP EVERY CALL-NODE-FUNCTION SYMBOL-FUNCTION APPLY CALL-NODE-ARG MAKE-CONSTANT-NODE MAKE-CONTINUATION-CALL-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CONSTANT-FOLD-COMMUTATIVE #K(#(80 4 4 0 1 2 3 9 23 4 8 1 1 16 8 9 17 8 10 39 5 11 39 6 12 23 7 12 2 12 10 23 8 11 2 11 12 51 13 12 0 23 9 12 2 12 10 0 7 13 23 10 14 1 11 60 14 4 7 5 1 23 11 15 2 2 11 50 1 2 3 15 3 0 12 10 1 4 23 12 16 1 15 20 16 12 10 20 9 10 15 23 13 0 2 1 15 0 5 13 1 8 16 11 15 50 1 6 8 15 3 20 9 12 15 23 13 0 2 1 15 0 5 13 1 8 23 10 14 1 10 60 14 6 11 10 9 1 12 16 10 15 23 14 15 2 9 15 23 15 0 2 15 1 0 5 13 1 12 23 12 15 1 3 23 14 15 2 9 15 23 15 0 2 15 1 0 5 13 11 0 13 80 2 0 1 23 6 2 1 1 25 5 0 1 2) #(0 61 73 78 87 102 111 126 126 137 139 159 179 182) #(#(0 1) T #(0 1) NIL CALL-NODE-ARGS NUMBERP LEAF-NODE-VALUE MAPCAR REMOVE-IF-NOT REMOVE-IF LENGTH APPLY MAKE-CONSTANT-NODE SET-CALL-NODE-ARGS MAKE-CONTINUATION-CALL-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD + #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(0 + CONSTANT-FOLD-COMMUTATIVE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD * #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(1 * CONSTANT-FOLD-COMMUTATIVE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD - #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD / #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD MIN #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD MAX #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD = #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD /= #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD < #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD > #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD <= #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD >= #K(#(80 2 0 0 25 0 0 1 1) #(0) #(CONSTANT-FOLD-NUMBERS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHANGE-GFUN #K(#(80 3 1 0 1 23 1 4 1 2 23 2 0 2 1 4 11 0 3) #(0) #(T GET-GFUN-NODE SET-CALL-NODE-FUNCTION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(RENAME FIRST #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(CAR CHANGE-GFUN) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(RENAME SECOND #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(CADR CHANGE-GFUN) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(RENAME THIRD #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(CADDR CHANGE-GFUN) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(RENAME REST #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(CDR CHANGE-GFUN) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MERGE-GFUNS #K(#(77 1 4 1 4 4 0 1 2 3 6 23 5 9 2 1 8 23 6 10 1 9 21 0 1 7 10 21 0 2 3 4 0 7 11 1 4 0 6 11 21 0 5 6 11 0 11 10 1 8 23 7 11 1 1 2 43 4 5 12 3 61 11 12 10 1 8 0 7 10 21 0 9 17 10 23 8 10 1 9 23 9 11 1 9 23 10 12 1 9 16 12 12 23 11 13 1 11 23 12 13 2 13 2 21 0 10 13 13 23 13 14 1 11 23 14 14 1 14 16 14 14 50 0 11 12 12 14 23 15 14 2 12 9 23 16 14 1 14 3 61 5 14 12 1 14 0 7 12 1 14 0 7 12 21 0 15 16 12 23 13 12 1 11 23 17 12 1 12 23 13 13 1 1 17 13 13 23 18 12 2 12 13 23 19 0 2 11 12 23 20 0 2 11 3 23 21 0 2 10 1 11 0 6 11 0 7 11 0 7) #(0 27 32 37 40 45 50 67 70 75 109 128 146 151 154 159 204 207) #(1 T NIL 0 #(NIL) CALL-NODE-ARG LAMBDA-NODE-P CALL-NODE-ARG-COUNT LAMBDA-NODE-BODY LAMBDA-NODE-REAL-BODY LAMBDA-NODE-ARGLIST CALL-NODE-FUNCTION GFUN-EQ CALL-NODE-ARGS LAST FIND-REFERENCES LENGTH BUTLAST APPEND SET-CALL-NODE-ARGS CHANGE-GFUN MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CDR-CAR=>CDAR CAR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CDAR CDR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CDR-CAR=>CAAR CAR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CAAR CAR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CAR-CDR=>CADR CDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CADR CAR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CDR-CDR=>CDDR CDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CDDR CDR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CDR-CDDR=>CDDDR CDDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CDDDR CDR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CDDR-CDR=>CDDDR CDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CDDDR CDDR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CAR-CDDR=>CADDR CDDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CADDR CAR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CADR-CDR=>CADDR CDR #K(#(80 2 2 0 1 0 25 2 0 3 1 3 2) #(0) #(CADDR CADR MERGE-GFUNS) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(CONSTANT-FOLD %TEST #K(#(80 2 5 0 1 2 3 4 4 23 5 7 2 1 6 23 6 8 1 7 21 0 1 5 8 23 7 7 1 7 23 5 8 2 1 4 23 5 9 2 1 3 21 0 2 3 7 23 8 10 1 8 23 9 0 2 10 1 1 4 23 8 10 1 9 23 9 0 2 10 1 11 0 2 11 0 5) #(0 25 47 60 71 74) #(T 1 0 NIL 2 CALL-NODE-ARG LEAF-NODE-CONSTANT-P LEAF-NODE-VALUE MAKE-NULL-CALL-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-NULL-CALL-NODE #K(#(80 2 0 1 23 0 2 1 1 21 0 1 2 2 25 1 0 1 1 25 2 0 1 1) #(0 14 19) #(LAMBDA-NODE-P LAMBDA-NODE-BODY MAKE-CONTINUATION-CALL-NODE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(PROPAGATE1 %TEST #K(#(80 2 5 0 1 2 3 4 4 23 5 7 2 1 6 23 5 8 2 1 5 23 6 9 1 8 21 0 1 7 9 23 7 8 1 8 23 8 9 1 8 21 0 2 3 9 23 5 10 2 8 6 23 9 9 2 7 10 1 4 0 4 9 21 0 5 6 9 23 5 7 2 8 5 23 10 0 3 7 1 3 11 0 2 11 0 4 11 0 4) #(0 31 46 60 63 68 84 87) #(T 1 NIL 0 2 CALL-NODE-ARG LAMBDA-NODE-P LAMBDA-NODE-BODY TEST-CALL-P VAR-EQ INSERT-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(PROPAGATE2 %TEST #K(#(80 2 4 0 1 2 3 4 23 4 6 2 1 5 23 4 7 2 1 4 23 5 8 1 7 21 0 1 7 8 23 6 7 1 7 23 7 8 1 7 21 0 2 3 8 23 4 9 2 7 5 23 8 8 2 6 9 1 4 0 3 8 21 0 5 6 8 23 4 6 2 7 4 23 9 0 3 6 1 5 11 0 2 11 0 3 11 0 3) #(0 30 45 59 62 67 83 86) #(T NIL 1 2 CALL-NODE-ARG LAMBDA-NODE-P LAMBDA-NODE-BODY TEST-CALL-P VAR-EQ INSERT-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PARSE-DECLARATIONS #K(#(80 2 4 0 1 2 3 13 39 4 6 39 5 7 23 6 7 2 7 1 23 7 6 2 6 7 0 5 7 0 5 8 0 5 9 0 6 10 16 10 11 21 1 1 34 10 16 11 12 17 11 13 60 12 4 28 23 18 13 8 3 2 1 33 0 13 14 16 14 15 21 1 4 33 14 23 8 16 2 15 7 21 0 5 6 16 23 9 17 2 3 12 17 16 18 20 17 18 17 79 16 17 0 1 7 23 9 17 2 3 12 23 9 17 2 15 17 20 17 7 7 17 14 14 16 14 15 21 1 4 33 14 17 13 14 16 14 15 21 1 9 33 14 23 8 16 2 15 7 21 0 10 11 16 16 13 17 23 9 17 2 3 17 17 16 18 20 17 18 17 79 16 17 0 1 12 16 13 17 23 9 17 2 3 17 23 9 17 2 15 17 20 17 7 7 17 14 14 16 14 15 21 1 9 33 14 0 13 14 16 14 15 21 1 14 33 14 23 8 16 2 15 7 21 0 15 16 16 17 16 17 20 12 17 17 79 16 17 0 1 17 23 9 17 2 15 12 20 17 7 7 17 14 14 16 14 15 21 1 14 33 14 17 13 14 16 14 15 21 1 19 33 14 23 8 16 2 15 7 21 0 20 21 16 16 13 17 23 9 17 2 2 17 17 16 18 20 17 18 17 79 16 17 0 1 22 16 13 17 23 9 17 2 2 17 23 9 17 2 15 17 20 17 7 7 17 14 14 16 14 15 21 1 19 33 14 0 13 14 16 14 15 21 1 24 33 14 23 8 16 2 15 8 21 0 25 26 16 17 16 17 20 12 17 17 79 16 17 0 1 27 23 9 17 2 15 12 20 17 8 8 17 14 14 16 14 15 21 1 24 33 14 0 13 14 16 14 15 21 1 29 33 14 23 8 16 2 12 9 21 0 30 31 16 17 16 17 20 15 17 17 79 16 17 0 1 32 23 9 17 2 12 15 20 17 9 9 17 14 14 16 14 15 21 1 29 33 14 17 10 10 16 10 11 21 1 1 34 10 25 9 0 3 7 8 9) #(0 46 62 64 75 86 105 121 132 143 154 176 195 206 217 228 241 251 262 273 284 306 325 336 347 358 371 381 392 403 414 427 437 448 459) #(FTYPE TYPE #(OPTIMIZE (INLINE NOTINLINE) FTYPE (SPECIAL IGNORE) TYPE (ARRAY ATOM BIGNUM BIT BIT-VECTOR CHARACTER COMPILED-FUNCTION COMPLEX CONS DOUBLE-FLOAT FIXNUM FLOAT FUNCTION HASH-TABLE INTEGER KEYWORD LIST LONG-FLOAT NIL NULL NUMBER PACKAGE PATHNAME RANDOM-STATE RATIO RATIONAL READTABLE SEQUENCE SHORT-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BIT-VECTOR SIMPLE-STRING SIMPLE-VECTOR SINGLE-FLOAT STANDARD-CHAR STREAM STRING SYMBOL T UNSIGNED-BYTE VECTOR EXTENDED-CHARACTER REAL)) NIL APPEND REST MAPCAR APPLY ASSOC LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIXUP-LET-VARIABLES #K(#(80 2 0 1 51 1 2 0 25 0 0 2 2 1 80 2 1 1 1 23 2 3 1 1 21 0 2 3 3 25 3 0 2 1 2 21 1 4 7 1 16 1 3 23 2 3 1 3 21 0 5 7 3 17 1 3 21 1 7 6 3 16 1 3 25 3 0 2 3 2 11 0 1) #(0 14 29 35 40 53 61 70) #(MAPCAR NIL SYMBOLP LIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNPARSE-VARIABLE-DECLARATIONS #K(#(80 2 2 0 1 4 21 0 1 2 1 16 1 4 23 2 5 1 2 17 1 6 51 3 7 1 4 23 3 6 2 7 6 23 4 4 2 5 6 23 2 4 1 4 25 4 0 1 4 11 0 3 80 3 0 2 23 5 3 1 2 21 0 4 5 3 23 2 3 1 2 23 2 4 1 1 25 4 0 2 3 4 23 2 3 1 1 25 4 0 2 2 3) #(0 11 49 52 66 82) #(DECLARE NIL LIST MAPCAR APPEND SYMBOLP) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNPARSE-FUNCTION-DECLARATIONS #K(#(80 2 2 0 1 4 21 0 1 2 1 16 1 4 23 2 5 1 2 17 1 6 51 3 7 1 4 23 3 6 2 7 6 23 4 4 2 5 6 23 2 4 1 4 25 4 0 1 4 11 0 3 80 3 0 2 23 5 3 1 2 21 0 4 5 3 23 2 3 1 2 23 2 4 1 1 25 4 0 2 3 4 23 2 3 1 1 25 4 0 2 2 3) #(0 11 49 52 66 82) #(DECLARE NIL LIST MAPCAR APPEND SYMBOLP) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNPARSE-COMPILER-DECLARATIONS #K(#(80 2 2 0 1 1 21 0 1 2 1 23 2 4 1 2 23 3 4 2 4 1 23 2 4 1 4 25 3 0 1 4 11 0 3) #(0 11 32) #(DECLARE NIL LIST APPEND) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(DECLARE-NO-SIDE-EFFECTS #K(#(80 2 3 0 1 2 3 23 3 5 1 1 21 0 1 2 5 23 4 0 3 1 3 2 1 4 0 1 6 16 6 7 21 1 3 4 6 23 5 0 1 7 17 6 6 16 6 7 21 1 3 4 6 11 0 4) #(0 17 26 37 53) #(T CMP-NO-SIDE-EFFECTS NIL SYMBOLP %SET-GET DECLARE-NO-SIDE-EFFECTS) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NO-SIDE-EFFECTS-P #K(#(80 2 1 0 1 23 1 3 1 1 46 3 2 0 57 0) #(0) #(CMP-NO-SIDE-EFFECTS LEAF-NODE-VALUE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((+ - * / MIN MAX = /= < > <= >= %SYMVAL %SYMFUN) DECLARE-NO-SIDE-EFFECTS) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-Y-FUNCTION #K(#(80 3 4 0 1 2 3 3 23 4 7 2 1 6 23 5 7 1 7 23 6 8 1 7 23 7 8 2 8 5 21 0 1 2 8 23 4 9 2 7 6 23 5 7 1 9 2 43 2 4 8 25 4 0 2 7 8) #(0 35 46) #(NIL 1 %MAKE-Y-CLOSURES 0 CALL-NODE-ARG LAMBDA-NODE-BODY CALL-NODE-FUNCTION GFUN-EQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-Y-BODY #K(#(80 2 1 0 0 25 1 0 2 1 2) #(0) #(-1 FIND-Y-FUNCTION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-Y-LIST-NAMES #K(#(80 2 2 0 1 3 23 2 4 1 1 23 2 5 1 4 23 3 6 1 5 23 4 6 2 6 3 21 0 1 2 6 23 2 4 1 5 25 5 0 1 4) #(0 32 37) #(NIL %MAKE-Y-CLOSURES NODE-PARENT CALL-NODE-FUNCTION GFUN-EQ LAMBDA-NODE-ARGLIST) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-LAMBDA-BINDING #K(#(80 2 2 0 1 4 23 2 4 1 1 21 0 1 14 4 23 3 4 1 1 23 4 5 1 4 21 0 2 13 5 23 5 5 1 4 23 6 6 1 5 21 0 3 4 6 23 7 7 1 5 16 7 7 40 4 7 6 1 5 0 3 6 21 0 6 7 6 23 8 6 1 4 23 9 6 2 1 6 23 10 4 2 5 6 25 11 0 1 4 23 6 6 1 5 21 0 8 9 6 23 12 7 1 5 23 13 6 2 7 2 1 10 0 3 6 21 0 11 12 6 23 8 6 1 4 23 9 6 2 1 6 25 14 0 2 5 6 11 0 3 11 0 3 11 0 1) #(0 16 31 46 60 63 68 90 100 113 116 121 138 141 144) #((%Y %MAKE-Y-CLOSURES) NIL LOCAL-SYMBOL-NODE-P SYMBOL-NODE-OWNER LAMBDA-NODE-P NODE-PARENT CALL-NODE-P NODE-CHILDREN LAMBDA-NODE-ARGLIST POSITION CALL-NODE-ARG FIND-LAMBDA-BINDING CALL-NODE-FUNCTION GFUN-MEMBER FIND-Y-FUNCTION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FIND-LAMBDA-VARIABLE #K(#(80 2 3 0 1 2 4 23 3 5 1 1 23 4 6 1 5 23 5 7 1 6 21 0 1 4 7 50 0 2 3 1 6 11 0 3 23 6 7 1 5 23 7 7 2 1 7 23 8 8 1 6 48 7 8 0 57 0 23 9 6 2 6 4 21 0 5 6 6 23 6 6 1 5 23 7 6 2 1 6 2 45 6 2 6 23 10 7 1 5 48 6 7 0 57 0 11 0 3) #(0 27 33 36 58 69 96) #(1 NIL %Y-LIST NODE-PARENT CALL-NODE-FUNCTION LAMBDA-NODE-P CALL-NODE-ARGS POSITION LAMBDA-NODE-ARGLIST GFUN-EQ FIND-Y-LIST-NAMES) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(UNSAFE-CONTINUATION-LAMBDA-P #K(#(80 3 2 0 1 1 23 2 5 1 1 21 0 1 4 5 23 3 5 1 1 21 0 2 3 5 11 0 4 23 4 5 1 2 23 5 5 2 1 5 3 35 5 3 0 57 0 11 0 4) #(0 16 26 29 47) #(0 NIL LAMBDA-NODE-P CONTINUATION-NODE-P NODE-CHILDREN POSITION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAFE-CONTINUATION-REFERENCE-P #K(#(80 2 3 0 1 2 5 16 1 5 17 1 0 23 3 6 2 5 4 23 4 6 1 6 0 5 7 23 5 8 1 7 50 0 4 1 7 6 23 6 9 2 7 8 21 0 2 3 9 11 0 2 0 8 7 23 5 8 1 7 50 0 4 1 7 6 11 0 3) #(0 38 49 52 66) #(NIL T 0 CALL-NODE-ARG SYMBOL-NODE-OWNER NODE-PARENT UNSAFE-CONTINUATION-LAMBDA-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(SKIP-CATCH-IF-SAFE %CATCH-BLOCK #K(#(80 2 4 0 1 2 3 10 23 4 6 2 1 5 23 4 7 2 1 4 23 5 8 1 7 16 8 8 23 5 9 1 7 71 2 2 9 9 23 6 10 1 7 23 7 10 2 9 10 21 0 1 2 10 0 3 11 1 3 0 2 11 21 0 5 4 11 39 8 12 23 9 11 2 12 10 21 0 6 9 11 16 10 11 21 1 7 8 10 16 11 12 23 10 12 1 12 23 10 12 1 12 23 10 12 1 12 23 10 12 1 12 23 11 13 1 12 23 12 14 1 12 17 14 14 39 13 15 23 14 13 4 15 13 8 14 23 15 0 2 13 12 17 10 10 16 10 11 21 1 7 8 10 23 16 0 2 7 9 23 13 12 2 7 6 23 15 0 2 12 1 11 0 2 11 0 3) #(0 54 59 62 67 76 81 89 153 174) #(T NIL 2 0 CALL-NODE-ARG LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY FIND-REFERENCES SAFE-CONTINUATION-REFERENCE-P EVERY NODE-PARENT CALL-NODE-FUNCTION CALL-NODE-ARGS MAKE-CALL-NODE APPLY MOVE-NODE-TREE LAMBDA-NODE-DELETE-ARG) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(HOIST-NON-RECURSIVES %Y #K(#(80 2 3 0 1 2 14 23 3 5 2 1 4 23 4 6 1 5 23 5 6 1 6 23 6 7 1 5 23 7 8 1 7 17 8 8 23 5 8 1 8 0 3 9 0 6 10 16 10 11 21 1 1 4 10 51 9 12 1 11 23 8 12 2 12 8 21 0 2 3 12 23 9 13 2 11 6 20 13 9 9 17 10 10 16 10 11 21 1 1 4 10 21 0 5 8 9 0 3 12 0 3 13 0 9 14 16 14 15 21 1 6 7 14 48 15 6 16 48 15 8 17 23 10 0 2 5 16 23 11 0 2 7 17 20 16 12 12 20 17 13 13 17 14 14 16 14 15 21 1 6 7 14 23 3 16 2 7 4 23 6 16 1 16 39 12 17 23 13 18 1 16 23 14 18 2 12 18 23 15 17 3 17 18 13 23 16 0 2 17 16 11 0 2 11 0 3 80 3 2 1 0 1 23 17 5 2 1 2 21 0 10 11 5 11 0 3 11 0 4) #(0 55 71 81 92 97 114 153 194 197 214 217) #(T NIL 0 CALL-NODE-ARG LAMBDA-NODE-ARGLIST COPY-LIST LAMBDA-NODE-BODY CALL-NODE-ARGS EVERY POSITION LAMBDA-NODE-DELETE-ARG CALL-NODE-DELETE-ARG MAKE-CALL-NODE COPY-NODE-TREE MAKE-LAMBDA-NODE APPLY MOVE-NODE-TREE ANY-REFERENCES-P) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(NO-FUNCTIONS %Y #K(#(80 2 4 0 1 2 3 2 23 4 6 2 1 5 23 5 6 1 6 23 6 7 1 6 37 61 1 2 7 4 23 4 6 2 6 5 23 5 6 1 6 23 7 0 2 6 1 11 0 2 11 0 3) #(0 30 50) #(T NIL 1 0 CALL-NODE-ARG LAMBDA-NODE-BODY CALL-NODE-ARG-COUNT MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAFE-GO-PATH-P #K(#(80 3 3 0 1 2 3 0 1 6 50 0 9 1 6 2 23 3 7 1 6 21 0 2 5 7 23 4 8 1 6 21 0 3 4 8 0 4 7 1 6 23 5 8 1 6 23 6 8 1 8 23 7 8 2 6 8 3 35 8 3 7 1 6 0 4 7 21 0 7 8 7 11 0 4 23 5 6 1 6 50 0 9 1 6 2 11 0 5) #(0 16 26 36 41 64 67 72 75 86) #(0 NIL T LAMBDA-NODE-P CONTINUATION-NODE-P NODE-PARENT NODE-CHILDREN POSITION) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(SAFE-GO-REFERENCES-P #K(#(80 3 3 0 1 2 4 0 1 6 16 6 7 21 1 1 6 6 16 7 8 23 3 8 1 8 23 4 8 2 8 4 21 0 3 2 8 16 7 9 23 5 8 2 9 2 21 0 4 5 8 17 6 6 16 6 7 21 1 1 6 6 11 0 3 11 0 5) #(0 18 37 46 51 62 65) #(NIL %DO-CATCH-TAGBODY T CALL-NODE-FUNCTION GFUN-EQ SAFE-GO-PATH-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(SKIP-TAGBODY-CATCH %CATCH-TAGBODY #K(#(80 2 4 0 1 2 3 7 23 4 6 2 1 5 23 5 7 1 6 23 6 8 1 6 71 2 2 8 8 23 7 9 2 8 7 23 8 10 2 9 7 21 0 1 4 10 16 9 10 21 1 2 3 9 16 10 11 23 4 11 2 11 5 23 9 11 1 11 16 10 12 23 10 0 2 11 12 17 9 9 16 9 10 21 1 2 3 9 23 11 0 2 6 8 23 4 11 2 1 3 23 9 11 2 6 11 23 10 0 2 11 1 11 0 2 11 0 4) #(0 46 54 88 115) #(T 0 NIL 1 CALL-NODE-ARG LAMBDA-NODE-BODY LAMBDA-NODE-ARGLIST FIND-REFERENCES SAFE-GO-REFERENCES-P MAKE-CALL-NODE MOVE-NODE-TREE LAMBDA-NODE-DELETE-ARG) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(FUNCALL-SYMFUN-GFUN-TO-CALL %SYMFUN #K(#(80 2 5 0 1 2 3 4 7 23 5 7 2 1 6 23 6 8 1 7 21 0 1 7 8 23 7 8 1 7 16 8 8 23 8 9 1 7 23 9 10 1 9 23 10 10 2 10 4 21 0 2 3 10 23 5 11 2 9 3 40 8 11 10 1 4 0 5 10 21 0 5 6 10 39 11 10 23 5 11 2 1 3 23 5 12 2 9 6 23 12 13 1 9 71 2 0 13 13 23 13 7 4 10 11 12 13 23 14 0 2 7 1 11 0 2 11 0 5 11 0 5) #(0 25 54 66 69 74 116 119) #(T 1 FUNCALL NIL 0 CALL-NODE-ARG LAMBDA-NODE-P LAMBDA-NODE-ARGLIST LAMBDA-NODE-BODY CALL-NODE-FUNCTION GFUN-EQ MAKE-CALL-NODE CALL-NODE-ARGS APPLY MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(FUNCALL-FUNCTION-TO-CALL FUNCALL #K(#(80 2 6 0 1 2 3 4 5 8 23 6 8 2 1 7 23 7 9 1 8 21 0 1 2 9 0 9 8 1 5 23 8 10 1 8 21 0 3 4 10 0 10 8 1 5 23 9 8 1 8 21 0 6 9 8 38 10 8 38 11 9 38 12 10 38 13 11 38 14 12 23 15 8 5 8 9 10 11 12 69 5 8 1 8 70 11 0 2 23 16 10 1 4 23 17 10 1 10 23 6 11 2 1 3 23 6 12 2 1 7 23 18 13 1 1 71 2 0 13 13 23 15 14 1 10 39 19 15 23 20 15 4 15 10 11 13 23 21 13 2 14 15 23 19 10 2 13 12 23 22 0 2 10 1 1 7 11 0 6) #(0 26 31 41 46 51 56 85 89 157) #(T 0 "F" (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) NIL 1 CALL-NODE-ARG LAMBDA-NODE-P GFUN-NODE-P LFUN-NODE-P *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST GENSYM NEW-FENV-NODE CALL-NODE-ARGS MAKE-CALL-NODE APPLY MAKE-LAMBDA-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(QUOTE-SYMBOL-TO-GFUN FUNCALL #K(#(80 2 5 0 1 2 3 4 2 23 5 7 2 1 6 23 6 8 1 7 21 0 1 9 8 23 7 7 1 7 21 1 2 5 7 16 7 8 50 0 3 4 8 2 71 2 2 7 8 23 8 8 1 8 1 6 0 5 8 1 6 0 5 8 21 0 8 7 8 23 9 0 2 3 7 71 2 2 7 7 23 10 7 1 7 23 11 0 3 1 6 7 11 0 4 11 0 5) #(0 25 35 44 56 61 64 69 75 95) #(QUOTE "bad FUNCALL argument -- ~s" T NIL 1 CALL-NODE-ARG CONSTANT-NODE-P LEAF-NODE-VALUE SYMBOLP ERROR GET-GFUN-NODE SET-CALL-NODE-ARG) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(QUOTE-SYMBOL-TO-GFUN %MVC #K(#(80 2 5 0 1 2 3 4 2 23 5 7 2 1 6 23 6 8 1 7 21 0 1 9 8 23 7 7 1 7 21 1 2 5 7 16 7 8 50 0 3 4 8 2 71 2 2 7 8 23 8 8 1 8 1 6 0 5 8 1 6 0 5 8 21 0 8 7 8 23 9 0 2 3 7 71 2 2 7 7 23 10 7 1 7 23 11 0 3 1 6 7 11 0 4 11 0 5) #(0 25 35 44 56 61 64 69 75 95) #(QUOTE "bad MULTIPLE-VALUE-CALL argument -- ~s" T NIL 1 CALL-NODE-ARG CONSTANT-NODE-P LEAF-NODE-VALUE SYMBOLP ERROR GET-GFUN-NODE SET-CALL-NODE-ARG) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(LAMBDA-TO-CONTINUATION %MVC #K(#(80 2 7 0 1 2 3 4 5 6 8 23 7 9 2 1 8 23 8 10 1 9 48 7 10 10 23 9 11 1 9 21 0 1 2 11 23 10 11 1 9 1 3 0 6 11 21 0 4 9 11 38 11 11 38 12 12 38 13 13 38 14 14 38 15 15 23 16 11 5 11 12 13 14 15 69 5 11 1 6 70 57 0 23 7 13 2 1 4 23 17 14 1 9 17 14 14 21 0 7 8 10 23 18 14 1 14 39 19 15 23 20 14 2 15 14 39 21 15 23 20 14 2 15 14 23 22 15 1 3 39 23 16 23 24 16 4 16 9 13 14 23 25 16 2 14 16 23 23 13 2 15 16 23 26 0 2 13 1 10 2 1 5 11 0 6) #(0 36 43 46 51 80 83 102 107 163) #(T %MVCC 0 (*CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS*) NIL 5 1 CALL-NODE-ARG LAMBDA-NODE-LAMBDA-LIST LAMBDA-NODE-P SIMPLE-LAMBDA-NODE-P *CMP-ENV* *CMP-FENV* *CMP-DENV* *CMP-TENV* *CMP-SPECIALS* LIST LAMBDA-NODE-ARGLIST BUTLAST LEAF-NODE-VALUE MAPCAR NEW-ENV-NODE GET-GFUN-NODE MAKE-CALL-NODE APPLY MAKE-CONTINUATION-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NON-TAIL-CONTINUATION-P #K(#(80 2 0 0 25 0 0 1 1) #(0) #(LAMBDA-NODE-P) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MULTIPLE-VALUE-CONTINUATION-NODE-P #K(#(80 2 2 0 1 1 23 2 4 1 1 21 0 1 2 4 23 3 4 1 1 23 4 4 1 4 25 5 0 2 4 2 11 0 3) #(0 16 32) #(%MV-COLLECT NIL LAMBDA-NODE-P LAMBDA-NODE-BODY CALL-NODE-FUNCTION GFUN-EQ) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(NON-TAIL-CALL VALUES-LIST #K(#(80 2 3 0 1 2 3 23 3 5 2 1 4 23 4 5 1 5 23 5 6 1 5 21 0 1 3 6 23 6 7 1 5 21 0 3 2 7 25 7 0 2 1 2 11 0 3) #(0 28 38 44) #(CAR NIL 0 CALL-NODE-ARG FIND-LAMBDA-BINDING NON-TAIL-CONTINUATION-P MULTIPLE-VALUE-CONTINUATION-NODE-P CHANGE-GFUN) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(NON-TAIL-CALL VALUES #K(#(80 2 4 0 1 2 3 4 23 4 6 2 1 5 23 5 7 1 6 23 6 8 1 7 21 0 1 6 8 23 7 9 1 7 21 0 6 2 9 23 8 9 1 1 37 61 3 4 9 2 23 9 9 1 4 1 5 23 4 9 2 1 2 23 10 9 2 6 9 23 11 0 2 9 1 11 0 3 11 0 4) #(0 29 39 50 57 63 78) #(1 T NIL 0 CALL-NODE-ARG FIND-LAMBDA-BINDING NON-TAIL-CONTINUATION-P MULTIPLE-VALUE-CONTINUATION-NODE-P CALL-NODE-ARG-COUNT MAKE-CONSTANT-NODE MAKE-CONTINUATION-CALL-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 25 4 0 3 2 1 4) #(0) #(ONE-VALUE VALUES #K(#(80 2 5 0 1 2 3 4 3 23 5 7 1 1 37 61 1 3 7 5 23 6 8 2 1 4 23 7 8 1 8 21 0 3 2 8 23 6 8 2 1 4 23 6 9 2 1 3 23 8 8 2 8 9 23 9 0 2 8 1 11 0 2 11 0 6) #(0 20 36 63) #(T 1 0 2 NIL CALL-NODE-ARG-COUNT CALL-NODE-ARG MULTIPLE-VALUE-CONTINUATION-NODE-P MAKE-CONTINUATION-CALL-NODE MOVE-NODE-TREE) 0 NIL) BYTE-CODE-CLOSE ADD-SYMBOL-CALL-RULE) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MERGE-TESTS #K(#(80 2 19 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 6 23 19 21 1 1 21 0 1 2 21 23 20 22 1 1 20 22 19 22 23 21 21 1 22 1 5 23 22 22 1 1 21 0 3 4 22 20 1 19 22 23 21 21 1 22 1 5 0 19 21 21 0 6 30 21 71 2 1 21 22 21 0 7 24 22 16 21 23 17 21 21 16 23 23 23 22 24 1 23 21 0 9 8 24 23 23 0 2 2 23 23 24 24 1 23 23 25 25 1 24 21 0 10 5 25 23 26 24 1 24 60 24 18 23 22 21 20 19 18 17 16 15 14 13 12 11 1 5 23 27 0 4 23 17 16 15 1 5 23 27 0 4 23 17 14 13 1 5 23 27 0 4 23 17 12 13 1 5 23 27 0 4 23 17 11 13 1 5 23 27 0 4 23 17 10 15 1 5 23 27 0 4 23 17 9 15 1 5 23 27 0 4 23 17 8 13 1 5 23 27 0 4 23 17 7 13 1 5 23 27 0 4 23 17 6 13 1 5 23 27 0 4 23 17 5 13 1 5 23 27 0 4 23 17 4 13 1 5 23 27 0 4 23 17 3 13 1 5 16 21 23 79 23 20 0 71 2 3 21 23 23 28 23 1 23 16 23 24 21 1 25 5 23 23 19 25 1 24 21 0 26 27 25 23 20 26 1 24 20 26 19 26 20 26 21 21 1 29 23 22 26 1 24 21 0 28 29 26 20 24 19 26 20 26 21 21 17 23 23 16 23 24 21 1 25 5 23 11 0 1) #(0 33 49 59 70 73 78 88 107 113 128 149 151 161 171 181 191 201 211 221 231 241 251 261 271 296 306 321 331 339 350) #("non call node in merge - ~s" %TEST= %TEST/= %TEST< %TEST> %TEST>= %TEST<= %TEST-CONSP %TEST-ENDP %TEST-EQ %TEST-EQL 2 %TEST-EQUAL 1 %TEST-SUPPLIED-P %TEST #(= /= < > >= <= CONSP ENDP EQ EQL EQUAL %SUPPLIED-P) NIL T LAMBDA-NODE-P LAMBDA-NODE-BODY LIST CALL-NODE-P ERROR CALL-NODE-FUNCTION GFUN-NODE-P GFUN-SYMBOL MERGE-GFUNS NODE-CHILDREN) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)
