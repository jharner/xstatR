(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graph3" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("graphics" REQUIRE) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH MESSAGE) GRAPH-TOGGLE-ITEM-PROTO NIL TOGGLE-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 5 2 0 1 2 63 6 3 0 63 5 4 0 38 2 7 23 3 8 2 3 4 25 4 0 3 2 7 8) #(0) #(MESSAGE GRAPH :VALUE SEND CALL-NEXT-METHOD) 0 NIL) GRAPH-TOGGLE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SET-VALUE #K(#(80 2 4 0 1 2 3 4 62 5 6 62 4 7 23 4 8 2 7 6 21 0 1 2 8 0 2 8 1 3 0 3 8 38 5 9 23 4 9 2 1 9 21 0 4 5 9 0 2 9 1 6 0 3 9 50 0 7 8 8 9 11 0 3 25 4 0 3 7 6 9) #(0 25 30 33 47 52 55 61 64) #(T NIL GRAPH MESSAGE SEND :VALUE) 0 NIL) GRAPH-TOGGLE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH) GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO NIL CHOICE-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 6 0 1 2 3 4 5 3 63 8 2 0 23 6 9 2 7 6 38 7 10 38 8 11 23 9 11 2 2 11 50 0 1 2 11 5 0 3 11 1 3 0 4 11 25 10 0 3 9 10 11) #(0 38 43 46) #(0 1 WHITE "Black Background" "White Background" GRAPH LIST :VALUE :BACK-COLOR SEND CALL-NEXT-METHOD) 0 NIL) GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SET-VALUE #K(#(80 2 5 0 1 2 3 4 2 62 6 7 38 5 8 23 6 8 2 1 8 60 8 5 3 2 1 11 0 4 38 7 8 23 6 0 3 7 8 3 38 8 8 25 6 0 3 7 8 2 38 7 8 23 6 0 3 7 8 2 38 8 8 25 6 0 3 7 8 3) #(0 27 30 50) #(WHITE BLACK NIL #(0 1) GRAPH :VALUE SEND :BACK-COLOR :DRAW-COLOR) 0 NIL) GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GRAPH) GRAPH-SCALING-CHOICE-ITEM-PROTO NIL CHOICE-ITEM-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(80 3 8 0 1 2 3 4 5 6 7 3 63 10 2 0 23 8 11 3 9 8 7 38 9 12 38 10 13 23 11 13 2 2 13 60 13 6 3 2 1 0 5 13 1 4 0 4 13 1 4 0 3 13 25 12 0 3 11 12 13) #(0 41 46 51 54) #(0 1 2 #(VARIABLE FIXED) "No Scaling" "Fixed Scaling" "Variable Scaling" GRAPH LIST :VALUE :SCALE-TYPE SEND CALL-NEXT-METHOD) 0 NIL) GRAPH-SCALING-CHOICE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SET-VALUE #K(#(80 2 5 0 1 2 3 4 3 62 6 7 38 5 8 38 6 9 23 7 9 2 1 9 60 9 5 4 3 2 1 0 4 9 1 5 0 4 9 1 5 0 3 9 1 5 0 2 9 25 7 0 3 7 8 9) #(0 31 36 41 46 49) #(VARIABLE FIXED NIL #(0 1 2) GRAPH :SCALE-TYPE :VALUE SEND) 0 NIL) GRAPH-SCALING-CHOICE-ITEM-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Opens dialog to set plot options. Items are obtained using the
:make-options-dialog-items message." :SET-OPTIONS #K(#(80 2 1 0 6 38 1 3 23 2 3 2 1 3 38 3 4 38 4 5 38 5 6 38 6 7 51 3 8 2 1 3 23 2 3 7 4 5 3 6 2 7 8 56 2 1 4 4 57 0 38 7 5 25 2 4 2 3 5 38 8 5 25 2 4 2 3 5 80 3 0 3 0 2 3 16 3 4 21 1 4 5 3 38 9 5 23 2 0 2 4 5 17 3 3 16 3 4 21 1 4 5 3 38 10 5 25 2 0 2 1 5) #(0 50 59 68 83 103) #("Options" :MAKE-OPTIONS-DIALOG-ITEMS SEND OK-OR-CANCEL-DIALOG-PROTO :NEW :TITLE :OK-ACTION :REMOVE :MODAL-DIALOG :SET-VALUE :REDRAW) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SET-OPTIONS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-OPTIONS-DIALOG-ITEMS #K(#(80 2 5 0 1 2 3 4 8 38 5 7 38 6 8 23 7 7 3 7 8 1 38 8 8 38 6 9 38 9 10 23 7 8 5 8 9 6 1 10 38 8 9 38 6 10 38 10 11 23 7 9 5 9 10 5 1 11 38 8 10 38 6 11 38 11 12 23 7 10 5 10 11 4 1 12 23 12 11 0 21 0 1 2 11 38 8 12 38 6 13 38 13 14 23 7 11 5 12 13 2 1 14 1 3 0 3 11 23 14 7 5 7 8 9 10 11 25 15 0 2 3 7) #(0 85 105 108) #("Use color" NIL "Fixed Aspect Ratio" "Horizontal Scroll" "Vertical Scroll" GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO :NEW SEND GRAPH-TOGGLE-ITEM-PROTO :HAS-V-SCROLL :HAS-H-SCROLL :FIXED-ASPECT SCREEN-HAS-COLOR :USE-COLOR LIST REMOVE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-OPTIONS-DIALOG-ITEMS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-OPTIONS-DIALOG-ITEMS #K(#(80 2 4 0 1 2 3 7 38 4 6 38 5 7 23 6 6 3 6 7 1 38 7 7 38 5 8 38 8 9 23 6 7 5 7 8 5 1 9 38 7 8 38 5 9 38 9 10 23 6 8 5 8 9 4 1 10 23 10 9 0 21 0 1 2 9 38 7 10 38 5 11 38 11 12 23 6 9 5 10 11 2 1 12 1 3 0 3 9 23 12 6 4 6 7 8 9 25 13 0 2 3 6) #(0 66 86 89) #("Use color" NIL "Horizontal Scroll" "Vertical Scroll" GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO :NEW SEND GRAPH-TOGGLE-ITEM-PROTO :HAS-V-SCROLL :HAS-H-SCROLL SCREEN-HAS-COLOR :USE-COLOR LIST REMOVE) 0 NIL) SCATMAT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-OPTIONS-DIALOG-ITEMS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-OPTIONS-DIALOG-ITEMS #K(#(80 2 2 0 1 6 38 2 4 38 3 5 23 4 4 3 4 5 1 38 5 5 38 3 6 23 4 5 3 5 6 1 23 6 6 0 21 0 1 2 6 38 7 7 38 3 8 38 8 9 23 4 6 5 7 8 2 1 9 1 3 0 3 6 23 9 4 3 4 5 6 25 10 0 2 3 4) #(0 41 61 64) #("Use color" NIL GRAPH-BACKCOLOR-CHOICE-ITEM-PROTO :NEW SEND GRAPH-SCALING-CHOICE-ITEM-PROTO SCREEN-HAS-COLOR GRAPH-TOGGLE-ITEM-PROTO :USE-COLOR LIST REMOVE) 0 NIL) SPIN-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-OPTIONS-DIALOG-ITEMS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 4 2 4 5 0 3 5 16 5 6 21 1 4 5 5 38 7 7 23 8 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 9 7 23 8 0 4 4 7 2 1 23 10 0 2 2 4 11 0 2) #(0 20 25 30 47 68) #((PLOT) GRAPH-DIALOG-PROTO NIL MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :INSTALL #K(#(80 3 1 0 1 63 3 2 0 38 1 4 25 2 0 3 2 4 1) #(0) #(PLOT :ADD-SUBORDINATE SEND) 0 NIL) GRAPH-DIALOG-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:INSTALL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :CLOBBER #K(#(80 2 2 0 1 2 62 3 4 21 0 1 2 4 38 2 5 23 3 0 3 4 5 1 63 3 2 0 57 0) #(0 14 24) #(NIL PLOT :DELETE-SUBORDINATE SEND) 0 NIL) GRAPH-DIALOG-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLOBBER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADD-SLICER #K(#(80 3 2 0 1 1 62 4 5 23 2 5 2 2 5 63 4 5 0 38 3 5 23 4 5 2 1 5 21 0 1 2 5 38 5 5 25 4 0 2 1 5 11 0 3) #(0 33 42) #(NIL SLICERS ADJOIN :ALLOCATED-P SEND :ADJUST-SLICES) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADD-SLICER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REMOVE-SLICER #K(#(80 3 3 0 1 2 2 62 5 6 23 3 6 2 2 6 63 5 6 0 38 4 6 23 5 6 2 1 6 21 0 1 4 6 38 6 6 23 5 6 2 2 6 50 0 2 3 3 6 38 7 7 23 5 0 2 1 7 38 8 6 25 5 0 2 1 6 11 0 4) #(0 34 49 58 67) #(SHOW NIL SLICERS REMOVE :ALLOCATED-P SEND :TYPE :SHOW-ALL-POINTS :ADJUST-SLICES) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REMOVE-SLICER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 38 4 5 23 5 4 2 4 5 39 6 5 23 7 6 1 4 21 0 1 2 6 0 4 6 1 3 23 5 6 1 4 23 8 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 9 7 23 10 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 11 7 23 10 0 4 4 7 2 1 23 12 0 2 2 4 11 0 2) #(0 32 37 42 59 80) #((VARIABLE DELTA SELECTING) GRAPH-SLICER-PROTO NIL GRAPH-DIALOG-PROTO INTERVAL-SLIDER-DIALOG-PROTO LIST MAKE-OBJECT LISTP APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 6 0 1 0 4 3 3 0 1 2 3 63 10 3 0 63 9 4 0 63 8 7 0 39 5 11 38 6 12 51 1 13 1 2 23 7 0 5 11 5 12 13 6 38 8 11 25 9 0 3 1 11 2 80 3 0 1 38 10 3 25 9 0 2 1 3) #(0 55) #(SELECTING DELTA VARIABLE (NIL) (:SELECT) CALL-NEXT-METHOD :ACTION APPLY :INSTALL SEND :ADJUST-SLICES) 0 NIL) GRAPH-SLICER-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :INSTALL #K(#(80 3 0 1 23 0 0 1 2 38 1 3 25 2 0 3 2 3 1) #(0) #(CALL-NEXT-METHOD :ADD-SLICER SEND) 0 NIL) GRAPH-SLICER-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:INSTALL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :CLOBBER #K(#(80 2 2 0 1 2 62 3 4 21 0 1 2 4 38 2 5 23 3 0 3 4 5 1 25 4 0 0) #(0 14 24) #(NIL PLOT :REMOVE-SLICER SEND CALL-NEXT-METHOD) 0 NIL) GRAPH-SLICER-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:CLOBBER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SELECTION #K(#(80 2 2 0 1 5 38 2 4 23 3 4 2 1 4 62 3 5 62 2 6 2 45 4 6 7 2 43 4 6 8 23 4 4 3 7 5 8 25 5 0 1 4) #(0) #(DELTA VARIABLE :VALUE SEND < WHICH) 0 NIL) GRAPH-SLICER-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SELECTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :TYPE #K(#(80 2 3 0 1 2 1 62 4 5 21 0 1 2 5 11 0 2 11 0 3) #(0 15 18) #(SELECT SHOW SELECTING) 0 NIL) GRAPH-SLICER-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:TYPE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ADJUST-SLICES #K(#(80 2 1 0 3 62 2 3 21 0 1 4 3 39 1 3 62 2 4 51 6 5 0 23 2 4 2 5 4 23 3 3 2 3 4 62 2 4 51 5 5 0 23 4 4 2 5 4 21 0 2 3 4 38 5 4 25 6 0 3 1 4 3 38 7 4 25 6 0 3 1 4 3 38 8 3 23 6 0 2 1 3 38 9 3 25 6 0 2 1 3 80 2 1 10 1 38 11 3 23 6 3 2 1 3 40 2 3 0 57 0 80 2 0 1 38 12 2 25 6 0 2 1 2) #(0 13 53 63 73 91 111) #(SLICERS INTERSECTION MAPCAR REDUCE SOME :POINTS-SHOWING SEND :POINTS-SELECTED :UNSELECT-ALL-POINTS :SHOW-ALL-POINTS SHOW :TYPE :SELECTION) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ADJUST-SLICES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SLICER #K(#(77 3 3 0 1 0 7 6 6 0 1 2 3 4 5 9 0 5 13 0 13 14 21 0 2 1 14 0 8 13 23 8 14 1 2 23 9 15 1 2 23 10 14 2 14 15 48 12 14 15 48 11 14 16 2 45 15 16 15 23 11 15 3 10 4 15 39 12 16 38 13 17 38 14 18 48 11 14 19 2 43 19 15 19 48 12 14 20 2 45 20 15 20 23 10 19 2 19 20 38 15 20 38 16 21 23 17 15 12 16 17 18 1 2 15 19 20 13 21 6 3 38 18 16 48 11 14 17 48 12 14 18 2 43 17 18 17 2 47 17 9 17 23 12 0 3 15 16 17 11 0 15) #(0 27 30) #(NIL "Slicer" 2 0.5 0 1 (0.25 NIL 20) (:FRACTION :TITLE :POINTS) MIN MAX LIST * SEND GRAPH-SLICER-PROTO :NEW :TITLE :POINTS APPLY :VALUE) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SLICER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-SLICER-DIALOG #K(#(80 2 11 0 1 2 3 4 5 6 7 8 9 10 17 23 11 13 3 12 11 10 38 12 14 38 13 15 38 14 16 23 15 16 2 1 16 2 45 16 9 16 23 16 16 3 8 7 16 23 15 14 3 14 15 16 38 17 15 38 13 16 51 6 17 0 23 18 17 2 17 13 38 19 18 23 15 15 5 15 16 17 18 9 38 17 16 38 13 17 23 11 18 2 6 5 23 15 16 3 16 17 18 34 8 17 34 8 18 34 8 19 34 8 20 34 8 21 0 8 22 38 20 23 38 13 24 38 21 25 38 13 26 23 15 25 3 25 26 4 38 21 26 38 13 27 23 15 26 3 26 27 3 23 11 26 2 26 15 38 21 27 38 13 28 23 15 27 3 27 28 2 23 11 27 2 27 16 23 11 26 2 26 27 23 11 25 3 25 14 26 38 22 26 51 5 27 9 21 16 20 13 15 19 18 17 14 23 15 23 5 23 24 25 26 27 56 4 3 24 24 21 0 1 2 22 38 23 22 35 19 23 38 24 24 35 18 25 38 25 26 35 20 27 38 26 28 35 21 29 25 15 0 9 1 22 23 24 25 26 27 28 29 11 0 8 38 27 25 25 15 24 2 23 25 38 28 25 23 15 22 2 23 25 11 24 22 80 10 4 29 30 31 6 1 38 32 14 23 15 14 2 9 14 23 33 14 1 14 23 34 14 1 14 36 8 14 0 35 8 14 23 16 14 3 13 12 14 36 7 14 0 35 8 14 23 35 14 1 14 36 6 14 0 38 19 14 23 15 14 2 5 14 48 14 4 14 36 3 14 0 38 19 14 23 15 14 2 2 14 3 61 11 14 14 36 1 14 0 11 0 10 80 2 2 31 6 0 25 16 0 3 3 2 1) #(0 226 263 266 275 287 382) #("Slicer Type" "Fraction" "Variable" "Show Only Slice" "Select Slice" "(iseq 0 ~d)          " NIL 1 0.3 0.2 0.1 LIST EDIT-TEXT-ITEM-PROTO :NEW :NUM-POINTS SEND FORMAT CHOICE-ITEM-PROTO MAPCAR :VALUE OK-OR-CANCEL-DIALOG-PROTO TEXT-ITEM-PROTO :OK-ACTION :SLICER :TITLE :FRACTION :SELECT :REMOVE :MODAL-DIALOG T 0 "~a" :TEXT MAKE-STRING-INPUT-STREAM READ EVAL) 0 NIL) GRAPH-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-SLICER-DIALOG) 0 NIL)) EVAL) 0 NIL)
