(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("oneway" PROVIDE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("regress" REQUIRE) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((GROUPED-DATA) ONEWAY-MODEL-PROTO NIL REGRESSION-MODEL-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: ( data &key (print t))
DATA: list of compound-data
Example:" FUNCTION-DOCUMENTATION ONEWAY-MODEL %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ONEWAY-MODEL #K(#(77 3 2 0 0 0 2 1 1 0 3 51 3 5 0 23 3 5 2 5 1 38 4 6 38 5 7 23 6 6 2 6 7 38 7 7 23 6 0 3 6 7 5 38 8 7 23 6 0 3 6 7 3 21 0 1 2 2 38 9 7 23 6 0 2 6 7 11 0 6 80 2 1 10 0 25 11 0 2 1 2) #(0 58 67 70) #(NIL (T NIL) (:PRINT :GROUP-NAMES) MAPCAR ONEWAY-MODEL-PROTO :NEW SEND :GROUPED-DATA :GROUP-NAMES :DISPLAY LIST COERCE) 0 NIL) BYTE-CODE-CLOSE XLISP::INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Prints the least squares regression summary." :DISPLAY #K(#(80 2 4 0 1 2 3 2 23 4 0 0 38 5 6 23 6 6 2 1 6 38 7 7 23 6 7 2 1 7 23 8 0 4 5 4 6 7 38 9 6 23 6 6 2 1 6 38 10 7 23 6 7 2 1 7 23 8 0 4 5 3 6 7 25 8 0 2 5 2) #(0) #("~%" "Error Mean Square:~25t~13,6g~40t(~,6g)~%" "Group Mean Square:~25t~13,6g~40t(~,6g)~%" T CALL-NEXT-METHOD :GROUP-MEAN-SQUARE SEND :GROUP-DF FORMAT :ERROR-MEAN-SQUARE :ERROR-DF) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DISPLAY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns an expression that will reconstruct the model." :SAVE #K(#(80 2 3 0 1 2 5 23 3 5 1 4 23 3 6 1 3 38 4 7 23 5 7 2 1 7 23 3 7 1 7 23 6 6 2 6 7 23 3 6 1 6 23 3 7 1 2 23 3 8 1 3 38 0 9 23 5 9 2 1 9 23 3 9 1 9 23 6 8 2 8 9 23 3 8 1 8 25 6 0 4 5 6 7 8) #(0) #(:GROUP-NAMES QUOTE ONEWAY-MODEL LIST :GROUPED-DATA SEND APPEND) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SAVE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: (&optional data)
Sets or returns the grouped data." :GROUPED-DATA #K(#(77 1 2 1 8 8 0 1 2 3 4 5 6 7 4 21 0 1 2 2 39 9 11 23 10 11 2 11 2 23 11 12 1 2 2 45 12 8 12 23 12 12 2 7 12 39 11 13 23 13 13 2 13 2 23 14 12 2 12 13 23 15 13 1 12 51 3 14 1 12 23 13 12 2 14 13 39 16 13 23 10 12 2 13 12 63 6 11 0 63 5 12 0 63 4 9 0 63 10 2 0 38 17 11 23 18 0 3 1 11 3 62 10 0 57 0 80 3 2 4 5 1 3 61 2 1 5 25 19 0 3 5 4 3) #(0 20 111 116) #(T INTERCEPT X Y 0 1 NIL GROUPED-DATA #(NIL) APPEND APPLY LENGTH ISEQ MAPCAR REPEAT REMOVE-DUPLICATES BIND-COLUMNS :NEEDS-COMPUTING SEND IF-ELSE) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GROUPED-DATA) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional names)
Sets or returns group names." :GROUP-NAMES #K(#(77 1 2 1 5 5 0 1 2 3 4 5 64 2 8 21 2 1 2 2 0 2 9 1 3 0 3 9 21 0 4 5 8 63 7 9 0 62 7 8 62 6 9 23 6 9 1 9 21 0 6 7 8 23 6 10 1 8 3 61 9 10 10 1 8 0 3 10 21 0 10 9 10 2 45 9 5 11 23 7 11 2 4 11 51 11 12 0 23 8 11 2 12 11 63 7 11 0 62 7 0 57 0 80 2 2 9 0 0 25 10 0 3 3 2 1) #(0 20 25 28 33 37 53 65 68 73 98 103) #(NIL 0 1 GROUPED-DATA PREDICTOR-NAMES #(%NOT-SUPPLIED) LENGTH ISEQ MAPCAR "Group ~a" FORMAT) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GROUP-NAMES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("
Message args: ()
Returns the response vector." :Y #K(#(80 2 0 0 25 0 0 0) #(0) #(CALL-NEXT-METHOD) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:Y) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns the design matrix." :X #K(#(80 2 0 0 25 0 0 0) #(0) #(CALL-NEXT-METHOD) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:X) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Always returns nil. For compatibility with linear regression." :INTERCEPT #K(#(77 2 2 0 1 0 0 11 0 3) #(0) #(NIL) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:INTERCEPT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :PREDICTOR-NAMES #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(:GROUP-NAMES SEND) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PREDICTOR-NAMES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns list of within group standard deviations." :STANDARD-DEVIATIONS #K(#(80 2 0 2 39 0 2 38 1 3 23 2 3 2 1 3 25 3 0 2 2 3) #(0) #(STANDARD-DEVIATION :GROUPED-DATA SEND MAPCAR) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:STANDARD-DEVIATIONS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns degrees of freedom for groups." :GROUP-DF #K(#(80 2 1 0 1 38 1 3 23 2 3 2 1 3 23 3 3 1 3 2 45 3 2 0 57 0) #(0) #(1 :GROUPED-DATA SEND LENGTH) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GROUP-DF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns sum of squares for groups." :GROUP-SUM-OF-SQUARES #K(#(80 2 1 0 2 38 1 3 23 2 3 2 1 3 38 3 4 23 2 4 2 1 4 23 4 4 1 4 2 45 3 4 3 23 5 3 2 3 2 25 6 0 1 3) #(0) #(2 :FIT-VALUES SEND :Y MEAN ^ SUM) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GROUP-SUM-OF-SQUARES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns mean square for groups." :GROUP-MEAN-SQUARE #K(#(80 2 0 2 38 0 2 23 1 2 2 1 2 38 2 3 23 1 3 2 1 3 2 47 2 3 0 57 0) #(0) #(:GROUP-SUM-OF-SQUARES SEND :GROUP-DF) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GROUP-MEAN-SQUARE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returns degrees of freedom for error." :ERROR-DF #K(#(80 2 0 1 38 0 2 25 1 0 2 1 2) #(0) #(:DF SEND) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ERROR-DF) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Returna mean square for error." :ERROR-MEAN-SQUARE #K(#(80 2 0 2 38 0 2 23 1 2 2 1 2 38 2 3 23 1 3 2 1 3 2 47 2 3 0 57 0) #(0) #(:SUM-OF-SQUARES SEND :DF) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ERROR-MEAN-SQUARE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Message args: ()
Produce parallel box plots of the groups." :BOXPLOTS #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 25 2 0 1 2) #(0) #(:GROUPED-DATA SEND BOXPLOT) 0 NIL) ONEWAY-MODEL-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:BOXPLOTS) 0 NIL)) EVAL) 0 NIL)
