(XLISP::CHECK-FSL-VERSION 1 4)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("maximize" PROVIDE) 0 NIL)
#K(#(80 1 3 0 1 2 1 23 3 4 1 3 21 0 2 1 4 23 4 0 2 2 3 49 5 4 0 57 0) #(0 17 23) #(NIL "can't find package ~s" "XLISP" FIND-PACKAGE ERROR *PACKAGE*) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((NUMGRAD NUMHESS NEWTONMAX NELMEADMAX) EXPORT) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*DEFAULT-DERIVATIVE-STEP* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 1 38 2 3 23 3 3 2 3 2 25 4 0 2 1 3) #(0) #(*DEFAULT-DERIVATIVE-STEP* 0.16666666666666666 MACHINE-EPSILON ^ SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*DEFAULT-DERIVATIVE-STEP*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 2 3 4 2 23 5 3 1 2 23 5 4 1 1 25 6 0 2 3 4 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 42) #(MAKE-FUNDATA COERCE-TO-MACRO INSTALL-FUNCTION 7 MAKE-ARRAY LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-F COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-ARG COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-TYPX COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-FSUM COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-N COERCE-TO-MACRO INSTALL-FUNCTION 4 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-CHANGESIGN COERCE-TO-MACRO INSTALL-FUNCTION 5 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(FUNDATA-H COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 5 12 3 4 5 6 7 8 9 10 11 12 13 14 12 23 15 17 1 16 23 15 18 1 15 23 16 19 1 14 23 16 20 1 17 23 16 21 1 2 23 17 20 2 20 21 23 16 20 1 20 23 16 21 1 18 23 16 22 1 3 23 17 21 2 21 22 23 16 21 1 21 23 17 20 2 20 21 23 16 20 1 20 23 16 21 1 13 23 16 22 1 18 23 16 23 1 17 23 17 21 3 21 22 23 23 16 21 1 21 23 16 22 1 12 23 16 23 1 11 23 16 24 1 10 23 16 25 1 1 23 16 26 1 18 23 17 24 3 24 25 26 23 16 24 1 24 23 17 23 2 23 24 23 16 23 1 23 23 16 24 1 9 23 16 25 1 8 23 16 26 1 7 23 16 27 1 11 23 17 26 2 26 27 23 16 26 1 26 23 16 27 1 6 23 16 28 1 11 23 17 27 2 27 28 23 16 27 1 27 23 16 28 1 11 23 17 25 4 25 26 27 28 23 16 25 1 25 23 17 24 2 24 25 23 16 24 1 24 23 17 23 2 23 24 23 16 23 1 23 23 16 24 1 8 23 16 25 1 4 23 16 26 1 5 23 16 27 1 9 23 17 26 2 26 27 23 16 26 1 26 23 16 27 1 9 23 17 24 4 24 25 26 27 23 16 24 1 24 23 17 22 3 22 23 24 23 16 22 1 22 25 17 0 4 19 20 21 22 80 3 0 2 17 1 3 51 1 4 0 25 18 0 2 4 3) #(0 20 340) #(GET-FUNCTION-VALUE COERCE-TO-MACRO INSTALL-FUNCTION - FIRST CONSP IF FV FUNCALL V LET* REPLACE LET "ARG" "X" GENSYM LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CHANGE-ARRAY-SIGN #K(#(80 2 5 0 1 2 3 4 4 23 5 7 1 1 23 6 8 2 7 6 21 0 1 2 8 23 7 8 1 7 25 8 0 5 8 3 7 5 2 23 7 8 1 7 0 5 9 37 60 3 4 9 8 7 7 9 10 61 45 10 10 6 7 9 10 0 61 112 9 9 37 60 3 4 9 8 11 0 4) #(0 25 39 53 76) #(1 -1.0 NIL 0 (VECTOR FLOAT) COMPOUND-DATA-SEQ TYPEP LENGTH BLAS-DSCAL) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MAKE-FUNCTION-DATA #K(#(80 6 12 0 1 2 3 4 5 6 7 8 9 10 11 6 23 12 18 1 17 6 18 16 1 0 23 13 19 1 2 6 18 15 19 0 38 14 19 38 15 20 23 12 19 5 2 19 14 20 13 6 18 12 19 0 38 14 19 23 12 19 3 2 19 14 6 18 11 19 0 6 18 10 2 0 6 18 9 3 0 21 0 1 2 4 3 62 4 6 19 1 3 0 7 19 21 0 4 5 19 0 4 19 1 6 38 16 19 6 18 8 19 0 21 0 7 12 5 7 18 12 19 0 16 20 37 60 8 12 20 2 9 5 20 21 0 20 22 37 62 9 10 21 6 0 21 23 1 11 0 13 23 6 19 22 23 0 61 112 20 20 37 60 8 12 20 2 11 0 18) #(0 86 93 96 101 106 109 119 132 145 150 153 168) #(0.0 NIL 6 5 4 3 2 1.0 FLOAT 1 0 7 MAKE-ARRAY MAKE-LIST :ELEMENT-TYPE :INITIAL-ELEMENT *DEFAULT-DERIVATIVE-STEP*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-FUNCTION #K(#(80 5 8 0 1 2 3 4 5 6 7 11 7 1 12 13 7 1 11 14 7 1 10 15 7 1 9 16 7 1 8 17 7 1 7 18 7 1 6 19 23 8 0 2 14 2 31 13 20 1 14 21 1 1 2 20 16 20 21 1 3 0 20 21 21 0 4 22 20 21 1 5 6 20 23 9 22 1 20 2 45 22 11 22 1 7 0 12 22 21 0 8 9 18 61 45 21 21 21 0 10 14 3 37 62 11 13 22 12 71 2 2 20 23 23 8 0 2 3 23 21 0 12 14 18 23 10 0 1 3 1 14 23 11 0 7 17 2 3 16 1 19 15 21 0 15 22 4 37 61 16 18 22 10 23 12 22 1 4 71 3 4 20 23 23 12 23 1 23 23 8 0 2 22 23 21 0 17 22 18 23 10 0 1 4 1 22 37 61 19 21 22 11 21 0 21 20 3 23 11 0 7 17 2 16 16 1 19 15 23 13 0 8 17 2 4 21 16 1 19 15 11 0 21) #(0 56 61 64 69 74 86 89 94 98 103 109 125 132 143 148 154 180 187 193 198 209 221) #(NIL 6 5 4 3 2 1 0 REPLACE LENGTH CHANGE-ARRAY-SIGN CMPGRAD COMPOUND-DATA-SEQ CMPHESS) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CMPGRAD #K(#(80 8 6 0 1 2 3 4 5 10 7 5 13 14 7 5 12 15 7 5 11 16 0 13 17 37 60 1 15 17 1 7 2 17 18 21 0 2 3 7 7 7 17 19 2 42 19 6 19 1 4 0 6 19 0 9 20 0 9 21 2 43 18 19 22 6 2 17 22 0 23 6 0 2 15 2 31 14 22 1 15 21 1 5 6 22 16 22 22 21 0 7 8 16 61 45 22 20 1 9 0 22 20 2 45 18 19 22 6 2 17 22 0 23 6 0 2 15 2 31 14 22 1 15 21 1 10 11 22 16 22 22 21 0 12 13 16 61 45 22 21 1 14 0 22 21 6 2 17 18 0 2 45 20 21 22 2 42 8 19 23 2 47 22 23 22 6 3 17 22 0 2 43 20 21 18 6 4 17 18 0 61 112 17 17 37 60 1 15 17 1 11 0 10) #(0 31 40 51 54 86 89 94 100 103 129 132 137 143 146 191) #(2.0 0.0 NIL 5 1 0 REPLACE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CMPHESS #K(#(80 9 7 0 1 2 3 4 5 6 13 7 6 15 16 7 6 14 17 7 6 13 18 0 15 19 37 60 1 20 19 1 21 0 2 3 8 7 8 19 20 2 42 20 7 20 1 4 0 7 20 7 2 19 21 7 5 19 22 2 42 11 4 23 2 45 22 23 22 2 42 20 20 23 2 47 22 23 22 67 3 19 19 22 0 0 19 22 0 15 23 37 60 5 19 23 22 21 0 6 7 8 7 8 23 24 2 42 24 7 24 1 8 0 7 24 7 2 23 25 0 10 26 0 10 27 2 43 21 20 28 6 2 19 28 0 2 43 25 24 28 6 2 23 28 0 23 7 0 2 17 2 31 16 28 1 17 21 1 9 10 28 16 28 28 21 0 11 12 18 61 45 28 26 1 13 0 28 26 2 45 21 20 28 6 2 19 28 0 2 45 25 24 28 6 2 23 28 0 23 7 0 2 17 2 31 16 28 1 17 21 1 14 15 28 16 28 28 21 0 16 17 18 61 45 28 27 1 18 0 28 27 6 2 19 21 0 6 2 23 25 0 2 42 11 4 28 23 8 25 3 28 26 27 7 5 19 26 7 5 23 27 23 9 25 3 25 26 27 23 10 26 3 9 20 24 2 47 25 26 24 67 3 19 23 24 0 67 3 23 19 24 0 61 112 23 23 37 60 5 19 23 22 61 112 19 19 37 60 1 20 19 1 11 0 12) #(0 32 37 48 51 97 102 113 116 162 165 170 176 179 215 218 223 229 232 303 313) #(2.0 0.0 2 NIL 5 1 0 REPLACE + - *) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NUMGRAD #K(#(77 1 3 4 2 2 0 1 4 23 3 9 1 2 23 4 10 5 1 9 6 4 3 38 5 11 23 6 11 3 9 11 2 23 6 12 1 9 23 7 0 4 10 11 12 8 25 8 0 2 12 7) #(0) #(LIST NIL #(NIL NIL NIL NIL) LENGTH MAKE-FUNCTION-DATA :INITIAL-CONTENTS MAKE-ARRAY EVAL-FUNCTION COERCE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NUMHESS #K(#(77 1 3 4 1 1 0 7 23 2 8 1 2 23 3 9 5 1 8 6 4 3 38 4 10 23 5 10 3 8 10 2 23 5 11 1 8 23 0 12 2 8 8 23 5 12 1 12 23 6 13 4 9 10 11 12 21 0 1 2 5 23 7 14 2 11 7 25 0 0 3 13 14 12 11 0 12) #(0 61 74) #(LIST #(NIL NIL NIL NIL) LENGTH MAKE-FUNCTION-DATA :INITIAL-CONTENTS MAKE-ARRAY EVAL-FUNCTION COERCE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 2 3 4 2 23 5 3 1 2 23 5 4 1 1 25 6 0 2 3 4 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 42) #(MAKE-INTERNALS COERCE-TO-MACRO INSTALL-FUNCTION 7 MAKE-ARRAY LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-F COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-X COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-SCALE COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-DELF COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-HESSF COERCE-TO-MACRO INSTALL-FUNCTION 4 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-IPARS COERCE-TO-MACRO INSTALL-FUNCTION 5 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(INTERNALS-DPARS COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 2 3 4 2 23 5 3 1 2 23 5 4 1 1 25 6 0 2 3 4 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 42) #(MAKE-IPARS COERCE-TO-MACRO INSTALL-FUNCTION 11 MAKE-ARRAY LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-N COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-MAXITER COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-BACKTRACK COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-VERBOSE COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-VALS-SUPPL COERCE-TO-MACRO INSTALL-FUNCTION 4 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-COUNT COERCE-TO-MACRO INSTALL-FUNCTION 5 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-TERMCODE COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-CHANGE-SIGN COERCE-TO-MACRO INSTALL-FUNCTION 7 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-MAXTAKEN COERCE-TO-MACRO INSTALL-FUNCTION 8 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-CONSECMAX COERCE-TO-MACRO INSTALL-FUNCTION 9 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-RETCODE COERCE-TO-MACRO INSTALL-FUNCTION 10 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 2 3 4 2 23 5 3 1 2 23 5 4 1 1 25 6 0 2 3 4 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 42) #(MAKE-DPARS COERCE-TO-MACRO INSTALL-FUNCTION 8 MAKE-ARRAY LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-TYPF COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-DERIVSTEP COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-GRADTOL COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-STEPTOL COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-MAXSTEP COERCE-TO-MACRO INSTALL-FUNCTION 4 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-HESSADD COERCE-TO-MACRO INSTALL-FUNCTION 5 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-F COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-NEW-F COERCE-TO-MACRO INSTALL-FUNCTION 7 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEWINTERNALS #K(#(80 5 17 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 6 23 17 22 1 2 23 18 23 1 21 23 18 24 1 20 23 18 25 1 19 6 23 18 22 0 6 23 17 16 0 6 23 15 14 0 6 23 13 18 0 6 23 12 11 0 6 23 10 18 0 6 23 9 18 0 6 23 19 14 0 6 24 18 8 0 6 24 17 4 0 6 24 15 7 0 6 24 13 7 0 6 24 12 7 0 6 24 10 6 0 6 25 18 1 0 38 19 26 38 20 27 23 18 26 5 22 26 5 27 2 6 25 17 26 0 21 0 1 2 3 38 19 26 38 20 27 23 18 26 5 22 26 5 27 3 1 3 38 19 26 38 21 27 23 18 26 5 22 26 5 27 8 6 25 15 26 0 6 25 10 23 0 6 25 9 24 0 38 19 26 23 18 26 3 22 26 5 6 25 13 26 0 23 22 26 2 22 22 38 19 27 23 18 26 3 26 27 5 6 25 12 26 0 11 0 25) #(0 141 158 173) #(FLOAT 0.0 -1.0 1.0 6 5 NIL 4 3 T 2 -1 1 0 7 8 11 LENGTH MAKE-ARRAY :ELEMENT-TYPE :INITIAL-CONTENTS :INITIAL-ELEMENT LIST) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*INIT-GRAD-FRAC* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(0.001 *INIT-GRAD-FRAC* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*INIT-GRAD-FRAC*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*CONSEC-MAX-LIMIT* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(5 *CONSEC-MAX-LIMIT* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*CONSEC-MAX-LIMIT*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*ALPHA* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(1.0E-4 *ALPHA* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*ALPHA*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*MAX-STEP-FACTOR* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(1000 *MAX-STEP-FACTOR* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*MAX-STEP-FACTOR*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*GRADTOL-POWER* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(0.3333333333333333 *GRADTOL-POWER* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*GRADTOL-POWER*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*STEPTOL-POWER* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(0.6666666666666666 *STEPTOL-POWER* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*STEPTOL-POWER*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*ITNLIMIT* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(100 *ITNLIMIT* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*ITNLIMIT*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*VERBOSE* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(0 *VERBOSE* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*VERBOSE*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*USE-SEARCH* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #(T *USE-SEARCH* SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*USE-SEARCH*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 1 0 0 25 1 0 1 1) #(0) #(*TERMCODES* MARK-AS-SPECIAL) 0 NIL) #K(#(80 1 7 0 1 2 3 4 5 6 1 23 7 8 6 7 6 5 4 3 2 25 8 0 2 1 8) #(0) #(*TERMCODES* "maximum size step taken 5 iterations in a row" "iteration limit exceeded" "no satisfactory step found in backtracking" "step size is less than step tolerance" "gradient size is less than gradient tolerance" "not yet terminated" VECTOR SET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(*TERMCODES*) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 2 3 4 2 23 5 3 1 2 23 5 4 1 1 25 6 0 2 3 4 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 42) #(MAKE-ITERATION COERCE-TO-MACRO INSTALL-FUNCTION 12 MAKE-ARRAY LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-FFUN COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-X COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-NEW-X COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-SX COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-DELF COERCE-TO-MACRO INSTALL-FUNCTION 4 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-NEW-DELF COERCE-TO-MACRO INSTALL-FUNCTION 5 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-QNSTEP COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-L COERCE-TO-MACRO INSTALL-FUNCTION 7 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-HESSF COERCE-TO-MACRO INSTALL-FUNCTION 8 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-WORK COERCE-TO-MACRO INSTALL-FUNCTION 9 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-IP COERCE-TO-MACRO INSTALL-FUNCTION 10 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(ITERATION-DP COERCE-TO-MACRO INSTALL-FUNCTION 11 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-N COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-N LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-ITNLIMIT COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-MAXITER LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-BACKTRACK COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-BACKTRACK LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-VERBOSE COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-VERBOSE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-VALS-SUPPL COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-VALS-SUPPL LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-COUNT COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-COUNT LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-TERMCODE COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-TERMCODE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-MAXTAKEN COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-MAXTAKEN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-CONSECMAX COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-CONSECMAX LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-RETCODE COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-RETCODE LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-CHANGE-SIGN COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-IP IPARS-CHANGE-SIGN LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-TYPF COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-TYPF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-GRADTOL COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-GRADTOL LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-STEPTOL COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-STEPTOL LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-MAXSTEP COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-MAXSTEP LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-HESSADD COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-HESSADD LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-F COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-F LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 2 23 5 6 1 1 23 6 5 2 5 6 23 5 5 1 5 25 6 0 2 4 5 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 58) #(ITERATION-NEW-F COERCE-TO-MACRO INSTALL-FUNCTION ITERATION-DP DPARS-NEW-F LIST APPEND APPLY) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GRADSIZE #K(#(80 3 7 0 1 2 3 4 5 6 6 7 1 9 10 7 10 8 10 7 1 9 11 7 11 7 11 7 1 6 12 7 1 5 13 21 0 1 2 2 7 1 3 14 1 3 7 1 4 14 23 7 15 1 10 2 77 15 11 15 25 8 0 4 14 12 13 15) #(0 40 46 50) #(5 4 3 1 0 6 11 ABS UNCMIN-GRADSIZE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(INCRSIZE #K(#(80 2 7 0 1 2 3 4 5 6 5 7 1 8 9 7 9 7 9 7 1 6 10 7 1 5 11 7 1 4 12 7 1 3 13 23 7 0 7 9 11 7 5 13 7 5 23 8 0 8 9 2 10 7 5 13 7 5 25 9 0 3 13 11 12) #(0) #(-1.0 9 3 1 2 0 10 BLAS-DCOPY BLAS-DAXPY UNCMIN-MAXRELSIZE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(STOPTEST0 #K(#(80 2 8 0 1 2 3 4 5 6 7 4 7 1 9 10 6 10 8 7 0 7 1 9 10 23 8 11 2 1 6 38 9 12 7 1 5 13 7 13 4 13 2 42 12 13 12 37 76 1 2 11 12 0 2 11 1 3 0 7 11 6 10 3 11 0 7 1 9 10 7 10 3 0 57 0) #(0 53 58 61) #(1 6 2 11 NIL 0 9 10 GRADSIZE *INIT-GRAD-FRAC*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(STOPTEST #K(#(80 2 13 0 1 2 3 4 5 6 7 8 9 10 11 12 9 7 1 14 15 7 15 14 15 7 1 13 16 7 16 12 16 7 1 13 17 7 17 11 17 7 1 14 18 7 18 10 18 7 1 14 19 7 19 9 19 7 1 14 20 7 20 8 20 7 1 14 21 7 21 7 21 0 6 22 37 61 1 2 15 9 0 11 22 1 12 23 13 23 2 1 4 37 76 3 4 23 16 0 9 22 1 12 23 14 23 1 1 37 76 5 6 23 17 0 12 22 1 12 37 71 7 8 18 19 0 2 22 1 12 21 0 9 11 20 2 43 21 9 21 38 15 23 37 71 10 12 21 23 0 10 22 1 12 0 6 21 7 1 14 23 6 23 7 21 0 7 1 14 23 6 23 5 22 0 11 0 22) #(0 82 87 99 104 115 120 126 131 136 150 155 158) #(4 NIL T 6 0 9 8 1 5 3 2 11 10 GRADSIZE INCRSIZE *CONSEC-MAX-LIMIT*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-FUNVAL #K(#(80 2 5 0 1 2 3 4 3 7 1 6 7 7 1 5 8 7 1 4 9 23 5 8 4 8 9 3 3 6 7 2 8 0 57 0) #(0) #(6 NIL 1 0 11 EVAL-FUNCTION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-NEXT-FUNVAL #K(#(80 2 5 0 1 2 3 4 3 7 1 6 7 7 1 5 8 7 1 4 9 23 5 8 4 8 9 3 3 6 7 2 8 0 57 0) #(0) #(7 NIL 2 0 11 EVAL-FUNCTION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-GRADIENT #K(#(80 2 4 0 1 2 3 3 7 1 5 6 7 1 4 7 7 1 3 8 25 4 0 4 6 7 8 2) #(0) #(NIL 4 1 0 EVAL-FUNCTION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-NEXT-GRADIENT #K(#(80 2 4 0 1 2 3 3 7 1 5 6 7 1 4 7 7 1 3 8 25 4 0 4 6 7 8 2) #(0) #(NIL 5 2 0 EVAL-FUNCTION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(EVAL-HESSIAN #K(#(80 2 4 0 1 2 3 3 7 1 5 6 7 1 4 7 7 1 3 8 25 4 0 4 6 7 2 8) #(0) #(NIL 8 1 0 EVAL-FUNCTION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LINESEARCH #K(#(80 2 19 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 7 1 20 21 7 21 19 21 7 1 18 22 7 1 17 23 7 1 16 24 7 1 20 25 7 25 17 25 21 0 1 25 25 7 1 12 25 7 25 11 25 7 1 11 26 7 1 10 27 7 1 9 28 7 1 20 29 6 29 15 14 0 7 1 20 29 6 29 20 17 0 0 19 29 37 60 2 3 29 21 7 27 29 30 7 24 29 31 2 42 30 31 30 6 28 29 30 0 61 112 29 29 37 60 2 3 29 21 23 19 30 4 21 28 19 18 0 30 31 37 62 4 7 31 25 0 19 32 37 60 5 6 32 21 7 24 32 33 2 47 25 30 34 2 42 33 34 33 6 24 32 33 0 61 112 32 32 37 60 5 6 32 21 0 25 30 23 20 31 7 21 26 19 18 24 19 18 23 21 32 3 24 22 27 37 61 8 9 32 3 0 2 32 1 10 7 1 12 33 7 33 10 33 2 47 33 32 32 0 13 33 0 13 34 0 13 35 0 19 36 2 43 36 18 36 7 1 20 37 7 37 20 37 37 76 12 13 37 18 11 0 14 23 22 0 7 21 22 19 18 23 19 18 23 23 0 8 21 33 24 19 18 23 19 18 23 24 0 1 1 7 1 12 37 7 37 8 37 7 1 12 38 7 38 16 38 38 25 39 23 26 39 3 39 33 31 2 43 38 39 38 37 76 14 19 37 38 7 1 20 39 6 39 20 19 0 0 33 39 37 61 15 16 39 13 2 42 4 25 40 3 62 30 40 39 1 17 0 14 39 21 0 18 11 39 7 1 20 39 6 39 15 6 0 1 11 3 60 33 32 39 21 0 21 20 39 38 27 40 3 71 36 40 39 21 0 22 23 39 7 1 20 39 6 39 20 18 0 7 1 12 39 7 1 12 40 7 40 16 40 6 39 8 40 0 23 22 0 7 21 22 19 18 23 19 18 1 11 7 1 12 39 7 39 16 39 7 1 12 40 7 40 8 40 23 28 39 6 39 31 33 40 34 35 49 29 39 0 0 33 34 7 1 12 39 7 39 8 35 2 42 7 33 39 38 29 40 2 77 39 40 33 7 1 20 39 7 39 10 39 37 62 24 11 39 19 23 30 0 3 6 5 33 1 11 7 1 20 25 6 25 15 14 0 23 22 0 7 21 22 19 18 23 19 18 23 23 0 8 21 13 24 19 18 23 19 18 23 24 0 1 1 7 1 20 21 6 21 20 19 0 57 0) #(0 56 103 131 148 157 186 189 213 218 231 243 262 265 330 348 360 363 368 379 389 397 402 441 509 518) #(2.0 0.0 0.99 "Backtracking: lambda = ~,6g~%" T 0.1 7 9 3 4 11 1.0 NIL 8 6 2 1 0 10 BLAS-DNRM2 BLAS-DDOT UNCMIN-MAXRELSIZE BLAS-DCOPY BLAS-DAXPY EVAL-NEXT-FUNVAL *ALPHA* * *ITNLIMIT* UNCMIN-LINESEARCH LAMBDATEMP FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRINT-HEADER #K(#(80 2 7 0 1 2 3 4 5 6 1 7 1 8 9 7 9 7 9 37 60 1 2 6 9 7 1 8 9 7 9 4 9 25 7 0 3 3 2 9 11 0 5) #(0 25 40) #("Iteration ~d.~%" T 5 NIL 0 3 10 FORMAT) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(PRINT-STATUS #K(#(80 2 20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 14 7 1 21 22 7 22 20 22 7 1 19 23 7 23 18 23 7 1 17 24 7 1 16 25 7 1 15 0 7 1 21 26 7 26 14 26 7 1 21 27 7 27 13 27 7 1 21 28 7 28 18 28 37 60 1 33 20 26 21 0 2 3 27 61 45 23 29 1 4 0 23 29 23 20 0 3 11 10 29 37 60 5 30 17 26 23 20 0 2 11 8 0 20 29 37 60 6 10 29 22 0 29 30 2 45 22 17 31 37 60 7 8 30 31 0 3 30 1 9 0 2 30 7 24 29 31 23 20 0 3 11 30 31 61 112 29 29 37 60 6 10 29 22 37 60 11 30 7 26 23 20 0 2 11 6 0 20 30 37 60 12 19 30 22 7 25 30 31 0 30 32 2 45 22 17 33 37 60 13 14 32 33 0 3 32 1 15 0 2 32 21 0 16 17 27 61 45 31 33 1 18 0 31 33 23 20 0 3 11 32 33 61 112 30 30 37 60 12 19 30 22 37 60 20 30 14 26 23 20 0 2 11 5 0 20 31 37 60 21 30 31 22 0 20 32 37 60 22 29 32 22 38 21 33 2 42 31 22 34 2 43 34 32 34 7 33 34 33 0 32 34 2 45 22 17 35 37 60 23 24 34 35 0 3 34 1 25 0 4 34 21 0 26 27 27 61 45 33 35 1 28 0 33 35 23 20 0 3 11 34 35 61 112 32 32 37 60 22 29 32 22 61 112 31 31 37 60 21 30 31 22 37 35 31 32 28 20 38 22 29 7 29 28 22 25 20 0 3 11 9 22 11 0 12 11 0 12) #(0 82 87 93 96 109 124 138 143 146 167 173 188 206 211 214 219 225 228 245 251 266 275 306 311 314 319 325 328 345 355 361 375 378) #("~,6g>~%" "~,6g " "~,6g~%" "Hessian:~%" "Gradient = <" 2 "Location = <" "Reason for termination: ~a.~%" "Criterion value = ~,6g~%" T NIL 7 3 8 4 1 6 11 0 10 FORMAT HESS *TERMCODES*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(FINDQNSTEP #K(#(80 2 7 0 1 2 3 4 5 6 7 7 1 8 9 7 1 7 10 7 1 6 11 7 1 5 12 7 1 4 13 7 1 3 14 23 7 15 3 9 10 11 6 14 2 15 0 25 8 0 3 12 11 13) #(0) #(5 11 6 4 7 8 3 UNCMIN-MODELHESS UNCMIN-CHOLSOLVE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(ITERUPDATE #K(#(80 2 9 0 1 2 3 4 5 6 7 8 3 7 1 10 11 7 11 9 11 7 1 8 12 7 1 8 13 7 13 7 13 6 12 6 13 0 7 1 5 12 7 1 4 13 23 9 0 7 11 12 9 4 13 9 4 7 1 3 12 7 1 2 13 25 9 0 7 11 12 9 4 13 9 4) #(0) #(4 5 1 2 6 7 11 0 10 BLAS-DCOPY) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MINDRIVER #K(#(80 3 8 0 1 2 3 4 5 6 7 2 7 1 10 11 6 11 9 8 0 7 1 10 11 6 11 7 8 0 7 1 10 11 6 11 6 8 0 7 1 10 11 7 11 5 11 21 0 2 1 11 23 8 0 1 1 23 9 0 1 1 23 10 0 1 1 23 11 0 1 1 23 12 0 1 1 23 13 0 1 1 7 1 10 11 7 11 6 11 37 35 4 5 8 11 11 0 3 7 1 10 11 7 11 7 12 2 43 12 4 12 6 11 7 12 0 23 12 0 1 1 23 14 0 1 1 23 15 0 1 1 23 16 0 1 1 23 17 0 1 1 23 18 0 1 1 23 10 0 1 1 23 13 0 1 1 21 0 6 3 2 31 2 0 0 1 3) #(0 52 67 82 96 99 162) #(NIL 1 4 6 5 0 9 10 EVAL-FUNVAL EVAL-GRADIENT EVAL-HESSIAN STOPTEST0 PRINT-HEADER PRINT-STATUS FINDQNSTEP LINESEARCH EVAL-NEXT-GRADIENT STOPTEST ITERUPDATE) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MINRESULTSTRING #K(#(80 2 3 0 1 2 1 38 3 5 23 4 5 1 5 2 45 5 4 5 23 5 5 3 3 1 5 21 0 1 2 5 38 3 5 7 5 1 0 57 0 11 0 2) #(0 32 41) #("unknown return code" 0 1 *TERMCODES* LENGTH <=) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(MINSETUP #K(#(80 8 17 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 12 23 17 25 1 24 7 4 23 26 6 25 22 4 0 6 25 21 5 0 6 25 23 1 0 6 25 20 2 0 38 18 27 23 17 27 3 26 27 19 6 25 18 27 0 38 18 27 38 19 28 23 17 27 5 26 27 19 28 17 6 25 16 27 0 6 25 15 6 0 38 18 27 23 17 27 3 26 27 19 6 25 14 27 0 38 18 27 23 17 27 3 26 27 19 6 25 13 27 0 21 0 1 5 3 7 25 16 27 0 23 28 37 60 2 5 28 26 7 3 28 29 37 60 3 4 9 29 2 47 17 29 30 6 27 28 30 0 61 112 28 28 37 60 2 5 28 26 23 20 27 2 26 26 38 18 28 23 17 27 3 27 28 19 6 25 12 27 0 6 25 11 7 0 38 18 27 23 17 27 3 26 27 19 6 25 10 27 0 7 25 22 27 7 27 16 27 37 60 6 7 27 23 7 25 22 28 38 21 29 6 28 16 29 0 7 25 22 27 7 27 20 27 37 60 8 9 27 23 7 25 22 28 38 22 29 6 28 20 29 0 7 25 21 27 7 27 23 27 37 76 10 11 27 9 7 25 21 28 6 28 23 17 0 7 25 21 27 7 27 18 27 37 76 12 13 27 9 7 25 21 28 38 23 29 38 24 30 23 25 29 2 29 30 6 28 18 29 0 7 25 21 27 7 27 16 27 37 76 14 15 27 9 7 25 21 28 38 23 29 38 26 30 23 25 29 2 29 30 6 28 16 29 0 7 25 21 27 7 27 15 27 37 76 16 19 27 9 7 25 20 28 7 25 16 29 7 25 10 30 0 23 31 37 60 17 18 31 26 7 28 31 32 7 29 31 33 2 42 32 33 32 6 30 31 32 0 61 112 31 31 37 60 17 18 31 26 23 27 32 4 26 30 23 20 23 27 33 4 26 29 23 20 7 25 21 34 38 28 35 2 77 32 33 36 2 42 35 36 35 6 34 15 35 0 11 0 25) #(0 125 138 148 158 168 223 235 249 261 275 284 298 319 333 354 368 389 417 455) #(NIL 0.0 9 8 7 6 5 4 3 1.0 2 FLOAT 1 11 10 0 12 MAKE-ARRAY :ELEMENT-TYPE :INITIAL-ELEMENT LIST *VERBOSE* *ITNLIMIT* MACHINE-EPSILON *GRADTOL-POWER* ^ *STEPTOL-POWER* BLAS-DNRM2 *MAX-STEP-FACTOR*) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-F COERCE-TO-MACRO INSTALL-FUNCTION 0 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-X COERCE-TO-MACRO INSTALL-FUNCTION 1 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-SCALE COERCE-TO-MACRO INSTALL-FUNCTION 2 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-DELF COERCE-TO-MACRO INSTALL-FUNCTION 3 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-HESSF COERCE-TO-MACRO INSTALL-FUNCTION 4 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-IPARS COERCE-TO-MACRO INSTALL-FUNCTION 5 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 1 5 3 4 5 6 7 4 23 8 6 1 5 23 8 7 1 4 23 8 8 1 3 23 8 9 1 2 23 9 8 2 8 9 23 8 8 1 8 23 9 7 2 7 8 23 8 7 1 7 23 8 8 1 1 25 9 0 3 6 7 8 80 3 0 2 17 1 3 51 1 4 0 25 10 0 2 4 3) #(0 20 83) #(MODE-INFO-DPARS COERCE-TO-MACRO INSTALL-FUNCTION 6 INTERNALS QUOTE SLOT-VALUE AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-N COERCE-TO-MACRO INSTALL-FUNCTION 0 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-MAXITER COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-BACKTRACK COERCE-TO-MACRO INSTALL-FUNCTION 2 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(IPARS-VERBOSE COERCE-TO-MACRO INSTALL-FUNCTION 3 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-DERIVSTEP COERCE-TO-MACRO INSTALL-FUNCTION 1 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 1 0 1 51 2 2 0 23 1 2 1 2 25 2 0 2 1 2 80 2 2 3 4 3 23 5 4 1 3 23 5 5 1 1 23 5 6 1 2 25 6 0 3 4 5 6 80 3 0 2 17 1 3 51 1 4 0 25 7 0 2 4 3) #(0 20 48) #(DPARS-F COERCE-TO-MACRO INSTALL-FUNCTION 6 AREF LIST APPEND APPLY) 0 NIL)
#K(#(80 1 3 0 1 2 4 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 4 2 4 5 0 3 5 16 5 6 21 1 4 5 5 38 7 7 23 8 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 9 7 23 8 0 4 4 7 2 1 23 10 0 2 2 4 11 0 2) #(0 20 25 30 47 68) #((INTERNALS) MINFO-PROTO NIL MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 3 4 0 0 0 3 2 2 0 1 1 23 4 8 4 2 3 4 5 63 7 8 0 11 0 6) #(0) #(NIL INTERNALS (NIL -1.0) (:SCALE :DERIVSTEP) NEWINTERNALS) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAXIMIZE #K(#(77 1 2 2 11 11 0 1 2 3 4 5 6 7 8 9 10 10 62 14 15 7 15 13 16 7 15 12 17 7 15 11 18 7 15 10 19 7 15 9 20 7 15 8 21 7 15 7 22 7 19 13 23 7 20 12 24 23 12 23 5 16 23 6 24 18 23 13 20 7 23 17 18 19 20 21 22 21 0 1 2 2 23 14 21 1 2 1 3 0 5 21 21 0 4 5 21 6 19 8 2 0 7 19 8 21 37 62 6 7 21 13 23 15 0 2 6 4 23 16 0 2 20 3 6 19 7 6 0 7 19 9 15 25 17 0 1 15) #(0 82 89 92 97 102 112 118) #("maximizing...~%" NIL T 4 3 6 5 2 1 0 INTERNALS #(NIL NIL) MAKE-FUNCTION-DATA MINSETUP INTEGERP FORMAT MINDRIVER MINRESULTSTRING) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAXIMIZE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :X #K(#(80 2 3 0 1 2 1 62 4 5 7 5 3 5 25 3 0 2 5 2) #(0) #(LIST 1 INTERNALS COERCE) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:X) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SCALE #K(#(80 2 3 0 1 2 1 62 4 5 7 5 3 5 25 3 0 2 5 2) #(0) #(LIST 2 INTERNALS COERCE) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SCALE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DERIVSTEP #K(#(80 2 3 0 1 2 1 62 4 5 7 5 3 5 7 5 2 0 57 0) #(0) #(1 6 INTERNALS) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DERIVSTEP) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :F #K(#(77 1 2 1 3 3 0 1 2 3 64 2 6 21 2 1 2 2 0 2 7 1 3 0 3 7 21 0 4 5 6 38 4 8 23 5 0 2 1 8 62 5 8 6 8 4 7 0 62 5 6 7 6 4 0 57 0) #(0 18 23 26 31 48) #(NIL 0 INTERNALS #(%NOT-SUPPLIED) :SET-NO-VALS-SUPPLIED SEND) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:F) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :FVALS #K(#(80 2 7 0 1 2 3 4 5 6 6 62 8 9 7 9 7 9 7 9 6 9 62 8 10 7 10 5 10 7 10 5 10 62 8 11 7 11 4 11 23 7 11 2 11 3 23 1 12 2 9 9 23 8 12 1 12 23 9 13 1 12 62 8 14 7 14 2 14 23 9 14 1 14 23 10 0 2 13 14 25 1 0 3 10 11 12) #(0) #(4 LIST 3 6 0 5 INTERNALS COERCE MAKE-ARRAY COMPOUND-DATA-SEQ REPLACE) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:FVALS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :COPY #K(#(80 2 3 0 1 2 7 38 3 5 23 4 5 1 5 62 4 6 23 5 6 1 6 23 6 7 1 6 0 3 8 37 60 1 4 8 7 7 6 8 9 23 7 10 1 9 21 0 2 3 10 23 5 11 1 9 6 6 8 11 0 61 112 8 8 37 60 1 4 8 7 38 8 9 23 9 0 4 5 9 4 6 11 0 5) #(0 37 51 61 71) #(NIL 0 INTERNALS MINFO-PROTO MAKE-OBJECT COPY-SEQ LENGTH SEQUENCEP :ADD-SLOT SEND) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:COPY) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DERIVSCALE #K(#(80 2 6 0 1 2 3 4 5 6 38 6 8 23 7 8 2 1 8 38 8 9 23 9 9 2 9 7 38 10 10 23 7 10 2 1 10 38 11 11 23 7 11 2 1 11 23 12 10 4 10 8 11 9 23 13 11 1 8 23 14 12 1 10 61 47 12 12 23 13 12 1 12 23 15 12 1 12 23 16 11 2 11 12 38 10 12 23 7 12 2 1 12 23 12 10 4 12 8 11 9 23 13 12 1 8 23 14 13 1 10 61 47 13 13 23 13 13 1 13 23 15 13 1 13 23 16 11 2 12 13 62 6 12 23 17 13 2 11 5 6 12 4 13 0 62 6 10 7 10 3 10 6 10 2 9 0 57 0) #(0) #(1 6 2 (VECTOR FLOAT) INTERNALS 0.16666666666666666 :X SEND MACHINE-EPSILON ^ :F :SCALE NUMHESS ABS DIAGONAL SQRT PMAX COERCE) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DERIVSCALE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :VERBOSE #K(#(77 1 2 1 6 6 0 1 2 3 4 5 4 64 2 9 21 2 1 2 2 0 2 10 1 3 0 5 10 21 0 4 10 9 62 8 11 7 11 7 11 23 7 12 1 10 21 0 5 6 12 0 10 12 1 9 21 0 7 8 10 0 3 12 1 9 0 4 12 6 11 6 12 0 62 8 9 7 9 7 9 7 9 6 0 57 0) #(0 21 26 29 34 51 56 61 66 69 74) #(1 0 NIL 3 5 INTERNALS #(%NOT-SUPPLIED) INTEGERP) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:VERBOSE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :BACKTRACK #K(#(77 1 2 1 6 6 0 1 2 3 4 5 4 64 2 9 21 2 1 2 2 0 2 10 1 3 0 5 10 21 0 4 8 9 62 8 11 7 11 7 11 21 0 5 6 10 0 3 12 1 7 0 4 12 6 11 6 12 0 62 8 9 7 9 7 9 7 9 6 0 57 0) #(0 21 26 29 34 46 51 54 59) #(1 0 NIL 2 5 INTERNALS #(%NOT-SUPPLIED)) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:BACKTRACK) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAXITER #K(#(77 1 2 1 5 5 0 1 2 3 4 4 64 2 8 21 2 1 2 2 0 2 9 1 3 0 4 9 21 0 4 8 8 62 7 10 7 10 6 10 23 6 11 1 9 21 0 5 6 11 0 9 11 1 7 0 3 11 6 10 5 11 0 62 7 8 7 8 6 8 7 8 5 0 57 0) #(0 20 25 28 33 50 55 58 63) #(-1 NIL 1 5 INTERNALS #(%NOT-SUPPLIED) INTEGERP) 0 NIL) MINFO-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAXITER) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args:(f start &key scale derivstep (verbose 1) return-derivs)
Maximizes F starting from START using Newton's method with backtracking.
If RETURN-DERIVS is NIL returns location of maximum; otherwise returns
list of location, unction value, gradient and hessian at maximum.
SCALE should be a list of the typical magnitudes of the parameters.
DERIVSTEP is used in numerical derivatives and VERBOSE controls printing
of iteration information. COUNT-LIMIT limits the number of iterations" FUNCTION-DOCUMENTATION NEWTONMAX %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NEWTONMAX #K(#(77 3 3 0 0 0 4 3 3 0 1 2 5 21 0 1 4 6 23 5 12 1 6 21 0 2 3 12 0 6 12 1 5 0 9 12 1 5 0 10 12 38 6 13 38 7 14 38 8 15 38 9 16 23 10 13 8 13 14 1 2 15 3 16 4 38 11 14 23 10 0 3 13 14 5 38 12 14 23 10 0 2 13 14 38 13 14 21 0 6 7 8 51 11 15 2 13 8 1 8 0 11 15 23 10 0 4 13 14 12 15 21 0 9 10 7 38 14 14 23 10 14 2 13 14 38 15 15 23 10 15 2 13 15 61 45 15 15 20 14 15 0 57 0 38 14 14 25 10 0 2 13 14 80 3 0 0 33 2 0 1 1) #(0 18 28 33 38 41 92 100 103 116 144 153) #(1 0 NIL (NIL -1.0 -1 1 NIL NIL) (:SCALE :DERIVSTEP :COUNT-LIMIT :VERBOSE :RETURN-DERIVS :TRACE) INTEGERP MINFO-PROTO :NEW :SCALE :DERIVSTEP SEND :MAXITER :DERIVSCALE :MAXIMIZE :X :FVALS) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (f start &key (size 1) (epsilon (sqrt machine-epsilon)) 
          (count-limit 500) (verbose t) alpha beta gamma delta)
Maximizes F using the Nelder-Mead simplex method. START can be a
starting simplex - a list of N+1 points, with N=dimension of problem,
or a single point. If start is a single point you should give the
size of the initial simplex as SIZE, a sequence of length N. Default is
all 1's. EPSILON is the convergence tolerance. ALPHA-DELTA can be used to
control the behavior of simplex algorithm." FUNCTION-DOCUMENTATION NELMEADMAX %SET-GET) 0 NIL) #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(NELMEADMAX #K(#(77 3 3 0 0 0 7 6 6 0 1 2 3 4 5 9 21 2 1 2 4 0 4 17 1 3 38 8 17 23 9 17 1 17 38 10 18 38 11 19 23 12 18 5 18 19 1 2 3 38 13 19 23 12 19 2 18 19 0 16 20 0 19 21 0 15 22 38 14 23 23 12 23 2 18 23 3 60 23 17 23 21 0 5 4 23 3 71 22 5 23 21 0 16 6 23 38 15 23 61 45 7 24 23 12 20 3 18 23 24 38 16 23 23 12 23 4 18 23 21 20 21 0 7 8 23 38 15 24 23 12 20 3 18 24 9 1 11 38 16 24 38 17 25 23 12 25 2 18 25 23 12 24 4 18 24 20 25 21 0 9 11 24 38 15 24 23 12 20 3 18 24 8 38 16 24 38 18 25 23 12 25 2 18 25 23 12 24 4 18 24 20 25 21 0 10 11 24 38 19 24 23 12 0 3 18 24 10 21 0 12 13 6 38 20 23 38 13 24 23 12 24 2 18 24 23 12 23 3 18 23 24 23 21 0 3 14 11 23 38 13 23 23 12 23 2 18 23 2 43 22 12 24 0 23 21 0 24 22 38 14 23 23 12 23 2 18 23 3 60 23 17 23 21 0 15 14 23 3 71 22 5 23 21 0 16 6 23 21 0 17 18 6 3 71 22 5 23 1 19 0 16 23 21 0 20 21 23 23 21 0 2 14 13 38 22 23 38 13 24 23 12 24 2 18 24 25 12 0 3 18 23 24) #(0 21 26 34 86 91 96 126 138 163 198 208 213 239 278 283 288 293 300 303 308 314) #("Value = ~g~%" 1 "Iteration limit exceeded.~%" T 0 NIL (1 %NOT-SUPPLIED 500 T 1.0 0.5 2.0 0.5) (:SIZE :EPSILON :COUNT-LIMIT :VERBOSE :ALPHA :BETA :GAMMA :DELTA) MACHINE-EPSILON SQRT SIMPLEX-PROTO :NEW SEND :BEST-POINT :RELATIVE-RANGE :EXTRAPOLATE-FROM-WORST :IS-WORSE :SECOND-WORST-POINT :WORST-POINT :SHRINK-TO-BEST :POINT-VALUE FORMAT :POINT-LOCATION) 0 NIL) BYTE-CODE-CLOSE INSTALL-FUNCTION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 3 0 1 2 4 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 4 2 4 5 0 3 5 16 5 6 21 1 4 5 5 38 7 7 23 8 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 9 7 23 8 0 4 4 7 2 1 23 10 0 2 2 4 11 0 2) #(0 20 25 30 47 68) #((F SIMPLEX) SIMPLEX-PROTO NIL MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MAKE-POINT #K(#(80 3 1 0 1 38 1 4 23 2 4 2 1 4 21 0 1 4 4 31 4 4 1 2 21 1 2 3 4 16 4 4 20 4 2 0 57 0 20 3 2 0 57 0) #(0 19 29 32 38) #(NIL :F SEND) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MAKE-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :POINT-VALUE #K(#(80 3 0 0 16 2 0 57 0) #(0) #() 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:POINT-VALUE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :POINT-LOCATION #K(#(80 3 0 0 17 2 0 57 0) #(0) #() 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:POINT-LOCATION) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :IS-WORSE #K(#(80 4 0 2 38 0 4 23 1 4 3 1 4 2 38 0 5 23 1 5 3 1 5 3 3 60 4 5 0 57 0) #(0) #(:POINT-VALUE SEND) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:IS-WORSE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ISNEW #K(#(77 1 4 1 0 0 1 38 1 5 23 2 0 4 1 5 3 4 38 3 5 25 2 0 3 1 5 2) #(0) #(#(NIL) :SIMPLEX SEND :F) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ISNEW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SIMPLEX #K(#(77 1 2 2 7 7 0 1 2 3 4 5 6 7 21 0 1 13 2 21 1 2 3 2 16 2 11 23 8 11 1 11 1 4 0 9 11 21 0 5 8 11 23 9 12 1 2 16 2 13 23 9 13 1 13 2 43 5 13 13 37 35 6 7 12 13 23 10 11 1 4 1 12 23 11 11 1 2 1 12 23 9 12 1 2 21 0 9 10 3 0 3 13 1 11 23 12 13 2 5 12 23 12 14 2 8 12 23 13 14 1 14 2 45 14 7 14 23 14 14 3 8 13 14 23 12 15 2 6 12 23 15 16 1 14 23 16 16 1 16 51 15 17 0 23 17 16 2 17 16 20 15 16 14 51 14 15 2 2 13 23 17 11 2 15 14 51 16 12 1 1 23 17 11 2 12 11 63 10 11 0 38 18 11 23 19 0 2 1 11 62 10 0 57 0 80 4 0 1 2 42 2 3 4 2 43 4 1 0 57 0 80 2 1 20 0 25 21 0 2 1 2 80 3 0 1 38 22 3 25 19 0 3 1 3 2) #(0 19 24 34 37 42 66 73 80 90 95 101 166 190 195 211 222) #("bad simplex data" 1 0 0.5 2 NIL SIMPLEX #(NIL NIL) SEQUENCEP LENGTH ERROR COPY-LIST REPEAT RANDOM * DIAGONAL COLUMN-LIST MAPCAR :SORT-SIMPLEX SEND LIST COERCE :MAKE-POINT) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SIMPLEX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :F #K(#(77 1 2 1 2 2 0 1 2 21 0 1 2 2 63 4 2 0 38 3 5 23 4 5 2 1 5 51 3 6 1 1 23 5 5 2 6 5 38 3 6 23 4 0 3 1 6 5 62 4 0 57 0 80 3 0 1 38 6 3 25 4 0 3 1 3 2) #(0 14 48 53) #(NIL F #(NIL) :SIMPLEX SEND MAPCAR :POINT-LOCATION) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:F) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SORT-SIMPLEX #K(#(80 2 2 0 1 2 38 2 4 23 3 4 2 1 4 21 0 1 2 4 62 2 4 51 3 5 1 1 23 4 4 2 4 5 63 2 4 0 57 0 11 0 3 80 4 0 1 38 5 4 25 3 0 4 1 4 2 3) #(0 20 40 43) #(SIMPLEX NIL :F SEND SORT :IS-WORSE) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SORT-SIMPLEX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :BEST-POINT #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 23 2 2 1 2 16 2 0 57 0) #(0) #(:SIMPLEX SEND LAST) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:BEST-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :WORST-POINT #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 16 2 0 57 0) #(0) #(:SIMPLEX SEND) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:WORST-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SECOND-WORST-POINT #K(#(80 2 0 1 38 0 2 23 1 2 2 1 2 71 2 2 2 0 57 0) #(0) #(:SIMPLEX SEND) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SECOND-WORST-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :REPLACE-POINT #K(#(80 4 1 0 2 38 1 5 23 2 5 2 1 5 23 3 6 2 3 5 21 0 1 2 6 47 6 5 2 0 38 4 5 25 2 0 2 1 5 11 0 4) #(0 25 39) #(NIL :SIMPLEX SEND POSITION :SORT-SIMPLEX) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REPLACE-POINT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :MEAN-OPPOSITE-FACE #K(#(80 3 0 3 38 0 3 23 1 3 2 1 3 23 2 3 2 2 3 51 1 4 1 1 23 3 3 2 4 3 39 4 4 23 5 4 2 4 3 23 6 5 1 3 2 47 4 5 0 57 0 80 3 0 1 38 7 3 25 1 0 3 1 3 2) #(0 51) #(:SIMPLEX SEND REMOVE MAPCAR + APPLY LENGTH :POINT-LOCATION) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:MEAN-OPPOSITE-FACE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :EXTRAPOLATE-FROM-WORST #K(#(80 3 2 0 1 5 38 2 5 23 3 5 2 1 5 38 4 6 23 3 6 3 1 6 5 38 5 7 23 3 7 3 1 7 5 2 45 7 6 7 38 6 8 2 45 4 2 9 2 42 9 7 9 2 43 6 9 9 23 3 6 3 1 8 9 38 7 7 23 3 7 4 1 7 5 6 21 0 1 2 7 38 8 8 23 3 0 4 1 8 6 5 11 0 6) #(0 81 92) #(NIL 1 :WORST-POINT SEND :POINT-LOCATION :MEAN-OPPOSITE-FACE :MAKE-POINT :IS-WORSE :REPLACE-POINT) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:EXTRAPOLATE-FROM-WORST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :SHRINK-TO-BEST #K(#(80 3 1 0 8 38 1 4 23 2 4 2 1 4 38 3 5 23 2 5 3 1 5 4 38 4 6 23 2 6 2 1 6 23 5 6 1 6 16 6 7 21 1 1 4 6 0 7 8 50 0 3 2 8 4 38 6 9 38 7 10 38 3 11 23 2 11 3 1 11 7 2 45 11 5 11 2 42 2 11 11 2 43 5 11 11 23 2 10 3 1 10 11 23 2 0 4 1 9 10 7 17 6 6 16 6 7 21 1 1 4 6 11 0 3) #(0 46 55 101 112) #(NIL :BEST-POINT SEND :POINT-LOCATION :SIMPLEX COPY-LIST :REPLACE-POINT :MAKE-POINT) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SHRINK-TO-BEST) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :RELATIVE-RANGE #K(#(80 2 2 0 1 5 38 2 4 38 3 5 23 4 5 2 1 5 23 4 4 3 1 4 5 38 2 5 38 5 6 23 4 6 2 1 6 23 4 5 3 1 5 6 2 45 4 5 6 23 6 6 1 6 23 6 7 1 4 23 6 8 1 5 23 7 7 3 3 7 8 2 47 6 7 4 2 42 2 4 0 57 0) #(0) #(2 1 :POINT-VALUE :BEST-POINT SEND :WORST-POINT ABS +) 0 NIL) SIMPLEX-PROTO BYTE-CODE-CLOSE ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RELATIVE-RANGE) 0 NIL)) EVAL) 0 NIL)
