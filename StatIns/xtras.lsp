(norm-item (send menu-item-proto :new "Normal"
                          :action #'(lambda () 
                                      (let* ((distn (send normal-distn-proto :new 0 1 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "Normal")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw)))))

         (chi-item (send menu-item-proto :new "Chi-Square"
                          :action #'(lambda () 
                                      (let* ((distn (send chisq-distn-proto :new 10 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "Chi-Square")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw)))))

         (t-item (send menu-item-proto :new "t-Distn"
                          :action #'(lambda () 
                                      (let* ((distn (send t-distn-proto :new 10 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "t-Distn")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw)))))

         (f-item (send menu-item-proto :new "F-Distn"
                          :action #'(lambda () 
                                      (let* ((distn (send f-distn-proto :new 10 10 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "F-Distn")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw)))))

         (pois-item (send menu-item-proto :new "Poisson"
                          :action #'(lambda () 
                                      (let* ((distn (send poisson-distn-proto :new 10 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "Poisson")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw)))))
                                        
         (bin-item (send menu-item-proto :new "Binomial"
                          :action #'(lambda () 
                                      (let* ((distn (send binomial-distn-proto :new 20 .5 wind))
                                             (pdf-btn (select (send wind :cntls) 0))
                                             (pdf (send pdf-btn :hilite)))
                                        (send self :title "Binomial")
                                        (send wind :distn distn)
                                        (send wind :clear-lines)
                                        (if (= pdf 1) (send wind :add-pdf 't) (send wind :add-cdf 't))
                                        (send wind :redraw))))))


(m-btn (send mu-btn-proto :new (+ 75 pdf-w 10 10) (+ 75 pdf-w 10 85) 5 17 "mu" nil wind 0))
         (s-btn (send sigma-btn-proto :new (+ 75 pdf-w 10 10) (+ 75 pdf-w 10 85) 19 31 "sigma" nil wind 1))
         (mup-arr (send mu-up-btn-proto :new (+ 75 pdf-w 10 95) (+ 75 pdf-w 10 109) 5 17 "up" nil wind))
         (mdown-arr (send mu-down-btn-proto :new (+ 75 pdf-w 10 110) (+ 75 pdf-w 10 123) 5 17 "down" nil wind))
         (sup-arr (send sigma-up-btn-proto :new (+ 75 pdf-w 10 95) (+ 75 pdf-w 10 109) 19 31 "up" nil wind))
         (sdown-arr (send sigma-down-btn-proto :new (+ 75 pdf-w 10 110) (+ 75 pdf-w 10 123) 19 31 "down" nil wind)))
    
    (send pdf-btn :hilite 1)
    (send cdf-btn :hilite 0)
    (send menu-btn :hilite 0)
    (send m-btn :hilite 0)
    (send s-btn :hilite 0)
    (send mup-arr :hilite 0)
    (send mup-arr :text-btn m-btn)
    (send mdown-arr :hilite 0)
    (send mdown-arr :text-btn m-btn)
    (send sup-arr :hilite 0)
    (send sup-arr :text-btn s-btn)
    (send sdown-arr :hilite 0)
    (send sdown-arr :text-btn s-btn)
    (send pdf-btn :item 0)
    (send cdf-btn :item 1)
    (send wind :add-overlay pdf-btn)
    (send wind :add-overlay cdf-btn)
    (send wind :add-overlay menu-btn)
    (send wind :add-overlay m-btn)
    (send wind :add-overlay s-btn)
    (send wind :add-overlay mup-arr)
    (send wind :add-overlay mdown-arr)
    (send wind :add-overlay sup-arr)
    (send wind :add-overlay sdown-arr)
    (send wind :cntls (list pdf-btn cdf-btn))
    (send wind :distn distn)
    (send mgr :btns (list pdf-btn cdf-btn menu-btn))
    (send mgr :item 0)
    (send wind :margin 20 50 20 20)
    (send wind :x-axis t nil 5)
    (send wind :y-axis t nil 5)
    (send wind :add-pdf 't)
    (send wind :show-window)
    (send wind :redraw)
    (send distn :wind)))
    