(provide ":StatIns:contdist.lsp")
(require ":StatIns:symbols.lsp")
(require ":StatIns:distns.lsp")


;;
;; Continuous distribution proto
;;

(defproto cont-distn-proto '() '() distn-proto)

(defmeth cont-distn-proto :isnew (pdf sampling-pdf cdf quant wind)
  (call-next-method pdf sampling-pdf cdf quant wind))

(defmeth cont-distn-proto :leq-prob (x)
  (funcall (send self :cdf) x))

(defmeth cont-distn-proto :l-prob (x)
  (funcall (send self :cdf) x))

(defmeth cont-distn-proto :geq-prob (x)
  (- 1 (funcall (send self :cdf) x)))

(defmeth cont-distn-proto :g-prob (x)
  (- 1 (funcall (send self :cdf) x)))

(defmeth cont-distn-proto :eq-prob (x)
  0)

(defmeth cont-distn-proto :add-cdf (adjust)
  (let* ((dumb (send self :check-params))
         (pdf (send self :pdf))
         (quant (send self :quant))
         (lb (funcall quant .000001))
         (ub (funcall quant .999999))
         (med (funcall quant .5))
         (nrx (get-nice-range lb ub 5))
         (cdf (send self :cdf))
         (w (send self :wind))
         (y-range (send w :range 1))
         (ylb (select y-range 0))
         (yub (select y-range 1))
         (x-range (send w :range 0))
         (xlb (select x-range 0))
         (xub (select x-range 1)))
    (send w :add-function cdf lb ub :color 'BLUE :draw nil)
    (cond (adjust 
           (send w :range 0 (select nrx 0) (select nrx 1) :draw nil)
           (send w :range 1 0 1 :draw nil)
           (send w :y-axis t t 5 :draw nil)
           (send w :x-axis t t (select nrx 2))))))
         

(defmeth cont-distn-proto :add-pdf (adjust)
  (let* ((dumb (send self :check-params))
         (quant (send self :quant))
         (pdf (send self :pdf))
         (med (funcall quant .5))
         (up (funcall pdf med))
         (lb (funcall quant .000001))
         (ub (funcall quant .999999))
         (nrx (get-nice-range lb ub 5))
         (nry (get-nice-range 0 up 5)) 
         (pdf (send self :pdf))
         (w (send self :wind))
         (y-range (send w :range 1))
         (ylb (select y-range 0))
         (yub (select y-range 1))
         (x-range (send w :range 0))
         (xlb (select x-range 0))
         (xub (select x-range 1)))
    (send w :add-function pdf lb ub :color 'BLUE :draw nil)
    (cond (adjust 
           (send w :range 0 (select nrx 0) (select nrx 1) :draw nil)
           (send w :x-axis t t (select nrx 2) :draw nil)
           (send w :range 1 (select nry 0) (select nry 1) :draw nil)
           (send w :y-axis t t (select nry 2))))))

(defmeth cont-distn-proto :add-sampling-pdf (adjust)
  (let* ((dumb (send self :check-params))
         (mean (send self :mean))
         (std-dev (send self :std-dev))
         (samp-std-dev (/ std-dev (sqrt (select (send self :param-values) 3))))
         (quant (send self :quant))
         (pdf (send self :pdf))
         (sampling-pdf (send self :sampling-pdf))
         (up (funcall sampling-pdf mean))
         (lb (funcall quant .05))
         (ub (funcall quant .95))
         (nrx (get-nice-range lb ub 5))
         (nry (get-nice-range 0 up 5)) 
         (w (send self :wind))
         (w-pdf (send w :pdf))
         (samp (send w :samp))
         (y-range (send w :range 1))
         (ylb (select y-range 0))
         (yub (select y-range 1))
         (x-range (send w :range 0))
         (xlb (select x-range 0))
         (xub (select x-range 1))
         (l1 (list (list (- mean std-dev) (- mean std-dev)) (list 0 (funcall pdf (- mean std-dev)))))
         (l2 (list (list (+ mean std-dev) (+ mean std-dev)) (list 0 (funcall pdf (+ mean std-dev)))))
         (l3 (list (list (- mean samp-std-dev) (- mean samp-std-dev)) (list 0 (funcall sampling-pdf (- mean samp-std-dev)))))
         (l4 (list (list (+ mean samp-std-dev) (+ mean samp-std-dev)) (list 0 (funcall sampling-pdf (+ mean samp-std-dev)))))
         (l5 (list (list mean mean) (list 0 (funcall sampling-pdf mean)))))
    (cond ((= w-pdf 1)
           (send w :add-lines l1 :color 'BLUE :draw nil)
           (send w :add-lines l2 :color 'BLUE :draw nil)))
    (send self :add-sample-hist)
    (cond ((= samp 1)
           (send w :add-lines l3 :color 'CYAN :draw nil)
           (send w :add-lines l4 :color 'CYAN :draw nil)
           (send w :add-lines l5 :color 'RED :draw nil)
           (send w :add-function sampling-pdf (- mean (* 4 samp-std-dev)) (+ mean (* 4 samp-std-dev)) :color 'CYAN :draw nil)))
    (cond (adjust 
           (send w :range 0 (select nrx 0) (select nrx 1) :draw nil)
           (send w :x-axis t t (select nrx 2) :draw nil)
           (send w :range 1 (select nry 0) (select nry 1) :draw nil)
           (send w :y-axis t t (select nry 2))))))

(defmeth cont-distn-proto :add-sample-hist ()
  (let* ((dumb (send self :check-params))
         (mean (send self :mean))
         (std-dev (send self :std-dev))
         (s-std-dev (/ std-dev (sqrt (select (send self :param-values) 3))))
         (quant (send self :quant))
         (pdf (send self :pdf))
         (sampling-pdf (send self :sampling-pdf))
         (max-h (funcall sampling-pdf mean))
         (counts (repeat 0 5))
         (w (send self :wind))
         (hist (send w :hist))
         (kern (send w :kern))
         (sample (if (or (= hist 1) (= kern 1)) (send self :sample)))
         (xs (if (or (= hist 1) (= kern 1)) (rseq (min sample) (max sample) 6)))
         (xs2 (if (or (= hist 1) (= kern 1)) (rseq (min sample) (max sample) 7))))
    (cond ((or (= hist 1) (= kern 1))
           (dolist (y sample counts)
                   (cond 
                     ((and (>= y (select xs 0)) (< y (select xs 1)))
                      (setf (select counts 0) (+ (select counts 0) 1)))
                     ((and (>= y (select xs 1)) (< y (select xs 2)))
                      (setf (select counts 1) (+ (select counts 1) 1)))
                     ((and (>= y (select xs 2)) (< y (select xs 3)))
                      (setf (select counts 2) (+ (select counts 2) 1)))
                     ((and (>= y (select xs 3)) (< y (select xs 4)))
                      (setf (select counts 3) (+ (select counts 3) 1)))
                     ((and (>= y (select xs 4)) (< y (select xs 5)))
                      (setf (select counts 4) (+ (select counts 4) 1)))))))
    (cond 
      ((= kern 1)
       (send w :add-lines 
             (kernel-smooth xs2 (combine 0 (* (/ max-h (max counts)) counts) 0) :type 'g) 
             :color 'YELLOW :draw nil)))
    (cond
      ((= hist 1)
       (setf ys (combine 0 (repeat (* (/ max-h (max counts)) counts) (repeat 2 5)) 0))
       (setf xs (repeat xs (repeat 2 6)))
       (send w :add-lines (list xs ys) :color 'MAGENTA :draw nil)))))
    
(defmeth cont-distn-proto :shade-prob ()
  (let* ((w (send self :wind))
         (ineq (send self :ineq))
         (pdf (send self :pdf))
         (quant (send self :quant))
         (x1 (send self :x1))
         (x2 (send self :x2))
         (x0 (funcall quant .001))
         (x3 (funcall quant .999))
         (s-pdf (send w :s-pdf)))
    (cond ((= s-pdf 0)
           (cond 
             ((= ineq 0)
              (send self :shade x1 x1))
             ((and (>= ineq 1) (<= ineq 2))
              (send self :shade x0 x1))
             ((and (>= ineq 3) (<= ineq 4))
              (send self :shade x1 x3))
             ((and (>= ineq 5) (<= ineq 8))
              (send self :shade x1 x2))
             ((and (>= ineq 9) (<= ineq 12))
              (send self :shade x0 x1)
              (send self :shade x2 x3)))))))

(defmeth cont-distn-proto :shade (lwr upr)
  (let* ((w (send self :wind))
         (origin (send w :content-origin))
         (range (send w :canvas-range 0))
         (x-min (select origin 0))
         (x-max (+ x-min (select range 1)))
         (xlp (send w :real-to-canvas lwr 0))
         (xup (send w :real-to-canvas upr 0))
         (xl (select xlp 0))
         (xu (select xup 0))
         (yl (select xlp 1))
         (yu (select xup 1))
         (pdf (send self :pdf))
         (numlines (+ (- xu xl) 1))
         (oldx xl)
         (i 0)
         (old-color (send w :draw-color)))
    (send w :draw-color 'RED)
    (send w :line-width 1)
    (dotimes (i numlines)
             (let* ((realp (send w :canvas-to-real (+ xl (* i 1)) 0))
                    (xreal1 (select realp 0))
                    (canvasp1 (send w :real-to-canvas xreal1 0))
                    (canvasp2 (send w :real-to-canvas xreal1 (funcall pdf xreal1)))
                    (x1 (select canvasp1 0))
                    (x1 (if (not (= x1 (+ xl (* i 1)))) (+ xl (* i 1)) x1))
                    (y1 (select canvasp1 1))
                    (x2 x1)
                    (y2 (+ (select canvasp2 1) 1)))
               (if (> x1 x-min)
                   (send w :draw-line x1 y1 x2 y2))))
    (send w :line-width 1)
    (send w :draw-color old-color)))

#|(defmeth cont-distn-proto :shade (lwr upr)
  (let* ((w (send self :wind))
         (xlp (send w :real-to-canvas lwr 0))
         (xup (send w :real-to-canvas upr 0))
         (xl (select xlp 0))
         (xu (select xup 0))
         (yl (select xlp 1))
         (yu (select xup 1))
         (pdf (send self :pdf))
         (numlines (+ (- xu xl) 1))
         (oldx xl)
         (i 0))
    (dotimes (i numlines)
             (let* ((pt1 (send w :canvas-to-real (+ xl (* i 1)) 0))
                    (x (select pt1 0)))
               (send w :add-lines (list (list x x) (list 0 (funcall pdf x))) :color 'RED :draw nil)))))
|#     
(defmeth cont-distn-proto :check-params ()
  (call-next-method))

;;
;; Normal distribution
;;

(defproto normal-distn-proto '(num-cis) '() cont-distn-proto)

(defproto true-normal-distn-proto '() '() normal-distn-proto)

(defmeth true-normal-distn-proto :shade (lwr upr)
  (let* ((w (send self :wind))
         (tail (send w :tail))
         (hyp (send w :hyp-distn))
         (hyp-pdf (send hyp :pdf))
         (origin (send w :content-origin))
         (range (send w :canvas-range 0))
         (x-min (select origin 0))
         (x-max (+ x-min (select range 1)))
         (xlp (send w :real-to-canvas lwr 0))
         (xup (send w :real-to-canvas upr 0))
         (xl (+ (select xlp 0) 1))
         (xu (- (select xup 0) 1))
         (yl (select xlp 1))
         (yu (select xup 1))
         (pdf (send self :pdf))
         (numlines (+ (- xu xl) 1))
         (oldx xl)
         (i 0)
         (old-color (send w :draw-color)))
    (send w :draw-color 'RED)
    (send w :line-width 1)
    (dotimes (i numlines)
             (let* ((realp (send w :canvas-to-real (+ xl (* i 1)) 0))
                    (xreal1 (select realp 0))
                    (canvasp1 (send w :real-to-canvas xreal1 0))
                    (canvasp2 (send w :real-to-canvas xreal1 (funcall pdf xreal1)))
                    (canvasp3 (send w :real-to-canvas xreal1 (funcall hyp-pdf xreal1)))
                    (x1 (select canvasp1 0))
                    (x1 (if (not (= x1 (+ xl (* i 1)))) (+ xl (* i 1)) x1))
                    (y1 (select canvasp1 1))
                    (x2 x1)
                    (y2 (+ (select canvasp2 1) 1))
                    (y3 (+ (select canvasp3 1) 1))
                    (y21 (if (< y1 y2) y1 y2))
                    (y31 (if (< y1 (+ y3 3)) y1 (+ y3 3))))
               (if (and (> x1 x-min) (< x1 x-max) (>= y21 y3) (not (= y1 y21)))
                   (send w :draw-line x1 y1 x2 y21))
               (if (and (> x1 x-min) (< x1 x-max) (< y21 y31))
                      (send w :draw-line x1 y1 x2 y31))
               (if (and (> x1 x-min) (< x1 x-max) (< y21 y3) (not (= (- y3 1) y21)))
                   (send w :draw-line x1 y21 x2 (- y3 1)))))
    (send w :line-width 1)
    (send w :draw-color old-color)))

(defproto hyp-normal-distn-proto '() '() normal-distn-proto)

(defmeth hyp-normal-distn-proto :shade (lwr upr)
  (let* ((w (send self :wind))
         (tail (send w :tail))
         (true (send w :true-distn))
         (x1 (send true :x1))
         (x2 (send true :x2))
         (origin (send w :content-origin))
         (range (send w :canvas-range 0))
         (x-min (select origin 0))
         (x-max (+ x-min (select range 1)))
         (pdf (send self :pdf))
         (y1 (funcall pdf x1))
         (y2 (funcall pdf x2))
         (oc (send w :draw-color))
         (tp1 (send w :real-to-canvas x1 0))
         (xt1 (select tp1 0))
         (yt1 (+ (select tp1 1) 20))
         (tp2 (send w :real-to-canvas x2 0))
         (xt2 (select tp2 0))
         (yt2 yt1)
         (oc (send w :draw-color)))
    (send w :draw-color 'YELLOW)
    (send w :erase-rect 0 (+ (select tp1 1) 5) 
         (select (send w :size) 0) 30)
    (cond 
      ((or (= tail 0) (= tail 1))
       (send w :add-lines (list (list x1 x1) (list 0 y1)) :draw nil :color 'YELLOW)
       (send w :draw-string (format nil "~,3f" x1) 
             (round (- xt1 (/ (send w :text-width (format nil "~,3f" x1)) 2))) yt1))
      ((= tail 2)
       (send w :add-lines (list (list x1 x1) (list 0 y1)) :draw nil :color 'YELLOW)
       (send w :add-lines (list (list x2 x2) (list 0 y2)) :draw nil :color 'YELLOW)
       (send w :draw-string (format nil "~,3f" x1) 
             (round (- xt1 (/ (send w :text-width (format nil "~,3f" x1)) 2))) yt1)
       (send w :draw-string (format nil "~,3f" x2) 
             (round (- xt2 (/ (send w :text-width (format nil "~,3f" x2)) 2))) yt1)))
   (send w :draw-color oc)))
           
    



(defmeth normal-distn-proto :num-cis (&optional num-cis)
  (if num-cis (setf (slot-value 'num-cis) num-cis))
  (slot-value 'num-cis))

(defmeth normal-distn-proto :isnew (exp var wind)
  (let* ((pdf (lambda (x)
                (let* ((m (select (send self :param-values) 0))
                       (s (select (send self :param-values) 1)))
                  (/ (normal-dens (/ (- x m) s)) s))))
         (sampling-pdf (lambda (x)
                (let* ((m (select (send self :param-values) 0))
                       (s (select (send self :param-values) 1))
                       (n (select (send self :param-values) 3))
                       (ss (/ s (sqrt n))))
                  (/ (normal-dens (/ (- x m) ss)) ss))))
         (cdf (lambda (x)
                (let* ((m (select (send self :param-values) 0))
                       (s (select (send self :param-values) 1))
                       (z (/ (- x m) s)))
                  (funcall #'normal-cdf z))))
         (quant (lambda (q)
                  (let* ((m (select (send self :param-values) 0))
                         (s (select (send self :param-values) 1))
                         (z (normal-quant q)))
                    (+ (* z s) m)))))
    (send self :num-cis -1)
    (send self :name "Normal")
    (send self :param-values (list exp var .5 5 .05 100))
    (send self :param-incrs (list .1 .1 .05 1 .05))
    (send self :param-symbols (list mup sigmap qp np ap))
    (send self :param-names (list "mean" "std. dev." "q" "sample size" "alpha"))
    (send self :lb (- exp (* 6 var)))
    (send self :ub (+ exp (* 6 var)))
    (call-next-method pdf sampling-pdf cdf quant wind)))

(defmeth normal-distn-proto :check-params ()
  (let* ((params (send self :param-values))
         (incrs (send self :param-incrs))
         (sigma (select params 1))
         (s-incr (select incrs 1)))
    (if (<= sigma 0) (setf (select (send self :param-values) 1) s-incr))
    (call-next-method)))

(defmeth normal-distn-proto :ci-check-params ()
  (let* ((dumb (send self :check-params))
         (params (send self :param-values))
         (incrs (send self :param-incrs))
         (n (select params 3))
         (alpha (select params 4)))
    (cond 
      ((<= alpha 0.0000000001)
       (setf (select (send self :param-values) 4) (select incrs 4)))
      ((> alpha 1)
       (setf (select (send self :param-values) 4) 1)))
    (cond
      ((< n 2)
       (setf (select (send self :param-values) 3) 2)))))
    

(defmeth normal-distn-proto :mean ()
  (let* ((mean (select (send self :param-values) 0)))
    mean))

(defmeth normal-distn-proto :std-dev ()
  (let* ((std (select (send self :param-values) 1)))
    std))

(defmeth normal-distn-proto :sample ()
  (let* ((params (send self :param-values))
         (mean (select params 0))
         (std-dev (select params 1))
         (n (select params 3))
         (ns (repeat n 200)))
    (sort-data (mapcar #'mean (+ (* (normal-rand ns) std-dev) mean)))))

(defmeth normal-distn-proto :ci-samples ()
  (let* ((dumb (send self :ci-check-params))
         (params (send self :param-values))
         (num-cis (select params 5))
         (mean (select params 0))
         (std-dev (select params 1))
         (n (select params 3))
         (ns (repeat n num-cis)))
    (+ (* (normal-rand (round ns)) std-dev) mean)))

(defmeth normal-distn-proto :conf-intervals ()
  (let* ((samples (send self :ci-samples))
         (dumb (send self :ci-check-params))
         (params (send self :param-values))
         (n (select params 3))
         (alpha (select params 4))
         (q (t-quant (- 1 (/ alpha 2)) (- n 1)))
         (means (mapcar #'mean samples))
         (ss (mapcar #'standard-deviation samples))
         (widths (* q (/ ss (sqrt n))))
         (lbs (- means widths))
         (ubs (+ means widths)))
   (list means lbs ubs)))

(defmeth normal-distn-proto :add-new-conf-intervals (adjust)
 (let* ((w (send self :wind))
        (dumb (send self :ci-check-params))
        (ci-txt (select (send w :param-txt) 5))
        (params (send self :param-values))
        (num-cis (select params 5))
        (cis (send self :conf-intervals))
        (means (select cis 0))
        (lbs (select cis 1))
        (ubs (select cis 2))
        (mu (select params 0))
        (sigma (select params 1))
        (ys (rseq 1 (* num-cis 4) num-cis))
        (x-max (+ mu (* 3 sigma)))
        (x-min (- mu (* 3 sigma)))
        (x-range (get-nice-range x-min x-max 5))
        (y-min 0)
        (y-max (* 4 num-cis))
        (y-range (get-nice-range y-min y-max 5))
        (temp nil))
   (send w :clear-lines :draw nil)
   (send self :num-cis 0)
   (dotimes (i num-cis temp)
             (cond 
               ((and (<= mu (select ubs i)) (>= mu (select lbs i)))
                (send self :num-cis (+ (send self :num-cis) 1))
                (send w :add-lines 
                      (list (list (select lbs i) (select ubs i)) (list (* i 4) (* i 4))) :color 'BLUE :draw nil)
                (send w :add-lines 
                      (list (list (select means i) (select means i)) (list (- (* i 4) 1) (+ (* i 4) 1))) :color 'RED :draw nil))
               (t
                (send w :add-lines 
                      (list (list (select lbs i) (select ubs i)) (list (* i 4) (* i 4))) :color 'YELLOW :draw nil)
                (send w :add-lines 
                      (list (list (select means i) (select means i)) (list (- (* i 4) 1) (+ (* i 4) 1))) :color 'RED :draw nil))))
   (send w :add-lines (list (list mu mu) (list y-min y-max)) :color 'RED :draw nil)
   (send ci-txt :redraw)
   (cond 
     (adjust
      (send self :adjust))
     (t
      (send w :redraw-content)))))

(defmeth normal-distn-proto :adjust ()
  (let* ((w (send self :wind))
        (params (send self :param-values))
        (mu (select params 0))
        (sigma (select params 1))
        (x-max (+ mu (* 3 sigma)))
        (x-min (- mu (* 3 sigma)))
        (x-range (get-nice-range x-min x-max 5))
        (y-min 0)
        (y-max (* 4 (select params 5)))
        (y-range (get-nice-range y-min y-max 5)))
    (send w :range 0 (select x-range 0) (select x-range 1) :draw nil)
    (send w :x-axis t nil (select x-range 2) :draw nil)
    (send w :range 1 (select y-range 0) (select y-range 1) :draw nil)
    (send w :y-axis nil nil (select y-range 2) :draw nil)
    (send w :redraw)))
  

;;
;; Chi-Square distribution
;;

(defproto chisq-distn-proto '() '() cont-distn-proto)

(defmeth chisq-distn-proto :isnew (df wind)
  (let* ((pdf (lambda (x)
                (let* ((df (select (send self :param-values) 0)))
                  (funcall #'chisq-dens x df))))
         (sampling-pdf (lambda (x)
                         (let* ((r (select (send self :param-values) 0))
                                (n  (select (send self :param-values) 3)))
                           (* n (chisq-dens (* n x) (* n r))))))
                           
          (cdf (lambda (x)
                (let* ((df (select (send self :param-values) 0)))
                  (funcall #'chisq-cdf x df))))
                       
         (quant (lambda (q)
                  (let* ((df (select (send self :param-values) 0)))
                  (funcall #'chisq-quant q df)))))
    (send self :name "Chi-Square")
    (send self :param-values (list df nil .5 3))
    (send self :param-incrs (list 1 nil .05 1))
    (send self :param-symbols (list dfp nil qp np))
    (send self :param-names (list "df" nil "q" "sample-size"))
    (send self :lb (funcall quant .005))
    (send self :ub (funcall quant .995))
    (call-next-method pdf sampling-pdf cdf quant wind)))

(defmeth chisq-distn-proto :check-params ()
  (let* ((params (send self :param-values))
         (dfi (select (send self :param-incrs) 0))
         (df (select params 0)))
    (setf (select (send self :param-incrs) 0) (ceiling dfi)) 
    (if (< df 1) (setf (select (send self :param-values) 0) 1))))

(defmeth chisq-distn-proto :mean ()
  (let* ((df (select (send self :param-values) 0)))
    df))

(defmeth chisq-distn-proto :std-dev ()
  (let* ((df (select (send self :param-values) 0))
         (std (sqrt (* 2 df))))
    std))

(defmeth chisq-distn-proto :sample ()
  (let* ((params (send self :param-values))
         (df (select params 0))
         (n (select params 3))
         (ns (repeat n 150)))
    (sort-data (mapcar #'mean (chisq-rand ns df)))))

;;
;; t-Distribution
;;

(defproto t-distn-proto '() '() cont-distn-proto)

(defmeth t-distn-proto :isnew (df wind)
  (let* ((pdf (lambda (x)
                (let* ((df (select (send self :param-values) 0)))
                  (funcall #'t-dens x df))))
          (cdf (lambda (x)
                (let* ((df (select (send self :param-values) 0)))
                  (funcall #'t-cdf x df))))
                       
         (quant (lambda (q)
                  (let* ((df (select (send self :param-values) 0)))
                  (funcall #'t-quant q df)))))
    (send self :name "t-Distn")
    (send self :param-values (list df nil .5 5))
    (send self :param-incrs (list 1 nil .05 1))
    (send self :param-symbols (list dfp nil qp np))
    (send self :param-names (list "df" nil "q" "sample size"))
    (send self :lb (funcall quant .005))
    (send self :ub (funcall quant .995))
    (call-next-method pdf nil cdf quant wind)))

(defmeth t-distn-proto :check-params ()
  (let* ((params (send self :param-values))
         (dfi (select (send self :param-incrs) 0))
         (df (select params 0)))
    (setf (select (send self :param-incrs) 0) (ceiling dfi)) 
    (if (< df 2) (setf (select (send self :param-values) 0) 2))))

;;
;; F-Distribution
;;

(defproto f-distn-proto '() '() cont-distn-proto)

(defmeth f-distn-proto :isnew (df1 df2 wind)
  (let* ((pdf (lambda (x)
                (let* ((df1 (select (send self :param-values) 0))
                       (df2 (select (send self :param-values) 1)))
                  (funcall #'f-dens x df1 df2))))
          (cdf (lambda (x)
                (let* ((df1 (select (send self :param-values) 0))
                       (df2 (select (send self :param-values) 1)))
                  (funcall #'f-cdf x df1 df2))))
                       
         (quant (lambda (q)
                  (let* ((df1 (select (send self :param-values) 0))
                       (df2 (select (send self :param-values) 1)))
                  (funcall #'f-quant q df1 df2)))))
    (send self :name "F-Distn")
    (send self :param-values (list df1 df2 .5 5))
    (send self :param-incrs (list 1 1 .05 1))
    (send self :param-symbols (list df1p dfp qp np))
    (send self :param-names (list "df1" "df2" "q" "sample size"))
    (send self :lb (funcall quant .005))
    (send self :ub (funcall quant .995))
    (call-next-method pdf nil cdf quant wind)))

(defmeth f-distn-proto :check-params ()
  (let* ((params (send self :param-values))
         (dfi1 (select (send self :param-incrs) 0))
         (df1 (select params 0))
         (dfi2 (select (send self :param-incrs) 1))
         (df2 (select params 1)))
    (setf (select (send self :param-incrs) 0) (ceiling dfi1)) 
    (if (< df1 1) (setf (select (send self :param-values) 0) 1))
    (setf (select (send self :param-incrs) 1) (ceiling dfi2)) 
    (if (< df2 1) (setf (select (send self :param-values) 1) 1))))
    


 
