(send *listener* :hide-window)
(provide ":StatIns:distwind.lsp")
(require ":StatIns:contdist.lsp")
(require ":StatIns:dsctdist.lsp")
(require ":StatIns:menubtn.lsp")
(require ":StatIns:radbtn.lsp")
(require ":StatIns:arrbtn.lsp")
(require ":StatIns:pushbtn.lsp")
(require ":StatIns:paramtxt.lsp")
(require ":StatIns:textbtn.lsp")


;;
;; General distribution window
;;

(defproto distn-wind-proto '(distn distn-list cntls params 
                                   pdf s-pdf hist kern samp 
                                   installed pinstalled qinstalled 
                                   prob-btns prob-quant) () graph-proto)

(defmeth distn-wind-proto :distn (&optional distn)
  (if distn (setf (slot-value 'distn) distn))
  (slot-value 'distn))

(defmeth distn-wind-proto :s-pdf (&optional s-pdf)
  (if s-pdf (setf (slot-value 's-pdf) s-pdf))
  (slot-value 's-pdf))

(defmeth distn-wind-proto :kern (&optional kern)
  (if kern (setf (slot-value 'kern) kern))
  (slot-value 'kern))

(defmeth distn-wind-proto :samp (&optional samp)
  (if samp (setf (slot-value 'samp) samp))
  (slot-value 'samp))

(defmeth distn-wind-proto :hist (&optional hist)
  (if hist (setf (slot-value 'hist) hist))
  (slot-value 'hist))

(defmeth distn-wind-proto :prob-btns (&optional prob-btns)
  (if prob-btns (setf (slot-value 'prob-btns) prob-btns))
  (slot-value 'prob-btns))

(defmeth distn-wind-proto :prob-quant (&optional prob-quant)
  (if prob-quant (setf (slot-value 'prob-quant) prob-quant))
  (slot-value 'prob-quant))

(defmeth distn-wind-proto :installed (&optional installed)
  (if installed (setf (slot-value 'installed) installed))
  (slot-value 'installed))

(defmeth distn-wind-proto :pinstalled (&optional pinstalled)
  (if pinstalled (setf (slot-value 'pinstalled) pinstalled))
  (slot-value 'pinstalled))

(defmeth distn-wind-proto :qinstalled (&optional qinstalled)
  (if qinstalled (setf (slot-value 'qinstalled) qinstalled))
  (slot-value 'qinstalled))

(defmeth distn-wind-proto :params (&optional params)
  (if params (setf (slot-value 'params) params))
  (slot-value 'params))

(defmeth distn-wind-proto :distn-list (&optional distn-list)
  (if distn-list (setf (slot-value 'distn-list) distn-list))
  (slot-value 'distn-list))

(defmeth distn-wind-proto :cntls (&optional cntls)
  (if cntls (setf (slot-value 'cntls) cntls))
  (slot-value 'cntls))

(defmeth distn-wind-proto :pdf (&optional pdf)
  (if pdf (setf (slot-value 'pdf) pdf))
  (slot-value 'pdf))

(defmeth distn-wind-proto :isnew (distn)
   (send self :distn distn)
   (send self :pdf 1)
   (call-next-method 2 :show nil))

(defmeth distn-wind-proto :new-menu ()
  nil)

(defmeth distn-wind-proto :add-cdf (adjust)
  (let* ((distn (send self :distn)))
    (send self :clear-lines :draw nil)
    (send self :variable-label '(0 1) (list "x" "F(x)"))
    (send distn :add-cdf adjust)
    (send distn :shade-quant)))

(defmeth distn-wind-proto :add-pdf (adjust)
  (let* ((distn (send self :distn)))
    (send self :clear-lines :draw nil)
    (send self :variable-label '(0 1) (list "x" "f(x)"))
    (send distn :add-pdf adjust)))

(defmeth distn-wind-proto :add-sampling-pdf (adjust)
  (let* ((distn (send self :distn))
         (pdf (send self :pdf)))
    (send self :clear-lines :draw nil)
    (send self :variable-label '(0 1) (list "x" "f(x)"))
    (if (= pdf 1) (send self :add-pdf nil))
    (send distn :add-sampling-pdf adjust)))



(defmeth distn-wind-proto :redraw ()
  (let* ((distn (send self :distn))
         (params (send distn :param-values))
         (cntls (send self :cntls))
         (installed (send self :installed))
         (pinstalled (send self :pinstalled))
         (qinstalled (send self :qinstalled))
         (pdf (send self :pdf))
         (s-pdf (send self :s-pdf))
         (pq (send self :prob-quant)))
    (cond ((and (select params 1) (= installed 0))
           (dolist (tcntl cntls)
                   (send self :add-overlay tcntl))
           (send self :installed 1)))
    (cond ((and (not (select params 1)) (= installed 1))
           (dolist (tcntl cntls)
                   (send self :delete-overlay tcntl))
           (send self :installed 0)))
    (cond 
      ((and (= pdf 1) (= pinstalled 0) (= s-pdf 0))
           (send self :add-overlay (select pq 4))
           (send self :add-overlay (select pq 5))
           (send self :pinstalled 1))
      ((and (= pdf 0) (= pinstalled 1) (= s-pdf 0))
       (send self :delete-overlay (select pq 4))
       (send self :delete-overlay (select pq 5))
       (send self :pinstalled 0)))
    (cond 
      ((and (= pdf 0) (= qinstalled 0) (= s-pdf 0))
       (send self :add-overlay (select pq 0))
       (send self :add-overlay (select pq 1))
       (send self :add-overlay (select pq 2))
       (send self :add-overlay (select pq 3))
       (send self :qinstalled 1))
      ((and (= pdf 1) (= qinstalled 1) (= s-pdf 0))
       (send self :delete-overlay (select pq 0))
       (send self :delete-overlay (select pq 1))
       (send self :delete-overlay (select pq 2))
       (send self :delete-overlay (select pq 3))
       (send self :qinstalled 0)))
    (call-next-method)))

(defmeth distn-wind-proto :redraw-content ()
  (let* ((distn (send self :distn))
         (pdf (send self :pdf)))
    (call-next-method)
    (if (= pdf 1) (send distn :shade-prob))))
    
  
  


(defmeth distn-wind-proto :draw-cntls ()
nil)

(defmeth distn-wind-proto :handle-click ()
nil)

(defmeth distn-wind-proto :handle-key ()
nil)

(defmeth distn-wind-proto :hilite-prob ()
nil)

(defmeth distn-wind-proto :hilite-quant ()
nil)

(defproto line-proto '(wind) () graph-overlay-proto)

(defmeth line-proto :isnew (wind)
  (send self :wind wind)
  (call-next-method))

(defmeth line-proto :wind (&optional wind)
  (if wind (setf (slot-value 'wind) wind))
  (slot-value 'wind))

(defmeth line-proto :redraw ()
  (let* ((w (send self :wind))
         (width (select (send w :size) 0)))
    (send w :draw-line 0 38 width 38)))
  

(defun make-distn-window (distn-num)
  (let* ((wind (send distn-wind-proto :new nil))
         (normal (send normal-distn-proto :new 0 1 wind))
         (t-distn (send t-distn-proto :new 10 wind))
         (f-distn (send f-distn-proto :new 10 10 wind))
         (chi-distn (send chisq-distn-proto :new 10 wind))
         (bin-distn (send binomial-distn-proto :new 10 .5 wind))
         (pois-distn (send poisson-distn-proto :new 4 wind))
         (distn-list (list normal t-distn f-distn chi-distn bin-distn pois-distn))
         (dummy (send wind :distn-list distn-list)) 
         (menu-btn (send distn-menu-btn-proto :new 5 5 65 11 nil nil wind distn-num))
         (redraw-btn (send pushbtn-proto :new 5 21 65 11 "Rescale" 1 wind))
         (lft0-btn (send lft-p0-proto :new 80 5 wind (select distn-list distn-num)))
         (p0-btn (send param0-sym-proto :new 90 5 wind (select distn-list distn-num)))
         (rt0-btn (send rt-p0-proto :new 100 5 wind (select distn-list distn-num)))
         (value0 (send paramtxt-proto :new 115 5 wind 0))
         (lft1-btn (send lft-p1-proto :new 80 21 wind (select distn-list distn-num)))
         (p1-btn (send param1-sym-proto :new 90 21 wind (select distn-list distn-num)))
         (rt1-btn (send rt-p1-proto :new 100 21 wind (select distn-list distn-num)))
         (value1 (send paramtxt-proto :new 115 21 wind 1))
         (prob-menu (send ineq-menu-btn-proto :new 215 5 20 11 "Ooops" wind))
         (prob-bounds (send prob-bounds-btn-proto :new 239 5 60 11 "Oops" 1 wind 0))
         (q-lft-btn (send lft-quant-proto :new 215 5 wind (select distn-list distn-num)))
         (q1-btn (send quant-sym-proto :new 225 5 wind (select distn-list distn-num)))
         (q-rt-btn (send rt-quant-proto :new 235 5 wind (select distn-list distn-num)))
         (value2 (send q-paramtxt-proto :new 255 5 wind 2))
         (lineo (send line-proto :new wind)))
    (make-color 'GREY .85 .85 .85)
    (send wind :back-color 'BLACK)
    (send wind :draw-color 'GREY)
    (send wind :s-pdf 0) 
    (send wind :installed 0)
    (send wind :pinstalled 0)
    (send wind :qinstalled 0)
    (make-distn-radio-buttons 175 6 wind)
    (send wind :distn (select distn-list distn-num))
    (send wind :title (format nil "~a f(x)" (send (send wind :distn) :name) ))
    (send wind :add-overlay menu-btn)
    (send wind :add-overlay redraw-btn)
    (send wind :add-overlay lft0-btn)
    (send wind :add-overlay p0-btn)
    (send wind :add-overlay rt0-btn)
    (send wind :add-overlay value0)
    ;;(send wind :add-overlay prob-menu)
    ;;(send wind :add-overlay prob-bounds)
    ;;(send wind :add-overlay q-lft-btn)
    ;;(send wind :add-overlay q1-btn)
    ;;(send wind :add-overlay q-rt-btn)
    ;;(send wind :add-overlay value2)
    (send wind :add-overlay lineo)
    (send wind :prob-quant (list q-lft-btn q1-btn q-rt-btn value2 prob-menu prob-bounds))
    (send wind :cntls (list lft1-btn p1-btn rt1-btn value1))
    (send wind :prob-btns (list prob-menu prob-bounds))
    (send wind :params (list value0 value1 value2))
    (send wind :margin 20 50 20 20)
    (send wind :x-axis t nil 5)
    (send wind :y-axis t nil 5)
    (send wind :add-pdf 't)
    (send wind :size 420 300)
    (send wind :redraw)
    (send wind :show-window)
    wind))

(defun make-samp-window (distn-num)
  (let* ((wind (send distn-wind-proto :new nil))
         (normal (send normal-distn-proto :new 0 1 wind))
         (chi-distn (send chisq-distn-proto :new 5 wind))
         (distn-list (list normal chi-distn))
         (dummy (send wind :distn-list distn-list)) 
         (menu-btn (send samp-menu-btn-proto :new 5 5 65 11 nil nil wind distn-num))
         (redraw-btn (send pushbtn-proto :new 5 21 65 11 "Scale/Sample" 1 wind))
         (lft0-btn (send lft-p0-proto :new 80 5 wind (select distn-list distn-num)))
         (p0-btn (send param0-sym-proto :new 90 5 wind (select distn-list distn-num)))
         (rt0-btn (send rt-p0-proto :new 100 5 wind (select distn-list distn-num)))
         (value0 (send paramtxt-proto :new 115 5 wind 0))
         (lft1-btn (send lft-p1-proto :new 80 21 wind (select distn-list distn-num)))
         (p1-btn (send param1-sym-proto :new 90 21 wind (select distn-list distn-num)))
         (rt1-btn (send rt-p1-proto :new 100 21 wind (select distn-list distn-num)))
         (value1 (send paramtxt-proto :new 115 21 wind 1))
         (lft3-btn (send lft-samp-proto :new 190 5 wind (select distn-list distn-num)))
         (p3-btn (send sample-sym-proto :new 200 5 wind 3))
         (rt3-btn (send rt-samp-proto :new 210 5 wind (select distn-list distn-num)))
         (value3 (send paramtxt-proto :new 225 5 wind 3))
         (value2 nil)
         (mean-txt (send ms-txt-proto :new 275 5 wind 0))
         (lineo (send line-proto :new wind)))
    (make-color 'GREY .85 .85 .85)
    (send wind :back-color 'BLACK)
    (send wind :draw-color 'GREY)
    (send wind :s-pdf 1)
    (send wind :pdf 0)
    (send wind :kern 0)
    (send wind :hist 0)
    (send wind :samp 1) 
    (send wind :installed 0)
    (send wind :pinstalled 0)
    (send wind :qinstalled 0)
    (send wind :distn (select distn-list distn-num))
    (send wind :title (format nil "~a f(x)" (send (send wind :distn) :name) ))
    (send wind :add-overlay menu-btn)
    (send wind :add-overlay redraw-btn)
    (send wind :add-overlay lft0-btn)
    (send wind :add-overlay p0-btn)
    (send wind :add-overlay rt0-btn)
    (send wind :add-overlay value0)
    (send wind :add-overlay lft3-btn)
    (send wind :add-overlay p3-btn)
    (send wind :add-overlay rt3-btn)
    (send wind :add-overlay value3)
    (send wind :add-overlay mean-txt)
    ;;(send wind :add-overlay prob-menu)
    ;;(send wind :add-overlay prob-bounds)
    ;;(send wind :add-overlay q-lft-btn)
    ;;(send wind :add-overlay q1-btn)
    ;;(send wind :add-overlay q-rt-btn)
    ;;(send wind :add-overlay value2)
    (send wind :add-overlay lineo)
    (send wind :prob-quant nil)
    (send wind :cntls (list lft1-btn p1-btn rt1-btn value1))
    (send wind :params (list value0 value1 value2 value3 mean-txt))
    (send wind :margin 20 50 20 20)
    (send wind :x-axis t nil 5)
    (send wind :y-axis t nil 5)
    (send wind :add-sampling-pdf 't)
    (send wind :size 420 300)
    (send wind :redraw)
    (send wind :show-window)
    wind))

(defproto ci-wind-proto '(distn param-txt) () graph-proto)

(defmeth ci-wind-proto :distn (&optional distn)
  (if distn (setf (slot-value 'distn) distn))
  (slot-value 'distn))

(defmeth ci-wind-proto :param-txt (&optional param-txt)
  (if param-txt (setf (slot-value 'param-txt) param-txt))
  (slot-value 'param-txt))

(defmeth ci-wind-proto :isnew (distn)
   (send self :distn distn)
   (call-next-method 2 :show nil))

(defmeth ci-wind-proto :new-menu ()
  nil)

(defun make-ci-window ()
  (let* ((wind (send ci-wind-proto :new nil))
         (normal (send normal-distn-proto :new 0 1 wind))
         (recalc-btn (send ci-pushbtn-proto :new 5 5 65 11 "Recalculate" 1 wind))
         (rescale-btn (send ci-rescalebtn-proto :new 5 21 65 11 "Rescale" 1 wind))
         (lft0-btn (send ci-lft-p0-proto :new 80 5 wind normal))
         (p0-btn (send ci-param0-sym-proto :new 90 5 wind normal))
         (rt0-btn (send ci-rt-p0-proto :new 100 5 wind normal))
         (value0 (send paramtxt-proto :new 115 5 wind 0))
         (p1-btn (send ci-param1-sym-proto :new 90 21 wind normal))
         (lft1-btn (send ci-lft-p1-proto :new 80 21 wind normal))
         (rt1-btn (send ci-rt-p1-proto :new 100 21 wind normal))
         (value1 (send paramtxt-proto :new 115 21 wind 1))
         (lft3-btn (send ci-lft-samp-proto :new 190 5 wind normal))
         (p3-btn (send ci-sample-sym-proto :new 200 5 wind 3))
         (rt3-btn (send ci-rt-samp-proto :new 210 5 wind normal))
         (value3 (send paramtxt-proto :new 225 5 wind 3))
         (lft4-btn (send ci-lft-alpha-proto :new 190 21 wind normal))
         (p4-btn (send ci-alpha-sym-proto :new 200 21 wind 4))
         (rt4-btn (send ci-rt-alpha-proto :new 210 21 wind normal))
         (value4 (send paramtxt-proto :new 225 21 wind 4))
         (ci-pct (send ci-paramtxt-proto :new 300 5 wind 0))
         (lineo (send line-proto :new wind)))
    (make-color 'GREY .85 .85 .85)
    (send wind :back-color 'BLACK)
    (send wind :draw-color 'GREY)
    (send wind :distn normal)
    (send wind :param-txt (list value0 value1 nil value3 value4 ci-pct))
    (send wind :title "Confidence Intervals")
    (send wind :add-overlay lineo)
    (send wind :add-overlay lft0-btn)
    (send wind :add-overlay p0-btn)
    (send wind :add-overlay rt0-btn)
    (send wind :add-overlay value0)
    (send wind :add-overlay lft1-btn)
    (send wind :add-overlay p1-btn)
    (send wind :add-overlay rt1-btn)
    (send wind :add-overlay value1)
    (send wind :add-overlay lft3-btn)
    (send wind :add-overlay p3-btn)
    (send wind :add-overlay rt3-btn)
    (send wind :add-overlay value3)
    (send wind :add-overlay lft4-btn)
    (send wind :add-overlay p4-btn)
    (send wind :add-overlay rt4-btn)
    (send wind :add-overlay value4)
    (send wind :add-overlay ci-pct)
    (send wind :add-overlay recalc-btn)
    (send wind :add-overlay rescale-btn)
    (send wind :margin 20 50 20 20)
    (send wind :size 500 400)
    (send normal :add-new-conf-intervals T)
    (send wind :redraw)
    (send wind :show-window)
    wind))

(defproto power-wind-proto '(hyp-distn true-distn params param-incr
param-txt param-names param-symbols tail visible) () graph-proto)

(defmeth power-wind-proto :isnew (params param-incr)
  (send self :params params)
  (send self :param-incr param-incr)
  (call-next-method 2 :show nil))

(defmeth power-wind-proto :hyp-distn (&optional hyp-distn)
  (if hyp-distn (setf (slot-value 'hyp-distn) hyp-distn))
  (slot-value 'hyp-distn))

(defmeth power-wind-proto :true-distn (&optional true-distn)
  (if true-distn (setf (slot-value 'true-distn) true-distn))
  (slot-value 'true-distn))

(defmeth power-wind-proto :params (&optional params)
  (if params (setf (slot-value 'params) params))
  (slot-value 'params))

(defmeth power-wind-proto :param-incr (&optional param-incr)
  (if param-incr (setf (slot-value 'param-incr) param-incr))
  (slot-value 'param-incr))

(defmeth power-wind-proto :param-txt (&optional param-txt)
  (if param-txt (setf (slot-value 'param-txt) param-txt))
  (slot-value 'param-txt))

(defmeth power-wind-proto :param-names (&optional param-names)
  (if param-names (setf (slot-value 'param-names) param-names))
  (slot-value 'param-names))

(defmeth power-wind-proto :param-symbols (&optional param-symbols)
  (if param-symbols (setf (slot-value 'param-symbols) param-symbols))
  (slot-value 'param-symbols))

(defmeth power-wind-proto :tail (&optional tail)
  (if tail (setf (slot-value 'tail) tail))
  (slot-value 'tail))

(defmeth power-wind-proto :visible (&optional visible)
  (if visible (setf (slot-value 'visible) visible))
  (slot-value 'visible))

(defmeth power-wind-proto :s-pdf (&optional alpha)
  0)

(defmeth power-wind-proto :new-menu ()
  nil)


(defmeth power-wind-proto :redraw-content ()
  (let* ((true (send self :true-distn))
         (hyp (send self :hyp-distn)))
    (call-next-method)
    (if true (send true :shade-prob))
    (send self :add-distns nil)))

(defmeth power-wind-proto :add-distns (adjust)
  (let* ((hyp (send self :hyp-distn))
         (true (send self :true-distn))
         (hyp-q (send hyp :quant))
         (hyp-p (send hyp :pdf))
         (hyp-lb (funcall hyp-q .000001))
         (hyp-ub (funcall hyp-q .999999))
         (hyp-med (funcall hyp-q .5))
         (hyp-y (funcall hyp-p hyp-med))
         (true-q (send true :quant))
         (true-p (send true :pdf))
         (true-lb (funcall true-q .000001))
         (true-ub (funcall true-q .999999))
         (true-med (funcall true-q .5))
         (true-y (funcall true-p true-med))
         (xlb (min hyp-lb true-lb))
         (xub (max hyp-ub true-ub))
         (ylb 0)
         (yub (max hyp-y true-y))
         (nrx (get-nice-range xlb xub 5))
         (nry (get-nice-range ylb yub 5)))
    (cond ((= (send self :visible) 1)
           (send self :clear-lines :draw nil)
           (send hyp :shade-prob)
           (send self :variable-label '(0 1) (list "" "f(x)"))
           (send self :add-function true-p xlb xub :color 'BLUE :draw nil)
           (send self :add-function hyp-p xlb xub :color 'GREEN :draw nil)
           (cond (adjust
                  (send self :range 0 (select nrx 0) (select nrx 1) :draw nil)
                  (send self :x-axis t t 0 :draw nil)
                  (send self :range 1 (select nry 0) (select nry 1) :draw nil)
                  (send self :y-axis t t (select nry 2))))))))

(defun make-power-window ()
  (let* ((wind (send power-wind-proto :new (list 1 1 5 .05) (list .05 .05 1 .01)))
         (null-norm (send hyp-normal-distn-proto :new 0 (/ 1 (sqrt 5)) wind))
         (alt-norm (send true-normal-distn-proto :new 1 (/ 1 (sqrt 5)) wind))
         (menu (send power-menu-btn-proto :new 5 5 65 11 nil nil wind 1))
         (redraw-btn (send power-rescalebtn-proto :new 5 21 65 11 "Rescale" 1 wind))
         (lft-delta (send lft-delta-proto :new 80 5 wind alt-norm))
         (sym-delta (send delta-sym-proto :new 90 5 wind alt-norm))
         (rgt-delta (send rgt-delta-proto :new 100 5 wind alt-norm))
         (val-delta (send power-txt-proto :new 115 5 wind 0))
         (lft-sigma (send lft-sigma-proto :new 80 21 wind alt-norm))
         (sym-sigma (send sigma-sym-proto :new 90 21 wind alt-norm))
         (rgt-sigma (send rgt-sigma-proto :new 100 21 wind alt-norm))
         (val-sigma (send power-txt-proto :new 115 21 wind 1))
         (lft-n (send lft-n-proto :new 190 5 wind alt-norm))
         (sym-n (send n-sym-proto :new 200 5 wind alt-norm))
         (rgt-n (send rgt-n-proto :new 210 5 wind alt-norm))
         (val-n (send power-txt-proto :new 225 5 wind 2))
         (lft-alpha (send lft-alpha-proto :new 190 21 wind alt-norm))
         (sym-alpha (send alpha-sym-proto :new 200 21 wind alt-norm))
         (rgt-alpha (send rgt-alpha-proto :new 210 21 wind alt-norm))
         (val-alpha (send alpha-pow-txt-proto :new 225 21 wind 3))
         (val-power (send beta-txt-proto :new 300 5 wind 0))
         (lineo (send line-proto :new wind)))
    (send alt-norm :x1 (funcall (send null-norm :quant) .95))
    (send alt-norm :ineq 3)
    (make-color 'GREY .85 .85 .85)
    (send wind :visible 0)
    (send wind :tail 0)
    (send wind :back-color 'BLACK)
    (send wind :draw-color 'GREY)
    (send wind :hyp-distn null-norm)
    (send wind :true-distn alt-norm)
    (send wind :param-names (list "Delta" "Sigma" "n" "alpha"))
    (send wind :param-symbols (list deltap sigmap np ap))
    (send wind :param-txt (list val-delta val-sigma val-n val-alpha val-power menu))
    (send wind :title "Power - Upper Tailed")
    (send wind :add-overlay menu)
    (send wind :add-overlay redraw-btn)
    (send wind :add-overlay lft-delta)
    (send wind :add-overlay sym-delta)
    (send wind :add-overlay rgt-delta)
    (send wind :add-overlay val-delta)
    (send wind :add-overlay lft-sigma)
    (send wind :add-overlay sym-sigma)
    (send wind :add-overlay rgt-sigma)
    (send wind :add-overlay val-sigma)
    (send wind :add-overlay lft-n)
    (send wind :add-overlay sym-n)
    (send wind :add-overlay rgt-n)
    (send wind :add-overlay val-n)
    (send wind :add-overlay lft-alpha)
    (send wind :add-overlay sym-alpha)
    (send wind :add-overlay rgt-alpha)
    (send wind :add-overlay val-alpha)
    (send wind :add-overlay val-power)
    (send wind :add-overlay lineo)
    (send wind :margin 20 50 20 20)
    (send wind :size 420 300)
    (send wind :visible 1)
    (send wind :add-distns t)
    (send wind :redraw)
    (send wind :show-window)
    wind))


    
    
