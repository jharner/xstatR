(provide ":StatIns:paramtxt.lsp")

(defproto paramtxt-proto '(lft tp wind paramnum) () graph-overlay-proto)

(defmeth paramtxt-proto :lft (&optional lft)
  (if lft (setf (slot-value 'lft) lft))
  (slot-value 'lft))

(defmeth paramtxt-proto :tp (&optional tp)
  (if tp (setf (slot-value 'tp) tp))
  (slot-value 'tp))

(defmeth paramtxt-proto :wind (&optional wind)
  (if wind (setf (slot-value 'wind) wind))
  (slot-value 'wind))

(defmeth paramtxt-proto :paramnum (&optional paramnum)
  (if paramnum (setf (slot-value 'paramnum) paramnum))
  (slot-value 'paramnum))

(defmeth paramtxt-proto :isnew (lft tp wind paramnum)
  (send self :lft lft)
  (send self :tp tp)
  (send self :wind wind)
  (send self :paramnum paramnum))

(defmeth paramtxt-proto :redraw ()
 (let* ((w (send self :wind))
        (lft (send self :lft))
        (tp (send self :tp))
        (distn (send w :distn))
        (pnum (send self :paramnum))
        (values (send distn :param-values))
        (txt (format nil "= ~,2f" (select values pnum))))
  (send w :erase-rect lft tp 40 10) 
  (send w :draw-string txt lft (+ tp 9))))

(defproto power-txt-proto '() () paramtxt-proto)

(defmeth power-txt-proto :redraw ()
  (let* ((w (send self :wind))
        (lft (send self :lft))
        (tp (send self :tp))
        (pnum (send self :paramnum))
        (values (send w :params))
        (pow-txt (select (send w :param-txt) 4))
        (txt (format nil "= ~,2f" (select values pnum))))
  (send w :erase-rect lft tp 40 10) 
  (send w :draw-string txt lft (+ tp 9))
  (send pow-txt :redraw)))

;;
;; alpha power
;;

(defproto alpha-pow-txt-proto '() () paramtxt-proto)

(defmeth alpha-pow-txt-proto :redraw ()
  (let* ((w (send self :wind))
        (lft (send self :lft))
        (tp (send self :tp))
        (pnum (send self :paramnum))
        (values (send w :params))
        (pow-txt (select (send w :param-txt) 4))
        (txt1 (format nil "~,2f" (select values pnum)))
        (txt2 (format nil "= "))
        (oc (send w :draw-color)))
  (send w :erase-rect lft tp 40 10) 
  (send w :draw-string txt2 lft (+ tp 9))
  (send w :draw-color 'YELLOW)
  (send w :draw-string txt1 (+ lft (send w :text-width txt2)) (+ tp 9))
  (send w :draw-color oc)
  (send pow-txt :redraw)))

;;;
;;; need to update x1 as you update all other parameters
;;;

(defproto beta-txt-proto '() () paramtxt-proto)

(defmeth beta-txt-proto :redraw ()
  (let* ((w (send self :wind))
         (lft (send self :lft))
         (tp (send self :tp))
         (true-distn (send w :true-distn))
         (hyp-distn (send w :hyp-distn))
         (alpha (select (send w :params) 3))
         (delta (select (send w :params) 0))
         (hyp-q (send hyp-distn :quant))
         (cdf (send true-distn :cdf))
         (power 0)
         (txt1 (format nil "~,4f" power))
         (txt2 (format nil "Power = "))
         (oc (send w :draw-color)))
    (cond 
      ((= (send w :tail) 0)
       (send true-distn :x1 (funcall (send hyp-distn :quant) (- 1 alpha)))
       (setf power (- 1 (funcall cdf (send true-distn :x1)))))
      ((= (send w :tail) 1)
       (send true-distn :x1 (funcall (send hyp-distn :quant) alpha))
       (setf power (funcall cdf (send true-distn :x1))))
      ((= (send w :tail) 2)
       (send true-distn :x1 (funcall (send hyp-distn :quant) (/ alpha 2)))
       (send true-distn :x2 (funcall (send hyp-distn :quant) (- 1 (/ alpha 2))))
       (setf power (- 1 (funcall cdf (send true-distn :x2))))
       (setf power (+ power (funcall cdf (send true-distn :x1))))))
  (setf txt1 (format nil "~,4f" power)) 
  (send w :erase-rect lft tp 80 10)
  (send w :draw-string txt2 lft (+ tp 9))
  (send w :draw-color 'RED) 
  (send w :draw-string txt1 (+ lft (send w :text-width txt2)) (+ tp 9))
  (send w :draw-color oc)))

(defproto ci-paramtxt-proto '() () paramtxt-proto)

(defmeth ci-paramtxt-proto :redraw ()
  (let* ((w (send self :wind))
         (distn (send w :distn))
         (lft (send self :lft))
         (tp (send self :tp))
         (nc (select (send distn :param-values) 5))
         (num-cis (send distn :num-cis)))
    (send w :erase-rect lft tp 100 20)
    (send w :draw-string (format nil "~,d% contain µ" (floor (* (/ num-cis nc) 100))) lft (+ tp 9))))

(defproto q-paramtxt-proto '() () paramtxt-proto)

(defmeth q-paramtxt-proto :redraw ()
 (let* ((w (send self :wind))
        (lft (send self :lft))
        (tp (send self :tp))
        (distn (send w :distn))
        (dumb (send distn :check-params))
        (quant (send distn :quant))
        (pnum (send self :paramnum))
        (values (send distn :param-values))
        (txt1 "X")
        (txt2 "(")
        (txt3 (format nil "~,2f" (select values pnum)))
        (txt4 ")")
        (txt5 " = ")
        (txt6 (format nil "~,4f" (funcall quant (select values pnum))))
        (tw lft)
        (tt (+ tp 9))
        (old-color (send w :draw-color)))
  (send w :erase-rect lft tp 100 20) 
  (send w :draw-string txt1 tw tt)
  (setf tw (+ tw (send w :text-width txt1)))
  (send w :draw-string txt2 tw (+ tt 5))
  (setf tw (+ tw (send w :text-width txt2)))
  (send w :draw-color 'GREEN) 
  (send w :draw-string txt3 tw (+ tt 5))
  (setf tw (+ tw (send w :text-width txt3)))
  (send w :draw-color old-color)
  (send w :draw-string txt4 tw (+ tt 5))
  (setf tw (+ tw (send w :text-width txt4)))
  (send w :draw-string txt5 tw tt)
  (setf tw (+ tw (send w :text-width txt5)))
  (send w :draw-color 'GREEN) 
  (send w :draw-string txt6 tw tt)
  (send w :draw-color old-color)))

(defproto ms-txt-proto '() () paramtxt-proto)

(defmeth ms-txt-proto :redraw ()
 (let* ((w (send self :wind))
        (lft (send self :lft))
        (tp (send self :tp))
        (distn (send w :distn))
        (mean (send distn :mean))
        (n (select (send distn :param-values) 3))
        (std-dev (/ (send distn :std-dev) (sqrt n))))
   (send w :erase-rect (+ lft 30) tp 50 30)
   (send w :draw-string "µ(" lft (+ tp 9))
   (setf lft (+ lft (send w :text-width "µ(")))
   (send w :draw-bitmap xb lft (+ tp 2))
   (setf lft (+ lft 6))
   (send w :draw-string ") = " lft (+ tp 9))
   (setf lft (+ lft (send w :text-width ") = ")))
   (send w :draw-string (format nil "~,4f" mean) lft (+ tp 9))
   (setf lft (- (send self :lft) 2))
   (send w :draw-bitmap sigmap lft (+ tp 17))
   (setf lft (+ lft 8))
   (send w :draw-string "(" lft (+ tp 24))
   (setf lft (+ lft (send w :text-width "(")))
   (send w :draw-bitmap xb lft (+ tp 17))
   (setf lft (+ lft 6))
   (send w :draw-string ") = " lft (+ tp 24))
   (setf lft (+ lft (send w :text-width ") = ")))
   (send w :draw-string (format nil "~,4f" std-dev) lft (+ tp 24))))



