(require ":StatIns:cntls.lsp")
(provide ":StatIns:pushbtn.lsp")

(defproto pushbtn-proto '() () cntl-proto)

(defmeth pushbtn-proto :isnew (lft tp wth ht title part wind)
  (call-next-method lft tp wth ht title part wind)
  (send self :ht 11))

(defmeth pushbtn-proto :draw-cntl-hilited ()
  (let* ((w (send self :wind))
         (lft (send self :lft))
         (wth (send self :wth))
         (tp (send self :tp))
         (ht (send self :ht)))
    (send w :draw-mode 'xor)
    (send w :paint-rect (+ lft 1) (+ tp 1) (- wth 1) (- ht 1))
    (send w :draw-mode 'normal)))

(defmeth pushbtn-proto :draw-cntl-unhilited ()
  (let* ((w (send self :wind))
         (lft (send self :lft))
         (wth (send self :wth))
         (tp (send self :tp))
         (ht (send self :ht))
         (title (send self :title))
         (tw (send w :text-width title)))
    (send w :erase-rect (+ lft 1) (+ tp 1) (- wth 2) (- ht 2))
    (send w :frame-rect lft tp wth ht)
    (send w :draw-string title (+ lft (ceiling (/ (- wth tw) 2))) (+ tp 9))))
    
(defmeth pushbtn-proto :no-mod-click (x y m1 m2)
 (let* ((w (send self :wind))
        (distn (send w :distn))
        (pdf (send w :pdf))
        (s-pdf (send w :s-pdf)))
   (send self :hilite 0)
   (send self :redraw)
   (cond 
     ((and (= s-pdf 0) (= pdf 1))
      (send w :add-pdf 't)
      (send distn :shade-prob))
     ((and (= s-pdf 0) (= pdf 0))
      (send w :add-cdf 't) 
      (send distn :shade-quant))
     ((= s-pdf 1)
      (send w :add-sampling-pdf 't)))
   (send w :redraw-content)))

(defproto ci-pushbtn-proto '() () pushbtn-proto)

(defmeth ci-pushbtn-proto :no-mod-click (x y m1 m2)
 (let* ((w (send self :wind))
        (distn (send w :distn)))
   (send self :hilite 0)
   (send self :redraw)
   (send distn :add-new-conf-intervals nil)))

(defproto ci-rescalebtn-proto '() () pushbtn-proto)

(defmeth ci-rescalebtn-proto :no-mod-click (x y m1 m2)
 (let* ((w (send self :wind))
        (distn (send w :distn)))
   (send self :hilite 0)
   (send self :redraw)
   (send distn :adjust)))

(defproto power-rescalebtn-proto'() () pushbtn-proto)

(defmeth power-rescalebtn-proto :no-mod-click (x y m1 m2)
  (let* ((w (send self :wind)))
    (send self :hilite 0)
    (send self :redraw)
    (send w :add-distns 'T)))